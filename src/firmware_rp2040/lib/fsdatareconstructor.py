FILE_DATA = {"menu_entry_scale.py": "ZnJvbSBhYmMgaW1wb3J0IEFCQwppbXBvcnQgbWVudV9lbnRyeQoKY2xhc3MgbWVudV9lbnRyeV9zY2FsZShtZW51X2VudHJ5KToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgX25hbWU6IHN0cik6CiAgICAgICAgcGFzcwoKICAgIGRlZiBhY3RpdmF0ZShzZWxmKToKICAgICAgICBwYXNzCgogICAgZGVmIHRlYXJkb3duKHNlbGYpOgogICAgICAgIHBhc3MKCiAgICBkZWYgdXBkYXRlKHNlbGYpOgogICAgICAgIHBhc3M=", "ledring.py": "aW1wb3J0IG5lb3BpeGVsCmltcG9ydCBtYWNoaW5lCmltcG9ydCBjb25maWcKaW1wb3J0IG5lb3BpeGVsCmltcG9ydCByYW5kb20KZnJvbSBzaW5nbGV0b24gaW1wb3J0IHNpbmdsZXRvbgoKQHNpbmdsZXRvbgpjbGFzcyBsZWRyaW5nOgoKCiAgICBuZW9waXhlbHJpbmc6IG5lb3BpeGVsLk5lb1BpeGVsID0gTm9uZQogICAKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLm5lb3BpeGVscmluZyA9IG5lb3BpeGVsLk5lb1BpeGVsKG1hY2hpbmUuUGluKGNvbmZpZy5DRkdfTkVPUElYRUxfUElOKSwgY29uZmlnLkNGR19ORU9QSVhFTF9MRURfQ09VTlQpCiAgIAogICAgZGVmIGNsZWFyKHNlbGYpOgogICAgICAgIHNlbGYuc2V0X25lb3BpeGVsX2Z1bGwoMCwgMCwgMCkKCiAgICBkZWYgc2V0X25lb3BpeGVsX2Z1bGwoc2VsZiwgX3I6IGludCwgX2c6IGludCwgX2I6IGludCk6CiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoY29uZmlnLkNGR19ORU9QSVhFTF9MRURfQ09VTlQpOgogICAgICAgICAgICBzZWxmLm5lb3BpeGVscmluZ1tpXSA9IChfciwgX2csIF9iKQogICAgICAgIHNlbGYubmVvcGl4ZWxyaW5nLndyaXRlKCkKCiAgICBkZWYgc2V0X25lb3BpeGVsX3JhbmRvbShzZWxmLCBfZXI6IGJvb2wgPSBGYWxzZSwgX2VnOiBib29sID0gRmFsc2UsIF9lYjogYm9vbCA9IFRydWUpOgogICAgICAgIHI6IGludCA9IGludCgxMjgqIHJhbmRvbS5yYW5kb20oKSkgKiBfZXIKICAgICAgICBnOiBpbnQgPSBpbnQoMTI4KiByYW5kb20ucmFuZG9tKCkpICogX2VnCiAgICAgICAgYjogaW50ID0gaW50KDEyOCogcmFuZG9tLnJhbmRvbSgpKSAqIF9lYgogICAgICAgIHNlbGYuc2V0X25lb3BpeGVsX2Z1bGwociwgZywgYik=", "system_command.py": "ZnJvbSBtaWNyb3B5dGhvbiBpbXBvcnQgY29uc3QKCmNsYXNzIHN5c3RlbV9jb21tYW5kOgogICAgVU5LTk9XTjogaW50ID0gY29uc3QoLTEpCiAgICBDT01NQU5EX1RZUEVfTkFWSUdBVElPTjogaW50ID0gY29uc3QoMCkKCiAgICBOQVZJR0FUSU9OX0xFRlQ6IGludCA9IGNvbnN0KDApCiAgICBOQVZJR0FUSU9OX1JJR0hUOiBpbnQgPSBjb25zdCgxKQogICAgTkFWSUdBVElPTl9FTlRFUjogaW50ID0gY29uc3QoMikKICAgIE5BVklHQVRJT05fRVhJVDogaW50ID0gY29uc3QoMykKCgoKICAgIHR5cGU6IGludCA9IFVOS05PV04KICAgIGFjdGlvbjogaW50ID0gVU5LTk9XTgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBfdHlwZTogaW50ID0gVU5LTk9XTiwgX2FjdGlvbjogaW50ID0gVU5LTk9XTik6CiAgICAgICAgc2VsZi50eXBlID0gX3R5cGUKICAgICAgICBzZWxmLmFjdGlvbiA9IF9hY3Rpb24=", "menu_manager.py": "aW1wb3J0IG1lbnVfZW50cnkKaW1wb3J0IHN5c3RlbV9jb21tYW5kCmZyb20gc2luZ2xldG9uIGltcG9ydCBzaW5nbGV0b24KCgpAc2luZ2xldG9uCmNsYXNzIG1lbnVfbWFuYWdlcjoKCiAgICBtZW51X2VudGlyZXM6IFttZW51X2VudHJ5Lm1lbnVfZW50cnldID0gW10KCiAgICBjdXJyZW50X2FjdGl2ZV9lbnRyeTogbWVudV9lbnRyeS5tZW51X2VudHJ5ID0gTm9uZQoKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBwYXNzCgogICAgCiAgICBkZWYgYWRkX3N1YmVudHJpZXMoc2VsZiwgX2VudHJ5OiBtZW51X2VudHJ5Lm1lbnVfZW50cnkpOgogICAgICAgIHBhc3MKCgogICAgZGVmIHByb2Nlc3NfdXNlcl9jb21tYW5kcyhzZWxmLCBfc3lzdGVtX2NvbW1hbmQ6IHN5c3RlbV9jb21tYW5kKToKICAgICAgICBwYXNzCiAgICAKICAgIGRlZiBwcm9jZXNzX3N5c3RlbV9jb21tYW5kcyhzZWxmLCBfc3lzdGVtX2NvbW1hbmQ6IHN5c3RlbV9jb21tYW5kKToKICAgICAgICBwYXNz", "while.bck": "", "recipe_loader.py": "aW1wb3J0IG1hY2hpbmUNCmltcG9ydCBvcw0KaW1wb3J0IHRpbWUNCmltcG9ydCBqc29uDQoNCmZyb20gdWkgaW1wb3J0IHVpDQppbXBvcnQgY29uZmlnDQppbXBvcnQgaGVscGVyDQppbXBvcnQgZXhhbXBsZV9yZWNpcGVzDQppbXBvcnQgc2V0dGluZ3MNCg0KDQpjbGFzcyBVU0VSX0lOVEVSQUNUSU9OX01PREU6DQogICAgU0NBTEUgPSAwDQogICAgQ09ORklSTSA9IDENCiAgICBXQUlUID0gMg0KDQoNCg0KY2xhc3MgcmVjaXBlX2xvYWRlcjoNCiAgICANCiAgDQogICAgbG9hZGVkX3JlY2lwZSA9IE5vbmUNCiAgICBjdXJyZW50X3JlY2lwZV9zdGVwID0gTm9uZQ0KICAgDQoNCiAgICBkZWYgX19pbml0X18oc2VsZik6DQogICAgICAgIHByaW50KCJyZWNpcGVfbG9hZGVyOiBfX2luaXRfXyIpDQoNCiAgICAgICAgc2VsZi51bmxvYWRfcmVjaXBlKCkNCiAgICAgICAgc2VsZi5jcmVhdGVfaW5pdGlhbF9yZWNpcGUoKQ0KICAgICAgICANCiAgICBkZWYgZ2V0X3JlY2lwZV9pbmZvcm1hdGlvbihzZWxmKSAtPiAoc3RyLCBzdHIpOg0KICAgICAgICBpZiBzZWxmLmxvYWRlZF9yZWNpcGUgaXMgTm9uZToNCiAgICAgICAgICAgIHJldHVybiAoImludmFsaWQiLCAiLS0tIikNCiAgICAgICAgDQogICAgICAgIHJldHVybiAoc2VsZi5sb2FkZWRfcmVjaXBlWyduYW1lJ10sIHNlbGYubG9hZGVkX3JlY2lwZVsnZGVzY3JpcHRpb24nXSkNCiAgICANCiAgICBkZWYgc3dpdGNoX25leHRfc3RlcChzZWxmKToNCiAgICAgICAgaWYgc2VsZi5sb2FkZWRfcmVjaXBlIGlzIE5vbmU6DQogICAgICAgICAgICByZXR1cm4NCiAgICAgICAgaWYgc2VsZi5jdXJyZW50X3JlY2lwZV9zdGVwIGlzIE5vbmU6DQogICAgICAgICAgICBzZWxmLmN1cnJlbnRfcmVjaXBlX3N0ZXAgPSAwDQogICAgICAgIHN0ZXBzID0gc2VsZi5sb2FkZWRfcmVjaXBlWydzdGVwcyddDQogICAgICAgIG5fc3RlcHMgPSBsZW4oc3RlcHMpDQogICAgICAgIGlmIHNlbGYuY3VycmVudF9yZWNpcGVfc3RlcCA8IG5fc3RlcHM6DQogICAgICAgICAgICBzZWxmLmN1cnJlbnRfcmVjaXBlX3N0ZXAgPSBzZWxmLmN1cnJlbnRfcmVjaXBlX3N0ZXAgKyAxDQogICAgICAgICAgICAgICAgICANCiAgICBkZWYgc3dpdGNoX3ByZXZfc3RlcChzZWxmKToNCiAgICAgICAgcGFzcw0KICAgIA0KICAgIGRlZiBpc19yZWNpcGVfbG9hZGVkKHNlbGYpOg0KICAgICAgICBpZiBzZWxmLmxvYWRlZF9yZWNpcGUgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgICAgICByZXR1cm4gRmFsc2UNCiAgICAgICAgDQogICAgZGVmIGdldF9jdXJyZW50X3JlY2lwZV9zdGVwKHNlbGYpIC0+IChVU0VSX0lOVEVSQUNUSU9OX01PREUsIHN0ciwgc3RyLCBpbnQsIGludCwgaW50LCBib29sKTogIyAoYWN0aW9uLCBpbmdyZWRpZW50LCBjdXJyZW50X3N0ZXAsIG1heF9zdGVwcywgdGFyZ2V0X3dlaWdodCwgZmluaXNoZWQpDQogICAgICAgIGlmIHNlbGYubG9hZGVkX3JlY2lwZSBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIChOb25lLCBOb25lLCBOb25lLCBOb25lLCBOb25lLCBOb25lLCBUcnVlKQ0KICAgICAgICBzdGVwcyA9IHNlbGYubG9hZGVkX3JlY2lwZVsnc3RlcHMnXQ0KICAgICAgICBuX3N0ZXBzID0gbGVuKHN0ZXBzKQ0KICAgICAgICBpZiBzZWxmLmN1cnJlbnRfcmVjaXBlX3N0ZXAgaXMgTm9uZToNCiAgICAgICAgICAgIHNlbGYuY3VycmVudF9yZWNpcGVfc3RlcCA9IDANCiAgICAgICAgDQogICAgICAgIGlmIHNlbGYuY3VycmVudF9yZWNpcGVfc3RlcCA+PSBuX3N0ZXBzOg0KICAgICAgICAgICAgIHJldHVybiAoTm9uZSwgTm9uZSwgTm9uZSwgTm9uZSwgTm9uZSwgTm9uZSwgVHJ1ZSkNCiAgICAgICAgICAgIA0KICAgICAgICBzdGVwID0gc3RlcHNbc2VsZi5jdXJyZW50X3JlY2lwZV9zdGVwXQ0KICAgICAgICBpZiBzdGVwWydhY3Rpb24nXSA9PSAnc2NhbGUnOg0KICAgICAgICAgICAgaW5ncmVkaWVudF9uYW1lID0gc2VsZi5sb2FkZWRfcmVjaXBlWydpbmdyZWRpZW50cyddW3N0ZXBbJ2luZ3JlZGllbnQnXV0NCiAgICAgICAgICAgIHJldHVybiAoVVNFUl9JTlRFUkFDVElPTl9NT0RFLlNDQUxFLCBzdGVwWydhY3Rpb24nXSwgaW5ncmVkaWVudF9uYW1lLCBzZWxmLmN1cnJlbnRfcmVjaXBlX3N0ZXArMSwgbl9zdGVwcywgc3RlcFsnYW1vdW50J10sIEZhbHNlKQ0KICAgICAgICBlbGlmIHN0ZXBbJ2FjdGlvbiddID09ICdjb25maXJtJzogICAgIA0KICAgICAgICAgICAgcmV0dXJuIChVU0VSX0lOVEVSQUNUSU9OX01PREUuQ09ORklSTSwgc3RlcFsnYWN0aW9uJ10sIHN0ZXBbJ3RleHQnXSwgc2VsZi5jdXJyZW50X3JlY2lwZV9zdGVwKzEsIG5fc3RlcHMsIDAsIEZhbHNlKQ0KICAgICAgICBlbGlmIHN0ZXBbJ2FjdGlvbiddID09ICd3YWl0JzogICAgIA0KICAgICAgICAgICAgcmV0dXJuIChVU0VSX0lOVEVSQUNUSU9OX01PREUuV0FJVCwgc3RlcFsnYWN0aW9uJ10sIHN0ZXBbJ3RleHQnXSwgc2VsZi5jdXJyZW50X3JlY2lwZV9zdGVwKzEsIG5fc3RlcHMsIHN0ZXBbJ2Ftb3VudCddLCBGYWxzZSkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiAoTm9uZSwgTm9uZSwgTm9uZSwgTm9uZSwgTm9uZSwgTm9uZSwgVHJ1ZSkNCiAgICAgICAgICAgICAgICAgICAgDQogICAgZGVmIHVubG9hZF9yZWNpcGUoc2VsZik6DQogICAgICAgIHNlbGYubG9hZGVkX3JlY2lwZSA9IE5vbmUNCiAgICAgICAgDQogICAgZGVmIGdldF9pbmdyZWRpZW50X2xpc3Qoc2VsZikgLT4gW3N0cl06DQogICAgICAgIGlmIHNlbGYubG9hZGVkX3JlY2lwZSBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIFtdDQogICAgICAgIHJ0ID0gW10NCiAgICAgICAgaW5nID0gc2VsZi5sb2FkZWRfcmVjaXBlWydpbmdyZWRpZW50cyddDQogICAgICAgIGlmIGluZyBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIFtdDQogICAgICAgIGZvciBrIGluIGluZzoNCiAgICAgICAgICAgIHJ0LmFwcGVuZChpbmdba10pDQogICAgICAgIHJldHVybiBydA0KICAgIA0KICAgIGRlZiBnZXRfaW5ncmVkaWVudF9zdHIoc2VsZikgLT4gc3RyOg0KICAgICAgICBydCA9ICIiDQogICAgICAgIGZvciBpdGVtIGluIHNlbGYuZ2V0X2luZ3JlZGllbnRfbGlzdCgpOg0KICAgICAgICAgICAgcnQgPSBydCArIGl0ZW0gKyAiXG4iDQogICAgICAgIHJldHVybiBydA0KICAgICAgICANCg0KDQogICAgZGVmIGNyZWF0ZV9pbml0aWFsX3JlY2lwZShzZWxmKToNCiAgICAgICAgZm9yIGsgaW4gZXhhbXBsZV9yZWNpcGVzLkVYQU1QTEVfUkVDSVBFU19DT0xMRUNUSU9OOg0KICAgICAgICAgICAgc2V0dGluZ3Muc2V0dGluZ3MoKS53cml0ZV9qc29uX2ZpbGUoayArICIucmVjaXBlIiwgZXhhbXBsZV9yZWNpcGVzLkVYQU1QTEVfUkVDSVBFU19DT0xMRUNUSU9OW2tdKQ0KICAgICAgICAgICAgDQoNCiAgICBkZWYgbGlzdF9yZWNwaWVzKHNlbGYpIC0+IChzdHIsIHN0cik6DQogICAgICAgIHJlcyA9IFtdDQogICAgICAgIGZvciBmIGluIHNldHRpbmdzLnNldHRpbmdzKCkubGlzdF9maWxlcygpOg0KICAgICAgICAgICAgaWYgZi5lbmRzd2l0aCgnLnJlY2lwZScpOg0KICAgICAgICAgICAgICAgICMgZiA9IHRlcXVpbGFfc3VucmlzZS5yZWNpcGUNCiAgICAgICAgICAgICAgICBuYW1lID0gZi5yZXBsYWNlKCcucmVjaXBlJywgJycpLnJlcGxhY2UoJ18nLCAnICcpDQogICAgICAgICAgICAgICAgcmVzLmFwcGVuZCgoZixuYW1lKSkNCiAgICAgICAgcmV0dXJuIHJlcw0KICAgIA0KICAgIGRlZiBsb2FkX3JlY2lwZShzZWxmLCBfZmlsZW5hbWU6IHN0cikgLT4gYm9vbDoNCiAgICAgICAgIA0KICAgICAgICBpZiAnLnJlY2lwZScgbm90IGluIF9maWxlbmFtZToNCiAgICAgICAgICAgIF9maWxlbmFtZSA9IF9maWxlbmFtZSArICIucmVjaXBlIg0KICAgICAgICAgICAgDQogICAgICAgIGlmIF9maWxlbmFtZSBub3QgaW4gc2V0dGluZ3Muc2V0dGluZ3MoKS5saXN0X2ZpbGVzKCk6DQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCiAgICAgICAgDQogICAgICAgIGpzb25fcmVjaXBlID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5sb2FkX2pzb25fZmlsZShfZmlsZW5hbWUpDQogICAgICAgIA0KICAgICAgICBpZiBqc29uX3JlY2lwZToNCiAgICAgICAgICAgIHNlbGYubG9hZGVkX3JlY2lwZSA9IGpzb25fcmVjaXBlDQogICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KDQogICAgDQogICAgDQogICAgDQo=", "mmb_display.py": "aW1wb3J0IGNvbmZpZwppbXBvcnQgbWFjaGluZQoKCmNsYXNzIG1tYl9kaXNwbGF5KCk6CgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGRpc3BsYXlfaW5zdGFuY2VfY3JlYXRvcigpOgogICAgICAgICAgICAgICAgICAgCiAgICAgICAgaWYgY29uZmlnLkNGR19ESVNQTEFZX1RZUEUgPT0gInNoMTEwNiI6CiAgICAgICAgICAgIGltcG9ydCBzaDExMDYKICAgICAgICAgICAgaTJjID0gbWFjaGluZS5JMkMoY29uZmlnLkNGR19PTEVEX0kyQ0lOU1RBTkNFLCBzY2w9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NDTF9QSU4pLCBzZGE9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NEQV9QSU4pLCBmcmVxPTQwMDAwMCkKICAgICAgICAgICAgZGlzcCA9IHNoMTEwNi5TSDExMDZfSTJDKGNvbmZpZy5TQ1JfV0lEVEgsIGNvbmZpZy5TQ1JfSEVJR0hULCBpMmMsIE5vbmUsIGNvbmZpZy5DRkdfT0xFRF9BRERSKQogICAgICAgICAgICBkaXNwLnNsZWVwKEZhbHNlKQogICAgICAgICAgICByZXR1cm4gZGlzcAoKICAgICAgICBlbGlmIGNvbmZpZy5DRkdfRElTUExBWV9UWVBFID09ICJzc2QxMzA2IjoKICAgICAgICAgICAgaW1wb3J0IHNzZDEzMDYKICAgICAgICAgICAgaTJjID0gbWFjaGluZS5JMkMoY29uZmlnLkNGR19PTEVEX0kyQ0lOU1RBTkNFLCBzY2w9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NDTF9QSU4pLCBzZGE9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NEQV9QSU4pLCBmcmVxPTQwMDAwMCkKICAgICAgICAgICAgZGlzcCA9IHNzZDEzMDYuU1NEMTMwNl9JMkMoY29uZmlnLlNDUl9XSURUSCwgY29uZmlnLlNDUl9IRUlHSFQsIGkyYywgY29uZmlnLkNGR19PTEVEX0FERFIpCiAgICAgICAgICAgIHJldHVybiBkaXNwCiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICAKCiAgICAKICAgIGRlZiBfX2luaXRfXyhzZWxmKSAtPiBOb25lOgogICAgICAgIHBhc3MKCiAgICBkZWYgcGl4ZWwoc2VsZiwgeCwgeSwgdmFsdWUpOgogICAgICAgIHBhc3MKIAogICAgZGVmIHNob3coKToKICAgICAgICBwYXNzCiAgICAgIAogICAgZGVmIGZpbGxfcmVjdChzZWxmLCB4LCB5LCB3LCBoLCB2KToKICAgICAgICBwYXNzCiAgICAKICAgIGRlZiBwcmludChzZWxmLCBfc3RyKToKICAgICAgICBwYXNzCgogICAgZGVmIHdyaXRlKHNlbGYsIF9zdHIpOgogICAgICAgIHBhc3MKICAgIAogICAgZGVmIGVyYXNlKHNlbGYpOgogICAgICAgIHBhc3MKCiAgICBkZWYgdGV4dChzZWxmLCB0ZXh0LCB4LCB5LCBjb2xvcj0xKToKICAgICAgICBwYXNz", "config.py": "IyBIQVJEV0FSRSBDT05GSUcgU1RBUlRTIEhFUkUKIyBzc2QxMzA2ID0gMTI4eDY0IG9sZGVkIHdpdGggc3NkMTMwNiBjb250cm9sbGVyCiMgc2gxMTA2ID0gMTI4eDY0IG9sZGVkIHdpdGggc3NoMTEwNiBjb250cm9sbGVyCkNGR19ESVNQTEFZX1RZUEUgPSAic2gxMTA2IiAjIHNoMTEwNiBzc2QxMzA2CkNGR19DQUxJQlJBVElPTl9XRUlHSFRfV0VJR0hUID0gNTAKQ0ZHX1NDQUxFX0dMQVNTX0FERElUSU9OX05FWFRfU1RFUF9XRUlHSFQgPSA1MCAjIFhnIG1vcmUgb24gc2NhbGUgdG8gdHJpZ2dlciBuZXh0IHN0ZXAgaW4gcmVjaXBlID0+IDEvMyB3ZWlnaHQgb2YgYSB0eXBpY2FsIGdsYXNzCkNGR19VU0VSX0xPTkdfQlVUVE9OX1BSRVNTX1RJTUUgPSAxMDAwICMgdGltZSB0byByZWdzaXRlciBhIGxvbmcgYnV0dG9uIHByZXNzIGluIG1zCkNGR19ESVNQTEFZX1VTRVJfUVJfQ09ERSA9IFRydWUgIyBUcnVlIEZhbHNlCkNGR19ORU9QSVhFTF9MRURfQ09VTlQgPSAyNiAjNjAKQ0ZHX05FT1BJWEVMX0xFRF9TVEFSVF9PRkZTRVQgPSAoQ0ZHX05FT1BJWEVMX0xFRF9DT1VOVC8yKSAjIE1BWCBDRkdfTkVPUElYRUxfTEVEX0NPVU5UIFRPIFJPVEFURSBUSEUgU1RBUlRQT0lOVAoKCiMgREVGQVVMVCBXSUZJIFNFVFRJTkdTCiMgQ0FOIExBVEVSIEJFIENBTkdFRCBJTiBUSEUgU0RDQVJEL1NFVFRJTkdTLkpTT04gRklMRQpDRkdfTkVUV09SS19IT1NUTkFNRSA9ICJtaXhhbmRtZWFzdXJlYmVycnkiICMgeFh4WC5sb2NhbApDRkdfTkVUV09SS19XSUZJQ09VTlRSWSA9ICJERSIgIyBERSBVUwpDRkdfTkVUV09SS19XSUZJX1NTSUQgPSAiTWFrZXJzcGFjZSIKQ0ZHX05FVFdPUktfV0lGSV9QU0sgPSAiTVM4Y0N2cEUiCkNGR19ORVRXT1JLX0FQSV9FTkRQT0lOVCA9ICJtaXhtZWFzdXJlYnVkZHkuY29tL2FwaS9tbWIiCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyMjIyMjIFBJTiBDT05GSUcgIyMjIyMjIyMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIE5FT1BJWEVMIFJJTkcKQ0ZHX05FT1BJWEVMX1BJTiA9IDI4CiMgQlVUVE9OUwpDRkdfQlVUVE9OX0xFRlRfUElOID0gMTIKQ0ZHX0JVVFRPTl9SSUdIVF9QSU4gPSAxMwojIEhYNzExIE1PRFVMRQpDRkdfSFg3MTFfRE9VVF9QSU4gPSA1CkNGR19IWDcxMV9TQ0tfUElOID0gMTIKIyBbT1BUSU9OQUxdIFNEIENBUkQKQ0ZHX1NEQ0FSRF9TUElJTlNUQU5DRSA9IDEKQ0ZHX1NEQ0FSRF9TQ0tfUElOID0gMTAKQ0ZHX1NEQ0FSRF9NT1NJX1BJTiA9IDExCkNGR19TRENBUkRfTUlTT19QSU4gPSA4CkNGR19TRENBUkRfQ1NfUElOID0gOQojIFtPUFRJT05BTF0gU1NEMTMwNiBvciBTSDExMDYKQ0ZHX09MRURfSTJDSU5TVEFOQ0UgPSAwCkNGR19PTEVEX1NDTF9QSU4gPSAyMQpDRkdfT0xFRF9TREFfUElOID0gMjAKQ0ZHX09MRURfQUREUiA9IDB4M2MKQ0ZHX0RJU1BMQVlfTElORV9TUEFDSU5HID0gOSAjIHBpeGVsIGZvbnQgd2lkdGgKQ0ZHX0RJU1BMQVlfQ0hBUl9XSURUSCA9IDgKClNDUl9XSURUSCA9IDEyOApTQ1JfSEVJR0hUID0gNjQKCgogICAgCg==", "ui.py": "", "example_recipes.py": "RVhBTVBMRV9SRUNJUEVTX0NPTExFQ1RJT046IGRpY3QgPSB7CiAgICAiZXhhbXBsZV9yZWNpcGUucmVjaXBlIjogewogICAgICAgICJuYW1lIjogIkVYQU1QTEVfUkVDSVBFIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiQSBuaWNlIEV4YW1wbGUgQ29ja3RhaWwiLAogICAgICAgICJ2ZXJzaW9uIjogIjEuMC4wIiwKICAgICAgICAiaW5ncmVkaWVudHMiOiB7IjAiOiAiQSIsICIxIjogIkIiLCAiMiI6ICJDIn0sCiAgICAgICAgInN0ZXBzIjogWwogICAgICAgICAgICB7ImFjdGlvbiI6ICJzY2FsZSIsICJpbmdyZWRpZW50IjogIjAiLCAiYW1vdW50IjogMTB9LAogICAgICAgICAgICB7ImFjdGlvbiI6ICJjb25maXJtIiwgInRleHQiOiAic2hha2UgaXQifSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAid2FpdCIsICJ0ZXh0IjogIndhaXQgZm9yIGl0IiwgImFtb3VudCI6IDIwfSwKICAgICAgICBdLAogICAgfSwKICAgICJUZXF1aWxhX1N1bnJpc2UucmVjaXBlIjogewogICAgICAgICJuYW1lIjogIlRlcXVpbGEgU3VucmlzZSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgbmljZSBUZXF1aWxhIFN1bnJpc2UgQ29ja3RhaWwiLAogICAgICAgICJ2ZXJzaW9uIjogIjEuMC4wIiwKICAgICAgICAiaW5ncmVkaWVudHMiOiB7IjAiOiAid2Vpw59lciBUZXF1aWxhIiwgIjEiOiAiT3JhbmdlbnNhZnQiLCAiMiI6ICJHcmVuYWRpbmUifSwKICAgICAgICAic3RlcHMiOiBbCiAgICAgICAgICAgIHsiYWN0aW9uIjogInNjYWxlIiwgImluZ3JlZGllbnQiOiAiMCIsICJhbW91bnQiOiAxMH0sCiAgICAgICAgICAgIHsiYWN0aW9uIjogInNjYWxlIiwgImluZ3JlZGllbnQiOiAiMSIsICJhbW91bnQiOiAxMjB9LAogICAgICAgICAgICB7ImFjdGlvbiI6ICJjb25maXJtIiwgInRleHQiOiAiQUREIElDRSJ9LAogICAgICAgICAgICB7ImFjdGlvbiI6ICJzY2FsZSIsICJpbmdyZWRpZW50IjogIjIiLCAiYW1vdW50IjogNDB9LAogICAgICAgICAgICB7ImFjdGlvbiI6ICJ3YWl0IiwgInRleHQiOiAiV0FJVCBGT1IgU0VUVExFIERPV04iLCAiYW1vdW50IjogMTB9LAogICAgICAgIF0sCiAgICB9LAogICAgIlN0cmF3YmVycnlfQ29sYWRhLnJlY2lwZSI6IHsKICAgICAgICAibmFtZSI6ICJTdHJhd2JlcnJ5IENvbGFkYSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgZnJ1aXR5IHN0cmF3YmVycnkgY29ja3RhaWwgd2l0aCBjb2NvbnV0IiwKICAgICAgICAidmVyc2lvbiI6ICIxLjAuMCIsCiAgICAgICAgImluZ3JlZGllbnRzIjogewogICAgICAgICAgICAiMCI6ICIxMCBTdHJhd2JlcnJpZXMiLAogICAgICAgICAgICAiMSI6ICJDb2NvbnV0LUp1aWNlIiwKICAgICAgICAgICAgIjIiOiAiQ3JlYW0iLAogICAgICAgICAgICAiMyI6ICJQaW5lYXBwbGUtSnVpY2UiLAogICAgICAgICAgICAiNCI6ICJ3aGl0ZSBSdW0iLAogICAgICAgICAgICAiNSI6ICJDcnVzaGVkIEljZSIsCiAgICAgICAgfSwKICAgICAgICAic3RlcHMiOiBbCiAgICAgICAgICAgIHsiYWN0aW9uIjogImNvbmZpcm0iLCAidGV4dCI6ICJwdXJlZSBzdHJhd2JlcnJpZXMifSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAiY29uZmlybSIsICJ0ZXh0IjogImFkZCAxLzIgY3J1c2hlZCBpY2UifSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAic2NhbGUiLCAiaW5ncmVkaWVudCI6ICIxIiwgImFtb3VudCI6IDYwfSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAic2NhbGUiLCAiaW5ncmVkaWVudCI6ICIyIiwgImFtb3VudCI6IDMwfSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAic2NhbGUiLCAiaW5ncmVkaWVudCI6ICIzIiwgImFtb3VudCI6IDgwfSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAic2NhbGUiLCAiaW5ncmVkaWVudCI6ICI0IiwgImFtb3VudCI6IDUwfSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAid2FpdCIsICJ0ZXh0IjogIlNoYWtlIiwgImFtb3VudCI6IDMwfSwKICAgICAgICBdLAogICAgfSwKfQo=", "Scales.py": "aW1wb3J0IHN0YXRpY19tb2R1bGVzLmh4NzExIGFzIGh4NzExDQppbXBvcnQgdGltZQ0KaW1wb3J0IG1hdGgNCg0KY2xhc3MgU2NhbGVzKGh4NzExLkhYNzExKToNCiAgICBkZWYgX19pbml0X18oc2VsZiwgZF9vdXQgPSA1LCBwZF9zY2sgPSAxMik6DQogICAgICAgIHN1cGVyKFNjYWxlcywgc2VsZikuX19pbml0X18oZF9vdXQsIHBkX3NjaykNCiAgICAgICAgc2VsZi5vZmZzZXQgPSAwDQoNCiAgICBkZWYgcmVzZXQoc2VsZik6DQogICAgICAgIHNlbGYucG93ZXJfb2ZmKCkNCiAgICAgICAgc2VsZi5wb3dlcl9vbigpDQoNCiAgICBkZWYgdGFyZShzZWxmKToNCiAgICAgICAgc2VsZi5vZmZzZXQgPSBzZWxmLnJlYWQoKQ0KDQogICAgZGVmIHJhd192YWx1ZShzZWxmKToNCiAgICAgICAgcmV0dXJuIHNlbGYucmVhZCgpIC0gc2VsZi5vZmZzZXQNCg0KICAgIGRlZiBzdGFibGVfcmF3X3ZhbHVlKHNlbGYsIHdpdGhvdXRfb2Zmc2V0OiBib29sID0gRmFsc2UsIHJlYWRzPTEwLCBkZWxheV91cz0xMCk6ICAgICANCiAgICAgICAgc3RhYmxlX3ZhbHVlcyA9IFtdDQogICAgICAgIGZvciBpIGluIHJhbmdlKHJlYWRzKToNCiAgICAgICAgICAgIGlmIHdpdGhvdXRfb2Zmc2V0Og0KICAgICAgICAgICAgICAgIHN0YWJsZV92YWx1ZXMuYXBwZW5kKHNlbGYucmVhZCgpKQ0KICAgICAgICAgICAgZWxzZTogICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBzdGFibGVfdmFsdWVzLmFwcGVuZChzZWxmLnJhd192YWx1ZSgpKQ0KICAgICAgICAgICAgdGltZS5zbGVlcF9tcygxMCkNCiAgICAgICAgDQogICAgICAgIHRhcmVfdmFsdWUgPSAwLjANCiAgICAgICAgZm9yIHYgaW4gc3RhYmxlX3ZhbHVlczoNCiAgICAgICAgICAgIHRhcmVfdmFsdWUgPSB0YXJlX3ZhbHVlICsgdg0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHRhcmVfdmFsdWUgLyByZWFkcw0KICAgIA0KIA0KICAgIGRlZiBzZXRfc2NhbGUoc2VsZiwgX3NjYWxlX2ZhY3RvcjogZmxvYXQpOg0KICAgICAgICBpZiBfc2NhbGVfZmFjdG9yIGlzIE5vbmUgb3IgX3NjYWxlX2ZhY3RvciA9PSAwLjA6DQogICAgICAgICAgICBfc2NhbGVfZmFjdG9yID0gMS4wDQogICAgICAgICAgICBwcmludCgic2V0IF9zY2FsZV9mYWN0b3IgdG8gMS4wIGR1ZSBwYXJhbWV0ZXIgX3NjYWxlX2ZhY3RvciBpcyBOb25lIG9yIFplcm8iKQ0KICAgICAgICBzZWxmLlNDQUxFX0ZBQ1RPUiA9IF9zY2FsZV9mYWN0b3INCiAgICAgICAgDQogICAgZGVmIGdldF91bml0KHNlbGYsIF9zdGFibGU6IGJvb2wgPSBGYWxzZSkgLT4gZmxvYXQ6DQogICAgICAgIGlmIHNlbGYuU0NBTEVfRkFDVE9SID09IDAuMDoNCiAgICAgICAgICAgIHNlbGYuU0NBTEVfRkFDVE9SID0gMS4wDQogICAgICAgICAgICANCiAgICAgICAgaWYgX3N0YWJsZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLnJhd192YWx1ZSgpIC8gc2VsZi5TQ0FMRV9GQUNUT1INCiAgICAgICAgDQogICAgICAgIHJldHVybiBzZWxmLnN0YWJsZV9yYXdfdmFsdWUoKSAvIHNlbGYuU0NBTEVfRkFDVE9SDQogICAgICAgIA0KICAgICAgICANCiAgICAgICAgDQogDQo=", "recipe_updater.py": "aW1wb3J0IGNvbmZpZwppbXBvcnQgc2V0dGluZ3MKaW1wb3J0IHRpbWUKaW1wb3J0IGhlbHBlcgoKdHJ5OgogICAgaW1wb3J0IG5ldHdvcmsKICAgIGltcG9ydCBzb2NrZXQKICAgIGltcG9ydCB1cmVxdWVzdHMKCiAgICBjbGFzcyByZWNpcGVfdXBkYXRlcjoKICAgICAgICAKICAgICAgICBAc3RhdGljbWV0aG9kCiAgICAgICAgZGVmIGRpc2FibGVfd2lmaSgpOgogICAgICAgICAgICB3bGFuID0gbmV0d29yay5XTEFOKG5ldHdvcmsuU1RBX0lGKQogICAgICAgICAgICB3bGFuLmFjdGl2ZShGYWxzZSkKICAgICAgICAKICAgICAgICBAc3RhdGljbWV0aG9kCiAgICAgICAgZGVmIGNvbm5lY3Rfd2lmaSgpIC0+IGJvb2w6CiAgICAgICAgICAgIG5ldHdvcmsuY291bnRyeShjb25maWcuQ0ZHX05FVFdPUktfV0lGSUNPVU5UUlkpCiAgICAgICAgICAgIG5ldHdvcmsuaG9zdG5hbWUoY29uZmlnLkNGR19ORVRXT1JLX0hPU1ROQU1FKQoKICAgICAgICAgICAgd2xhbiA9IG5ldHdvcmsuV0xBTihuZXR3b3JrLlNUQV9JRikKICAgICAgICAgICAgd2xhbi5hY3RpdmUoVHJ1ZSkKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICBzc2lkID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5zZXRfc2V0dGluZ3NfZW50cnkoc2V0dGluZ3MuU0VUVElOR1NfRU5UUklFUy5ORVRXT1JLX1dJRklfU1NJRCkKICAgICAgICAgICAgcHNrID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5zZXRfc2V0dGluZ3NfZW50cnkoc2V0dGluZ3MuU0VUVElOR1NfRU5UUklFUy5ORVRXT1JLX1dJRklfUFNLKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgc3NpZCBpcyBOb25lIG9yIHBzayBpcyBOb25lOgogICAgICAgICAgICAgICAgcHJpbnQoIlNTSUQgT1IgUFNLIEZPUiBXSUZJIENPTk5FQ1RJT04gTk9UIFNFVCIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCgogICAgICAgICAgICBwcmludCgiQ09OTkVDVElORyBUTzoge30iLmZvcm1hdChzc2lkKSkKICAgICAgICAgICAgd2xhbi5jb25uZWN0KHNzaWQsIHBzaykKICAgICAgICAgICAgdGltZXIgPSAwCiAgICAgICAgICAgIHdoaWxlIHdsYW4uaXNjb25uZWN0ZWQoKSA9PSBGYWxzZToKICAgICAgICAgICAgICAgIHByaW50KCdXYWl0aW5nIGZvciBjb25uZWN0aW9uLi4uJykKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICAgICAgICAgIHRpbWVyID0gdGltZXIgKyAxCgogICAgICAgICAgICAgICAgaWYgdGltZXIgPiAxMDoKICAgICAgICAgICAgICAgICAgICB3bGFuLmFjdGl2ZShGYWxzZSkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHdsYW4uaXNjb25uZWN0ZWQoKToKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAoKICAgICAgICBAc3RhdGljbWV0aG9kCiAgICAgICAgZGVmIGNoZWNrX3VwZGF0ZV91cmwoKSAtPiBzdHI6CiAgICAgICAgICAgIGlmIG5vdCByZWNpcGVfdXBkYXRlci5jb25uZWN0X3dpZmkoKToKICAgICAgICAgICAgICAgIHJldHVybiAiIgogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgYXBpX2VuZHBvaW50OiBzdHIgPSBzZXR0aW5ncy5zZXR0aW5ncy5pbnN0YW5jZSgpLnNldF9zZXR0aW5nc19lbnRyeShzZXR0aW5ncy5TRVRUSU5HU19FTlRSSUVTLk5FVFdPUktfQVBJX0VOUE9JTlQpCiAgICAgICAgICAgIGlmIGFwaV9lbmRwb2ludCBpcyBOb25lOgogICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKCiAgICAgICAgICAgIGlmICdodHRwOi8vJyBub3QgaW4gYXBpX2VuZHBvaW50OgogICAgICAgICAgICAgICAgYXBpX2VuZHBvaW50ID0gJ2h0dHA6Ly8nICsgYXBpX2VuZHBvaW50CiAgICAgICAgICAgIHByaW50KCJjaGVja191cGRhdGVfdXJsOiBzZXQgYXBpIGVuZHBvaW50IHVybCB7fSIuZm9ybWF0KGFwaV9lbmRwb2ludCkpCiAgICAgICAgICAgIAogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIEdFVCBMSVNUIE9GIFJFQ0lQRVMKICAgICAgICAgICAgICAgIGZpbmFsID0gInt9L3t9Ii5mb3JtYXQoYXBpX2VuZHBvaW50LCBzdHIoaGVscGVyLmdldF9zeXN0ZW1faWQoKSkpCiAgICAgICAgICAgICAgICByID0gdXJlcXVlc3RzLmdldChmaW5hbCkKICAgICAgICAgICAgICAgIHIuY2xvc2UoKQogICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9lbmRwb2ludCAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KHN0cihlKSkKICAgICAgICAgICAgICAgIHJldHVybiBOb25lCgogICAgICAgICAgICAKICAgICAgICBAc3RhdGljbWV0aG9kICAgCiAgICAgICAgZGVmIHVwZGF0ZV9yZWNpcGVzKCkgLT4gYm9vbDoKICAgICAgICAgICAgCiAgICAgICAgICAgIGFwaV9lbmRwb2ludDogc3RyID0gcmVjaXBlX3VwZGF0ZXIuY2hlY2tfdXBkYXRlX3VybCgpCiAgICAgICAgCiAgICAgICAgICAgIHByaW50KCJBUEk6IHt9Ii5mb3JtYXQoYXBpX2VuZHBvaW50KSkKICAgICAgICAgICAgdGltZS5zbGVlcCgyKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIEdFVCBMSVNUIE9GIFJFQ0lQRVMKICAgICAgICAgICAgICAgIHIgPSB1cmVxdWVzdHMuZ2V0KCJ7fS97fS9yZWNpcGVzIi5mb3JtYXQoYXBpX2VuZHBvaW50LCBzdHIoaGVscGVyLmdldF9zeXN0ZW1faWQoKSkpLCAgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICAgICAgcmVjaXBlX2xpc3QgPSByLmpzb24oKSAjIFsicmVzaXBlX2ZpbGVfdXJpX3JlbGF0aXZlIl0KICAgICAgICAgICAgICAgIHIuY2xvc2UoKQogICAgICAgICAgICAgICAgaWYgcmVjaXBlX2xpc3QgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgIyBET05XTE9BRCBFQUNIIFJFQ0lQRQogICAgICAgICAgICAgICAgICAgIGZvciByZWNpcGUgaW4gcmVjaXBlX2xpc3Q6CiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB1cmVxdWVzdHMuZ2V0KCJ7fS97fS9yZWNpcGUve30iLmZvcm1hdChhcGlfZW5kcG9pbnQsIHN0cihoZWxwZXIuZ2V0X3N5c3RlbV9pZCgpKSwgcmVjaXBlKSwgIGhlYWRlcnM9aGVhZGVycykKICAgICAgICAgICAgICAgICAgICAgICAgZGxfcmVjaXBlID0gci5qc29uKCkgIyBbe2ZpbGVuYW1lX3dpdGhvdXRfZW5kaW5nLCByZWNpcGV9XQogICAgICAgICAgICAgICAgICAgICAgICByLmNsb3NlKCkKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdyZWNpcGUnIGluIGRsX3JlY2lwZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnNldHRpbmdzLmluc3RhbmNlKCkud3JpdGVfanNvbl9maWxlKGRsX3JlY2lwZVsnbmFtZSddICsgIi5yZWNpcGUiLCBkbF9yZWNpcGVbJ3JlY2lwZSddKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoImNhbnQgc3RvcmUgcmVjaXBlZCBkYXRhIGJsb2NrIGR1ZSB0byBtaXNzaW5nIHJlY2lwZSBkaWN0IGJsb2NrIikKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KHN0cihlKSkKICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHJlY2lwZV91cGRhdGVyLmRpc2FibGVfd2lmaSgpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgCgpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgCiAgICBjbGFzcyByZWNpcGVfdXBkYXRlcjoKICAgICAgICAKICAgICAgICBkZWYgZGlzYWJsZV93aWZpKCk6CiAgICAgICAgICAgIHBhc3MKICAgICAgICAKICAgICAgICBkZWYgY2hlY2tfdXBkYXRlX3VybCgpIC0+IHN0cjoKICAgICAgICAgICAgcGFzcwoKICAgICAgICBkZWYgY29ubmVjdF93aWZpKCkgLT4gYm9vbDoKICAgICAgICAgICAgcGFzcwoKICAgICAgICBkZWYgdXBkYXRlX3JlY2lwZXMoKSAtPiBib29sOgogICAgICAgICAgICBwYXNz", "menu_entry.py": "CgpjbGFzcyBtZW51X2VudHJ5OgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBfbmFtZTogc3RyKToKICAgICAgICBwYXNzCgogICAgZGVmIGFjdGl2YXRlKHNlbGYpOgogICAgICAgIHBhc3MKCiAgICBkZWYgdGVhcmRvd24oc2VsZik6CiAgICAgICAgcGFzcwoKICAgIGRlZiB1cGRhdGUoc2VsZik6CiAgICAgICAgcGFzcw==", "helper.py": "aW1wb3J0IHRpbWUNCmltcG9ydCB1YmluYXNjaWkNCmltcG9ydCBtYWNoaW5lDQppbXBvcnQgc3lzDQoNCmRlZiBtaWxsaXMoKToNCiAgICByZXR1cm4gcm91bmQodGltZS50aW1lKCkgKiAxMDAwKQ0KDQpkZWYgZm1hcChzLCBhMSwgYTIsIGIxLCBiMikgLT4gZmxvYXQ6DQogICAgcmV0dXJuIGIxICsgKHMgLSBhMSkgKiAoYjIgLSBiMSkgLyAoYTIgLSBhMSkNCg0KZGVmIGltYXAocywgYTEsIGEyLCBiMSwgYjIpIC0+IGludDoNCiAgICByZXR1cm4gYjEgKyAocyAtIGExKSAqIChiMiAtIGIxKSAvIChhMiAtIGExKQ0KDQpkZWYgZ2V0X3N5c3RlbV9pZCgpOg0KICAgIHJldHVybiB1YmluYXNjaWkuaGV4bGlmeShtYWNoaW5lLnVuaXF1ZV9pZCgpKS5kZWNvZGUoJ3V0Zi04JykNCg0KZGVmIGhhc193aWZpKCk6DQogICAgaWYgJ1Jhc3BiZXJyeSBQaSBQaWNvIFcnIGluIHN0cihzeXMuaW1wbGVtZW50YXRpb24pOg0KICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgIHJldHVybiBGYWxzZQ0K", "settings.py": "", "sdcard.py": "", "main.py": "ZnJvbSB1dGltZSBpbXBvcnQgc2xlZXBfdXMNCmltcG9ydCB1YXN5bmNpbyBhcyBhaW8NCmZyb20gYWlvYnV0dG9uIGltcG9ydCBBSU9CdXR0b24NCmZyb20gY29sbGVjdGlvbnMgaW1wb3J0IGRlcXVlDQoNCmltcG9ydCBtYWNoaW5lDQppbXBvcnQgdGltZQ0KaW1wb3J0IG1hdGgNCg0KaW1wb3J0IHJhbmRvbQ0KaW1wb3J0IGhlbHBlcg0KI2ltcG9ydCBTY2FsZXMNCmltcG9ydCBjb25maWcNCmltcG9ydCByZWNpcGVfbG9hZGVyDQppbXBvcnQgdWkNCmltcG9ydCBzZXR0aW5ncw0KaW1wb3J0IG1lbnVfbWFuYWdlcg0KaW1wb3J0IG1lbnVfZW50cnkNCmltcG9ydCBsZWRyaW5nDQppbXBvcnQgc3lzdGVtX2NvbW1hbmQNCnByaW50KCJtYWluOiBfX2VudHJ5X18iKQ0KDQoNCg0KQlVUVE9OX0lOREVYX0xFRlQgPSAwDQpCVVRUT05fSU5ERVhfUklHSFQgPSAxDQoNCkJVVFRPTl9QUkVTU0VEID0gMA0KQlVUVE9OX0hPTEQgPSAxDQpCVVRUT05fUkVMRUFTRUQgPSAyDQoNCmxhc3RfbGVmdF9idXR0b25fc3RhdGU6IGludCA9IDANCmJ1dHRvbl9zdGF0ZV9kaWN0OiBsaXN0ID0gWy0xLCAtMV0NCnVzZXJfaW5wdXRfZXZlbnRfcXVldWUgID0gZGVxdWUoKQ0KDQoNCiMgR0VORVJBVEVEIFNZU1RFTSBFVkVOVFMgREVQRU5JTkcgT04gVEhFIFBSRVNTRUQgQlVUVE9OIFRPIE5BVklHQVRFIFRIT1VHSFQgTUVOVVMNCmRlZiBnZW5lcmF0ZV9idXR0b25fc3RhdGUoX2J1dHRvbl9pbmRleDogaW50LCBfYnV0dG9uX2V2ZW50OiBpbnQsIF9idXR0b25fc3RhdGU6IGJvb2wpOg0KICAgICNwcmludCgiQnV0dG9uIHt9IHR5cGUge30gc3RhdGUge30iLmZvcm1hdChfYnV0dG9uX2luZGV4LF9idXR0b25fZXZlbnQsX2J1dHRvbl9zdGF0ZSkpDQogICAgDQogICAgaWYgYnV0dG9uX3N0YXRlX2RpY3RbX2J1dHRvbl9pbmRleF0gPT0gQlVUVE9OX1BSRVNTRUQgYW5kIF9idXR0b25fZXZlbnQgPT0gQlVUVE9OX1JFTEVBU0VEOg0KICAgICAgICAjcHJpbnQoInNob3J0IHByZXNzIikNCiAgICAgICAgY21kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCA9IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kKCkNCiAgICAgICAgaWYgX2J1dHRvbl9pbmRleCA9PSBCVVRUT05fSU5ERVhfTEVGVDoNCiAgICAgICAgICAgIGNtZC50eXBlID0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuTkFWSUdBVElPTl9MRUZUDQogICAgICAgIGVsaWYgX2J1dHRvbl9pbmRleCA9PSBCVVRUT05fSU5ERVhfUklHSFQ6DQogICAgICAgICAgICBjbWQudHlwZSA9IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLk5BVklHQVRJT05fUklHSFQNCiAgICAgICAgY21kLmFjdGlvbiA9IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLkNPTU1BTkRfVFlQRV9OQVZJR0FUSU9ODQogICAgICAgIG1lbnVfbWFuYWdlci5tZW51X21hbmFnZXIucHJvY2Vzc191c2VyX2NvbW1hbmRzKGNtZCkNCg0KICAgIGVsaWYgX2J1dHRvbl9ldmVudCA9PSBCVVRUT05fSE9MRDoNCiAgICAgICAgI3ByaW50KCJzaG9ydCBwcmVzcyIpDQogICAgICAgIGNtZDogc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQgPSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCgpDQogICAgICAgIGlmIF9idXR0b25faW5kZXggPT0gQlVUVE9OX0lOREVYX0xFRlQ6DQogICAgICAgICAgICBjbWQudHlwZSA9IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLk5BVklHQVRJT05fRVhJVA0KICAgICAgICBlbGlmIF9idXR0b25faW5kZXggPT0gQlVUVE9OX0lOREVYX1JJR0hUOg0KICAgICAgICAgICAgY21kLnR5cGUgPSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5OQVZJR0FUSU9OX0VOVEVSDQogICAgICAgIGNtZC5hY3Rpb24gPSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5DT01NQU5EX1RZUEVfTkFWSUdBVElPTg0KICAgICAgICBtZW51X21hbmFnZXIubWVudV9tYW5hZ2VyLnByb2Nlc3NfdXNlcl9jb21tYW5kcyhjbWQpDQogICAgDQogICAgYnV0dG9uX3N0YXRlX2RpY3RbX2J1dHRvbl9pbmRleF0gPSBfYnV0dG9uX2V2ZW50DQogICANCiAgIA0KICAgDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgIA0KICAgICMgSU5JVCBSRUNJUEUgTE9BREVSIEFORCBJTklUIFNEIENBUkQNCiAgICBzZXR0aW5ncy5zZXR0aW5ncygpLmxpc3RfZmlsZXMoKQ0KICAgICMgUkVDSVBFIFNUT1JBR0UNCiAgICByZWNpcGUgPSByZWNpcGVfbG9hZGVyLnJlY2lwZV9sb2FkZXIoKQ0KICAgICMgSU5JVCBMRUQgUklORw0KICAgIGxlZHJpbmcubGVkcmluZygpLnNldF9uZW9waXhlbF9mdWxsKDEwLCAxMCwgMTApDQogICAgIyBJTklUIE1FTlUgU1lTVEVNDQogICAgbWVudV9tYW5hZ2VyLm1lbnVfbWFuYWdlcigpDQoNCg0KDQoNCg0KICAgICMgSU5JVCBVU0VSIElOUFVUIEJVVFRPTlMNCiAgICBsZWZ0X2J1dHRvbl9waW46IG1hY2hpbmUuUGluID0gbWFjaGluZS5QaW4oY29uZmlnLkNGR19CVVRUT05fTEVGVF9QSU4sIG1hY2hpbmUuUGluLklOLCBtYWNoaW5lLlBpbi5QVUxMX1VQKQ0KICAgIGxlZnRfYnV0dG9uID0gQUlPQnV0dG9uKGxhbWJkYSBidG46IG5vdCBsZWZ0X2J1dHRvbl9waW4udmFsdWUoKSkNCiAgICAjIFJlZ2lzdGVyIGJ1dHRvbiBldmVudCBoYW5kbGVycw0KICAgIGxlZnRfYnV0dG9uLnNldF9ob2xkX2hhbmRsZXIobGFtYmRhIGJ0bjogZ2VuZXJhdGVfYnV0dG9uX3N0YXRlKEJVVFRPTl9JTkRFWF9MRUZULCBCVVRUT05fSE9MRCwgYnRuLmdldF9kZWJvdW5jZWQoKSkpICAgDQogICAgbGVmdF9idXR0b24uc2V0X3ByZXNzX2hhbmRsZXIobGFtYmRhIGJ0bjogZ2VuZXJhdGVfYnV0dG9uX3N0YXRlKEJVVFRPTl9JTkRFWF9MRUZULCBCVVRUT05fUFJFU1NFRCwgYnRuLmdldF9kZWJvdW5jZWQoKSkpDQogICAgbGVmdF9idXR0b24uc2V0X3JlbGVhc2VfaGFuZGxlcihsYW1iZGEgYnRuOiBnZW5lcmF0ZV9idXR0b25fc3RhdGUoQlVUVE9OX0lOREVYX0xFRlQsIEJVVFRPTl9SRUxFQVNFRCwgYnRuLmdldF9kZWJvdW5jZWQoKSkpIA0KICAgIA0KICAgIHJpZ2h0X2J1dHRvbl9waW46IG1hY2hpbmUuUGluID0gbWFjaGluZS5QaW4oY29uZmlnLkNGR19CVVRUT05fUklHSFRfUElOLCBtYWNoaW5lLlBpbi5JTiwgbWFjaGluZS5QaW4uUFVMTF9VUCkNCiAgICByaWdodF9idXR0b24gPSBBSU9CdXR0b24obGFtYmRhIGJ0bjogbm90IHJpZ2h0X2J1dHRvbl9waW4udmFsdWUoKSkNCiAgICAjIFJlZ2lzdGVyIGJ1dHRvbiBldmVudCBoYW5kbGVycw0KICAgIHJpZ2h0X2J1dHRvbi5zZXRfaG9sZF9oYW5kbGVyKGxhbWJkYSBidG46IGdlbmVyYXRlX2J1dHRvbl9zdGF0ZShCVVRUT05fSU5ERVhfUklHSFQsIEJVVFRPTl9IT0xELCBidG4uZ2V0X2RlYm91bmNlZCgpKSkgICANCiAgICByaWdodF9idXR0b24uc2V0X3ByZXNzX2hhbmRsZXIobGFtYmRhIGJ0bjogZ2VuZXJhdGVfYnV0dG9uX3N0YXRlKEJVVFRPTl9JTkRFWF9SSUdIVCwgQlVUVE9OX1BSRVNTRUQsIGJ0bi5nZXRfZGVib3VuY2VkKCkpKQ0KICAgIHJpZ2h0X2J1dHRvbi5zZXRfcmVsZWFzZV9oYW5kbGVyKGxhbWJkYSBidG46IGdlbmVyYXRlX2J1dHRvbl9zdGF0ZShCVVRUT05fSU5ERVhfUklHSFQsIEJVVFRPTl9SRUxFQVNFRCwgYnRuLmdldF9kZWJvdW5jZWQoKSkpIA0KICAgIA0KDQoNCg0KICAgIA0KICAgIA0KICAgIA0KICAgDQoNCg0KDQoNCg0KDQoNCiAgICAjIElOSVQgRElTUExBWSAvIFVJIElOU1RBTkNFDQogICAgI3VpLnVpLmluc3RhbmNlKCkuc2hvd190aXRsZXNjcmVlbigpDQoNCiAgICAjIElOSVQgU0NBTEUNCiAgICAjc2NhbGVzID0gU2NhbGVzLlNjYWxlcyhkX291dD1jb25maWcuQ0ZHX0hYNzExX0RPVVRfUElOLCBwZF9zY2s9Y29uZmlnLkNGR19IWDcxMV9TQ0tfUElOKQ0KICAgICNzY2FsZXMudGFyZSgpDQogICAgIyBMT0FEIFNDQUxFIENBTElCVEFUSU9OIFZBTFVFUw0KICAgICNjYWxpYnJhdGlvbl9mYWN0b3IgPSBzZXR0aW5nc19pbnN0YW5jZS5nZXRfc2NhbGVfY2FsaWJyYXRpb25fZmFjdG9yKCkNCiAgICAjcHJpbnQoImNhbGlicmF0aW9uX2ZhY3RvciB7fSIuZm9ybWF0KGNhbGlicmF0aW9uX2ZhY3RvcikpDQogICAgI3NjYWxlcy5zZXRfc2NhbGUoY2FsaWJyYXRpb25fZmFjdG9yKQ0KICAgICNzY2FsZXMudGFyZSgpDQogICAgDQogICAgDQogICAgI3N5c3RlbV9zdGF0ZSA9IFNZU1RBVEVfSURMRSAjU1lTVEVNU1RBVEVfRU5URVJfTUFJTk1FTlUgI1NZU1RFTVNUQVRFX1VQREFURV9NT0RFDQogICAgI3VzZXJfY21kOiBtZW51X21hbmFnZXIubWVudV9jb21tYW5kID0gbWVudV9tYW5hZ2VyLm1lbnVfY29tbWFuZCgpDQoNCg0KICAgIGFzeW5jIGRlZiBtYWluX3Rhc2soKToNCiAgICAgICAgIyBDUkVBVEUgVEFTS1MgRk9SIFVTRVIgSU5QVVQNCiAgICAgICAgdGFza19sZWZ0ID0gYWlvLmNyZWF0ZV90YXNrKGxlZnRfYnV0dG9uLmNvcm9fY2hlY2soKSkNCiAgICAgICAgdGFza19yaWdodCA9IGFpby5jcmVhdGVfdGFzayhyaWdodF9idXR0b24uY29yb19jaGVjaygpKQ0KDQoNCiAgICAgICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgICAgIGF3YWl0IGFpby5zbGVlcF9tcygxKQ0KICAgIA0KICAgIGFpby5ydW4obWFpbl90YXNrKCkpDQo="}

# FOR DEBUGGING
ALWAYS_HARD_RESTORE: bool = False

RESTORE_IGNORED_FILES_LIST = ['static_modules', 'thridparty_libs', 'boot.py', 'lib']

def restore_filesystem(_basepath: str = "/", _override: bool = False, _erase: bool = False):
    import ubinascii
    import os

    if _erase:
        print("erase enabled")
        for f in os.listdir():
            if f in __file__:
                print("skipping {} to vaoid installer override".format(f))
                continue 
            
            # UGLY REWORK
            for n in RESTORE_IGNORED_FILES_LIST:
                if n in f:
                    print("skipping {} to vaoid installer override".format(f))
                    continue

            os.remove(f)

    for k in FILE_DATA:

        if k in os.listdir() and not _override:
            continue
        
        print(k)
        d = FILE_DATA[k]
        ubinascii.a2b_base64(d)

        with open(_basepath + "/" + k, "w") as file:
            file.write(ubinascii.a2b_base64(d))

    # CLEANUP
    del ubinascii
    del os


def restore():
    import machine
    import time
    RESTORE_BUTTON_PIN: int = 14
    RESTORE_LED_PIN: int = 25

    push_button_restore = machine.Pin(RESTORE_BUTTON_PIN, machine.Pin.IN, machine.Pin.PULL_UP)
    led_onboard = machine.Pin(RESTORE_LED_PIN, machine.Pin.OUT)

    if not push_button_restore.value() or ALWAYS_HARD_RESTORE:
        led_onboard.on()
        time.sleep(0.2)
        led_onboard.off()
        time.sleep(0.2)
        led_onboard.on()
        time.sleep(0.2)
        led_onboard.on()
        # RESTORE HARD OVERRIDE USER CHANGES
        restore_filesystem(_override=True, _erase=True)
        led_onboard.off()

    else:
        led_onboard.on()
        # RESTORE SOFT ONLY ADD MISSING FILES IN VIRTUAL FS
        restore_filesystem()
        led_onboard.off()

    # RESTORE PIN STATE
    machine.Pin(RESTORE_BUTTON_PIN, machine.Pin.IN, machine.Pin.OPEN_DRAIN)
    machine.Pin(RESTORE_LED_PIN, machine.Pin.IN)
    
    del machine


if __name__ == "__main__":
    restore()

