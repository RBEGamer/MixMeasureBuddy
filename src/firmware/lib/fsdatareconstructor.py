FILE_DATA = {"recipe_loader.py": "aW1wb3J0IG1hY2hpbmUNCmltcG9ydCBvcw0KaW1wb3J0IHRpbWUNCmltcG9ydCBqc29uDQoNCmZyb20gdWkgaW1wb3J0IHVpDQppbXBvcnQgY29uZmlnDQppbXBvcnQgaGVscGVyDQppbXBvcnQgZXhhbXBsZV9yZWNpcGVzDQppbXBvcnQgc2V0dGluZ3MNCmltcG9ydCByZWNpcGUNCmZyb20gc2luZ2xldG9uIGltcG9ydCBzaW5nbGV0b24NCg0KDQoNCkBzaW5nbGV0b24NCmNsYXNzIHJlY2lwZV9sb2FkZXI6DQogICAgDQogIA0KICAgDQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBwcmludCgicmVjaXBlX2xvYWRlcjogX19pbml0X18iKQ0KDQogICAgICAgIHNlbGYuY3JlYXRlX2luaXRpYWxfcmVjaXBlKCkNCiAgICAgICAgDQogICANCiAgICAgDQogICAgZGVmIGNyZWF0ZV9pbml0aWFsX3JlY2lwZShzZWxmKToNCiAgICAgICAgcjogcmVjaXBlLnJlY2lwZQ0KICAgICAgICBmb3IgciBpbiBleGFtcGxlX3JlY2lwZXMuR0VUX0VYQU1QTEVfUkVDSVBFU19DT0xMRUNUSU9OKCk6DQogICAgICAgICAgICBzZXR0aW5ncy5zZXR0aW5ncygpLndyaXRlX2pzb25fZmlsZShyLmZpbGVuYW1lLCByLnRvX2RpY3QoKSkNCiAgICAgICAgICAgIA0KDQogICAgZGVmIGxpc3RfcmVjcGllcyhzZWxmLCBfaW5jbHVkZV9kZXNjcmlwdGlvbjogYm9vbCA9IEZhbHNlKSAtPiB0dXBsZVtzdHIsIHN0ciwgc3RyXToNCiAgICAgICAgcmVzID0gW10NCiAgICAgICAgZm9yIGYgaW4gc2V0dGluZ3Muc2V0dGluZ3MoKS5saXN0X2ZpbGVzKCk6DQogICAgICAgICAgICBpZiBmLmVuZHN3aXRoKCcucmVjaXBlJyk6DQogICAgICAgICAgICAgICAgIyBmID0gdGVxdWlsYV9zdW5yaXNlLnJlY2lwZQ0KICAgICAgICAgICAgICAgIG5hbWU6IHN0ciA9IGYucmVwbGFjZSgnLnJlY2lwZScsICcnKS5yZXBsYWNlKCdfJywgJyAnKQ0KDQogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHN0ciA9ICIiDQoNCiAgICAgICAgICAgICAgICBpZiBfaW5jbHVkZV9kZXNjcmlwdGlvbjoNCiAgICAgICAgICAgICAgICAgICAgcjogcmVjaXBlLnJlY2lwZSA9IHNlbGYuZ2V0X3JlY2lwZV9ieV9maWxlbmFtZShmKQ0KICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA9IHIuZ2V0X2Rlc2NyaXB0aW9uKCkNCiAgICAgICAgICAgICAgICAgICAgZGVsIHINCg0KICAgICAgICAgICAgICAgIHJlcy5hcHBlbmQoKGYsbmFtZSwgZGVzY3JpcHRpb24pKQ0KICAgICAgICByZXR1cm4gcmVzDQogICAgDQoNCiAgICBkZWYgZ2V0X3JlY2lwZV9maWxlX2NvbnRlbnQoc2VsZiwgX2ZpbGVuYW1lOiBzdHIpIC0+IGRpY3Q6DQogICAgICAgICMgQ0hFQ0sgRk9SIEVYVEVOVElPTg0KICAgICAgICBpZiBub3QgX2ZpbGVuYW1lLmVuZHN3aXRoKCcucmVjaXBlJyk6DQogICAgICAgICAgICBfZmlsZW5hbWUgPSBfZmlsZW5hbWUgKyAiLnJlY2lwZSINCiAgICAgICAgIyBDSEVDSyBGSUxFIEVYSVNUUw0KICAgICAgICBpZiBfZmlsZW5hbWUgbm90IGluIHNldHRpbmdzLnNldHRpbmdzKCkubGlzdF9maWxlcygpOg0KICAgICAgICAgICAgcmV0dXJuIHJlY2lwZS5yZWNpcGUoKQ0KICAgICAgICAjIExPQUQgQ09OVEVOVCBBUyBKU09ODQogICAgICAgIGpzb25fcmVjaXBlID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5sb2FkX2pzb25fZmlsZShfZmlsZW5hbWUpDQogICAgICAgIHJldHVybiBqc29uX3JlY2lwZQ0KICAgIA0KDQogICAgZGVmIGdldF9yZWNpcGVfYnlfZmlsZW5hbWUoc2VsZiwgX2ZpbGVuYW1lOiBzdHIpIC0+IHJlY2lwZS5yZWNpcGU6DQogICAgICAgICMgTE9BRCBKU09OIENPTlRFTlQgT0YgUkVDSVBFIEZJTEUgDQogICAgICAgIGpzb25fcmVjaXBlOiBkaWN0ID0gc2VsZi5nZXRfcmVjaXBlX2ZpbGVfY29udGVudChfZmlsZW5hbWUpDQoNCiAgICAgICAgIyBDUkVBVEUgUkVDSVBFDQogICAgICAgIHI6IHJlY2lwZS5yZWNpcGUgPSByZWNpcGUucmVjaXBlKCkNCg0KICAgICAgICBpZiBqc29uX3JlY2lwZSBpcyBOb25lIG9yIG5vdCBqc29uX3JlY2lwZTogICAgICAgIA0KICAgICAgICAgICAgcmV0dXJuIHINCiAgICAgICAgDQogICAgICAgICMgUEFSU0UgSlNPTiBUTyBSRUNJUEUNCiAgICAgICAgci5mcm9tX2RpY3QoanNvbl9yZWNpcGUpDQogICAgICAgIHJldHVybiByDQogICAgICAgIA0KDQogICAgDQogICAgDQo=", "config.py": "Q0ZHX0RFQlVHOiBib29sID0gRmFsc2UKQ0ZHX0NBTElCUkFUSU9OX1dFSUdIVF9XRUlHSFQ6ZmxvYXQgPSAzOTAuMApDRkdfU0NBTEVfSU5WRVJUX1dFSUdIVF9NRUFTVVJFRF9WQUxVRTogZmxvYXQgPSAtMS4wICMgaWYgdGhlIHNjYWxlIG1lYXN1cmVtZW50IGlzIG5lZ2F0aXZlIHNldCB0aGlzIHRvIDEuMCBvciAtMS4wCkNGR19TQ0FMRV9HTEFTU19BRERJVElPTl9ORVhUX1NURVBfV0VJR0hUOmZsb2F0ID0gNTAuMCAjIFhnIG1vcmUgb24gc2NhbGUgdG8gdHJpZ2dlciBuZXh0IHN0ZXAgaW4gcmVjaXBlID0+IDEvMyB3ZWlnaHQgb2YgYSB0eXBpY2FsIGdsYXNzCkNGR19VU0VSX0xPTkdfQlVUVE9OX1BSRVNTX1RJTUU6IGludCA9IDcwMCAjIHRpbWUgdG8gcmVnc2l0ZXIgYSBsb25nIGJ1dHRvbiBwcmVzcyBpbiBtcwojIERFRkFVTFQgV0lGSSBTRVRUSU5HUwojIENBTiBMQVRFUiBCRSBDQU5HRUQgSU4gVEhFIFNEQ0FSRC9TRVRUSU5HUy5KU09OIEZJTEUKQ0ZHX05FVFdPUktfSE9TVE5BTUU6IHN0ciA9ICJtaXhhbmRtZWFzdXJlYnVkZHkiICMgeFh4WC5sb2NhbApDRkdfTkVUV09SS19XSUZJQ09VTlRSWTogc3RyID0gIkRFIiAjIERFIFVTCkNGR19ORVRXT1JLX1dJRklfU1NJRDogc3RyID0gIk1ha2Vyc3BhY2UiCkNGR19ORVRXT1JLX1dJRklfUFNLOiBzdHIgPSAiTVM4Y0N2cEUiCkNGR19ORVRXT1JLX0FQSV9FTkRQT0lOVDogc3RyID0gIm1peG1lYXN1cmVidWRkeS5jb20vYXBpL21tYiIKCgojIFNFVFRJTkdTIEZPUiBBQ0NFU1MgUE9JTlQgKyBMT0NBTCBXRUJFRElUT1IKQ0ZHX0VESVRPUl9PUEVOX0FDQ0VTU1BPSU5UOiBib29sID0gRmFsc2UKQ0ZHX0VESVRPUl9XSUZJX1NUQV9IT1NUTkFNRTogc3RyID0gIm1peGFuZG1lYXN1cmVidWRkeSIKQ0ZHX0VESVRPUl9XSUZJX1NUQV9TU0lEOiBzdHIgPSAibWl4YW5kbWVhc3VyZWJ1ZGR5IgpDRkdfRURJVE9SX1dJRklfU1RBX1BTSzogc3RyID0gIm1peGFuZG1lYXN1cmVidWRkeSIgICMKQ0ZHX0VESVRPUl9IVFRQX1BPUlQ6IGludCA9IDgwICMgV0VCU0VSVkVSIFBPUlQgRk9SIFRIRSBPTkxJTkUgRURJVE9SCgoKCiMgSEFSRFdBUkUgQ09ORklHIFNUQVJUUyBIRVJFCiMgc3NkMTMwNiA9IDEyOHg2NCBvbGRlZCB3aXRoIHNzZDEzMDYgY29udHJvbGxlcgojIHNoMTEwNiA9IDEyOHg2NCBvbGRlZCB3aXRoIHNzaDExMDYgY29udHJvbGxlcgpDRkdfRElTUExBWV9UWVBFOiBzdHIgPSAic2gxMTA2IiAjIHNoMTEwNiBzc2QxMzA2CiMgRElTUExBWSBSRVNPTFVUSU9OClNDUl9XSURUSDogaW50ID0gMTI4ClNDUl9IRUlHSFQ6IGludCA9IDY0CgoKQ0ZHX05FT1BJWEVMX0xFRF9DT1VOVDogaW50ID0gMjYgIzMyICM2MCBob3cgbWFueSBsZWRzIGZvciB0aGUgcmluZyBhcmUgdXNlZApDRkdfTkVPUElYRUxfTEVEX1NUQVJUX09GRlNFVDogaW50ID0gKENGR19ORU9QSVhFTF9MRURfQ09VTlQvMikgIyBNQVggQ0ZHX05FT1BJWEVMX0xFRF9DT1VOVCBUTyBST1RBVEUgVEhFIFNUQVJUUE9JTlQKQ0ZHX05FT1BJWEVMX01BWF9CUklHSFRORVNTOiBmbG9hdCA9IDAuOCAjIG1heCBsZWQgYnJpZ2huZXNzIG1vZGlmaWVyIDAuMCAtIDEuMAoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjIyMjIyBQSU4gQ09ORklHICMjIyMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBORU9QSVhFTCBSSU5HCkNGR19ORU9QSVhFTF9QSU46IGludCA9IDI4CiMgQlVUVE9OUwpDRkdfQlVUVE9OX0xFRlRfUElOOiBpbnQgPSAzICMyMgpDRkdfQlVUVE9OX1JJR0hUX1BJTjogaW50ID0gMgoKI0VOQ09ERVIKQ0ZHX0VOQ09ERVJfSU5WRVJUOiBib29sID0gRmFsc2UKQ0ZHX0VOQ09ERVJfQ0xLX1BJTjogaW50ID0gMjAKQ0ZHX0VOQ09ERVJfRFRfUElOOiBpbnQgPSAxOQpDRkdfRU5DT0RFUl9TV19QSU46IGludCA9IDE4CiMgSFg3MTEgTU9EVUxFCkNGR19IWDcxMV9ET1VUX1BJTjogaW50ID0gNQpDRkdfSFg3MTFfU0NLX1BJTjogaW50ID0gNAojIFtPUFRJT05BTF0gU0QgQ0FSRApDRkdfU0RDQVJEX1NQSUlOU1RBTkNFOiBpbnQgPSAxICMgT04gUlAyMDQwIDAgb3IgMSBERVBFTkRJTkcgVEhFIEZPTExPV0lORyBVU0VEIFNQSSBQSU5TCkNGR19TRENBUkRfU0NLX1BJTjogaW50ID0gMTAKQ0ZHX1NEQ0FSRF9NT1NJX1BJTjogaW50ID0gMTEKQ0ZHX1NEQ0FSRF9NSVNPX1BJTjogaW50ID0gOApDRkdfU0RDQVJEX0NTX1BJTjogaW50ID0gOQojIFtPUFRJT05BTF0gU1NEMTMwNiBvciBTSDExMDYKQ0ZHX09MRURfSTJDSU5TVEFOQ0U6IGludCA9IDAgIyBPTiBSUDIwNDAgMCBvciAxIERFUEVORElORyBUSEUgRk9MTE9XSU5HIFVTRUQgSTJDIFBJTlMKQ0ZHX09MRURfU0NMX1BJTjogaW50ID0gMTcKQ0ZHX09MRURfU0RBX1BJTjogaW50ID0gMTYKQ0ZHX09MRURfQUREUjogaW50ID0gMHgzYwpDRkdfRElTUExBWV9DSEFSX1dJRFRIOiBpbnQgPSA4ICMgY2hhciB3aWR0aCBpbiBwaXhlbHMgc2VlIHZnYTJ4OHggYXMgdXNlZCBmb250ZmlsZQpDRkdfRElTUExBWV9MSU5FX1NQQUNJTkc6IGludCA9IChDRkdfRElTUExBWV9DSEFSX1dJRFRIICsgMSkgIyBwaXhlbCBmb250IGhlaWdodCArICBhIGJpdCBleHRyYSBzcGFjZSB0byBtYWtlIGxhcmdlIHRleHQgbW9yZSByZWFkYWJsZQoKCgoKICAgIAo=", "recipe_editor.py": "aW1wb3J0IGNvbmZpZwppbXBvcnQgc2V0dGluZ3MKaW1wb3J0IHRpbWUKaW1wb3J0IGhlbHBlcgppbXBvcnQganNvbgppbXBvcnQgcmVjaXBlX2xvYWRlcgoKCnRyeToKICAgIGltcG9ydCBuZXR3b3JrCiAgICBpbXBvcnQgbWljcm9weXNlcnZlcgoKICAgIGNsYXNzIHJlY2lwZV9lZGl0b3I6CiAgICAgICAgCgogICAgICAgIHNlcnZlcjogbWljcm9weXNlcnZlci5NaWNyb1B5U2VydmVyID0gbWljcm9weXNlcnZlci5NaWNyb1B5U2VydmVyKHBvcnQ9Y29uZmlnLkNGR19FRElUT1JfSFRUUF9QT1JUKQogICAgICAgIAogICAgICAgIGRlZiBzZXJ2ZV9pbmRleChzZWxmLCByZXF1ZXN0KToKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIuc2VuZCgiVEhJUyBJUyBJTkRFWCBQQUdFISIpCgogICAgICAgIGRlZiBzZXJ2ZV9yZWNpcGUoc2VsZiwgcmVxdWVzdCk6CiAgICAgICAgICAgIHBhcmFtcyA9IG1pY3JvcHlzZXJ2ZXIuZ2V0X3JlcXVlc3RfcXVlcnlfcGFyYW1zKHJlcXVlc3QpCQogICAgICAgICAgICBqc29uX3JlcHNvbnNlOiBkaWN0ID0ge30KICAgICAgICAgICAgaWYgJ2ZpbGVuYW1lJyBpbiBwYXJhbXM6CiAgICAgICAgICAgICAgICBqc29uX3JlcHNvbnNlID0gcmVjaXBlX2xvYWRlci5yZWNpcGVfbG9hZGVyLmdldF9yZWNpcGVfZmlsZV9jb250ZW50KHBhcmFtc1snZmlsZW5hbWUnXSkKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLnNlcnZlci5zZW5kKCJIVFRQLzEuMCAyMDAgT0tcclxuIikKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIuc2VuZCgiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXHJcblxyXG4iKQogICAgICAgICAgICBzZWxmLnNlcnZlci5zZW5kKGpzb24uZHVtcHMoanNvbl9yZXBzb25zZSkpCgogICAgICAgIGRlZiBzZXJ2ZV9yZWNpcGVzKHNlbGYsIHJlcXVlc3QpOgogICAgICAgICAgICBqc29uX3JlcHNvbnNlOiBkaWN0ID0ge30KICAgICAgICAgICAgCgogICAgICAgICAgICBmb3IgciBpbiByZWNpcGVfbG9hZGVyLnJlY2lwZV9sb2FkZXIoKS5saXN0X3JlY3BpZXMoX2luY2x1ZGVfZGVzY3JpcHRpb249VHJ1ZSk6CiAgICAgICAgICAgICAgICBmaWxlbmFtZSwgbmFtZSwgZGVzY3JpcHRpb24gPSByCiAgICAgICAgICAgICAgICBsaW5rOiBzdHIgPSAiL3JlY2lwZT9maWxlbmFtZT17fSIuZm9ybWF0KGZpbGVuYW1lKQogICAgICAgICAgICAgICAganNvbl9yZXBzb25zZVtmaWxlbmFtZV0gPSB7Im5hbWUiOiBuYW1lLCAiZGVzY3JpcHRpb24iOiBkZXNjcmlwdGlvbiwgImxpbmsiOiBsaW5rfQoKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIuc2VuZCgiSFRUUC8xLjAgMjAwIE9LXHJcbiIpCiAgICAgICAgICAgIHNlbGYuc2VydmVyLnNlbmQoIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxyXG5cclxuIikKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIuc2VuZChqc29uLmR1bXBzKGpzb25fcmVwc29uc2UpKQoKCiAgICAgICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgICAgICBwYXNzCiAgICAgICAgCgogICAgICAgIGRlZiBoYXNfY2FwYWJpbGl0aWVzKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgCiAgICAgICAgZGVmIGRpc2FibGVfd2lmaShzZWxmKToKICAgICAgICAgICAgd2xhbiA9IG5ldHdvcmsuV0xBTihuZXR3b3JrLkFQX0lGKQogICAgICAgICAgICB3bGFuLmFjdGl2ZShGYWxzZSkKICAgICAgICAKCiAgICAgICAgZGVmIHNldHVwX3dlYnNlcnZlcihzZWxmKToKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQUREIFJPVVRFUwogICAgICAgICAgICBzZWxmLnNlcnZlci5hZGRfcm91dGUoIi8iLCBzZWxmLnNlcnZlX2luZGV4KQogICAgICAgICAgICBzZWxmLnNlcnZlci5hZGRfcm91dGUoIi9pbmRleCIsIHNlbGYuc2VydmVfaW5kZXgpCiAgICAgICAgICAgIHNlbGYuc2VydmVyLm9uX25vdF9mb3VuZChzZWxmLnNlcnZlX2luZGV4KSAjIDQwNAoKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIuYWRkX3JvdXRlKCIvcmVjaXBlIiwgc2VsZi5zZXJ2ZV9yZWNpcGUpCiAgICAgICAgICAgIHNlbGYuc2VydmVyLmFkZF9yb3V0ZSgiL3JlY2lwZXMiLCBzZWxmLnNlcnZlX3JlY2lwZXMpCgoKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIubG9vcF9pbml0KCkKCiAgICAgICAgZGVmIHN0b3Bfd2Vic2VydmVyKHNlbGYpOgogICAgICAgICAgICBzZWxmLnNlcnZlci5zdG9wKCkKCiAgICAgICAgZGVmIGhhbmRsZV9jb25uZWN0aW9uKHNlbGYpOgogICAgICAgICAgICBzZWxmLnNlcnZlci5sb29wKCkKICAgCgogICAgICAgIGRlZiBvcGVuX2FjY2Vzc3BvaW50KHNlbGYsIF9zc2lkOiBzdHIsIF9wc2s6IHN0ciA9IE5vbmUpIC0+IHN0cjoKCiAgICAgICAgICAgIG5ldHdvcmsuY291bnRyeShjb25maWcuQ0ZHX05FVFdPUktfV0lGSUNPVU5UUlkpCiAgICAgICAgICAgIG5ldHdvcmsuaG9zdG5hbWUoY29uZmlnLkNGR19FRElUT1JfV0lGSV9TVEFfSE9TVE5BTUUuZm9ybWF0KCJfIiArIGhlbHBlci5nZXRfc3lzdGVtX2lkKCkpKQoKICAgICAgICAgICAgd2xhbiA9IG5ldHdvcmsuV0xBTihuZXR3b3JrLkFQX0lGKQogICAgICAgICAgICB3bGFuLmNvbmZpZyhlc3NpZD1fc3NpZCwgcGFzc3dvcmQ9X3BzaykKICAgICAgICAgICAgd2xhbi5hY3RpdmUoVHJ1ZSkKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiB3bGFuLmlmY29uZmlnKCkKICAgICAgICAKICAgICAgICBkZWYgY29ubmVjdF93aWZpKCkgLT4gdHVwbGUoc3RyLCBib29sKToKICAgICAgICAgICAgbmV0d29yay5jb3VudHJ5KGNvbmZpZy5DRkdfTkVUV09SS19XSUZJQ09VTlRSWSkKICAgICAgICAgICAgbmV0d29yay5ob3N0bmFtZShjb25maWcuQ0ZHX05FVFdPUktfSE9TVE5BTUUpICMuZm9ybWF0KGhlbHBlci5nZXRfc3lzdGVtX2lkKCkpKQoKICAgICAgICAgICAgd2xhbiA9IG5ldHdvcmsuV0xBTihuZXR3b3JrLlNUQV9JRikKICAgICAgICAgICAgd2xhbi5hY3RpdmUoVHJ1ZSkKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICBzc2lkID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5nZXRfc2V0dGluZ3NfZW50cnkoc2V0dGluZ3MuU0VUVElOR1NfRU5UUklFUy5ORVRXT1JLX1dJRklfU1NJRCkKICAgICAgICAgICAgcHNrID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5nZXRfc2V0dGluZ3NfZW50cnkoc2V0dGluZ3MuU0VUVElOR1NfRU5UUklFUy5ORVRXT1JLX1dJRklfUFNLKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgc3NpZCBpcyBOb25lIG9yIHBzayBpcyBOb25lOgogICAgICAgICAgICAgICAgcHJpbnQoIlNTSUQgT1IgUFNLIEZPUiBXSUZJIENPTk5FQ1RJT04gTk9UIFNFVCIpCiAgICAgICAgICAgICAgICByZXR1cm4gd2xhbi5pZmNvbmZpZygpLCBGYWxzZQoKCiAgICAgICAgICAgIHByaW50KCJDT05ORUNUSU5HIFRPOiB7fSIuZm9ybWF0KHNzaWQpKQogICAgICAgICAgICB3bGFuLmNvbm5lY3Qoc3NpZCwgcHNrKQogICAgICAgICAgICB0aW1lciA9IDAKICAgICAgICAgICAgd2hpbGUgd2xhbi5pc2Nvbm5lY3RlZCgpID09IEZhbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoJ1dhaXRpbmcgZm9yIGNvbm5lY3Rpb24uLi4nKQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgICAgICAgdGltZXIgPSB0aW1lciArIDEKCiAgICAgICAgICAgICAgICBpZiB0aW1lciA+IDEwOgogICAgICAgICAgICAgICAgICAgIHdsYW4uYWN0aXZlKEZhbHNlKQogICAgICAgICAgICAgICAgICAgIHJldHVybiB3bGFuLmlmY29uZmlnKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHdsYW4uaXNjb25uZWN0ZWQoKToKICAgICAgICAgICAgICAgIHJldHVybiB3bGFuLmlmY29uZmlnKCksIFRydWUKICAgICAgICAgICAgcmV0dXJuIHdsYW4uaWZjb25maWcoKSwgRmFsc2UKCiAgICAgIAogICAgICAgIAoKZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIAogICAgY2xhc3MgcmVjaXBlX2VkaXRvcjoKICAgICAgICAKICAgICAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgICAgIHBhc3MKCiAgICAgICAgZGVmIGhhc19jYXBhYmlsaXRpZXMoc2VsZikgLT4gYm9vbDoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIGRlZiBkaXNhYmxlX3dpZmkoc2VsZik6CiAgICAgICAgICAgIHBhc3MKICAgICAgICAKICAgICAgICBkZWYgc2V0dXBfd2Vic2VydmVyKHNlbGYpOgogICAgICAgICAgICBwYXNzCiAgICAgICAgCiAgICAgICAgZGVmIHN0b3Bfd2Vic2VydmVyKHNlbGYpOgogICAgICAgICAgICBwYXNzCgogICAgICAgIGRlZiBoYW5kbGVfY29ubmVjdGlvbihzZWxmKToKICAgICAgICAgICAgcGFzcwoKICAgICAgICBkZWYgb3Blbl9hY2Nlc3Nwb2ludChzZWxmLCBfc3NpZDogc3RyLCBfcHNrOiBzdHIgPSBOb25lKSAtPiBzdHI6CiAgICAgICAgICAgIHJldHVybiAiIgogICAgICAgIAogICAgICAgIGRlZiBjb25uZWN0X3dpZmkoKSAtPiB0dXBsZShzdHIsIGJvb2wpOgogICAgICAgICAgICByZXR1cm4gRmFsc2U=", "menu_entry_recipe_update.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSByZWNpcGVfdXBkYXRlciBpbXBvcnQgcmVjaXBlX3VwZGF0ZXIKZnJvbSBtZW51X21hbmFnZXIgaW1wb3J0IG1lbnVfbWFuYWdlcgppbXBvcnQgdGltZQpjbGFzcyBtZW51X2VudHJ5X3JlY2lwZV91cGRhdGUobWVudV9lbnRyeS5tZW51X2VudHJ5KToKCgogICAgdXBkYXRlX29rOiBib29sID0gRmFsc2UKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygiUkVDSVBFIFVQREFURSIsICJVcGRhdGUgcmVjaXBlcyBvdmVyIE1peE1lYXN1cmVCdWRkeSBBUEkiKQoKICAgIGRlZiBwcmV2aWV3KHNlbGYpOgogICAgICAgIHByaW50KCJwcmV2aWV3IHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLnNob3dfcmVjaXBlX2luZm9ybWF0aW9uKHNlbGYubmFtZSwgc2VsZi5kZXNjcmlwdGlvbikKCgogICAgZGVmIGFjdGl2YXRlKHNlbGYpOgogICAgICAgIHNlbGYudXBkYXRlX29rID0gRmFsc2UKICAgICAgICAKICAgICAgICBwcmludCgiYWN0aXZhdGUge30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIHRyeToKICAgICAgICAgICAgdWkoKS5zaG93X21zZygiQ0hFQ0tJTkcgRk9SIFdJRkkgQ09OTkVDVElPTiIpCiAgICAgICAgICAgIGlmIHJlY2lwZV91cGRhdGVyLmNoZWNrX3VwZGF0ZV91cmwoKToKICAgICAgICAgICAgICAgIHVpKCkuc2hvd19tc2coIldJRkkgU1VDQ0VTUyIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB1aSgpLnNob3dfbXNnKCJFUlJPUjogQ0hFQ0sgQ1JFREVOVElBTFMiKQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgyKQogICAgICAgICAgICAgICAgbWVudV9tYW5hZ2VyKCkuZXhpdF9jdXJyZW50X21lbnUoKQoKICAgICAgICAgICAgdWkoKS5zaG93X21zZygiUkVDSVBFIEZFVENISU5HIFNUQVJURUQiKQogICAgICAgICAgICBzZWxmLnVwZGF0ZV9vayA9IHJlY2lwZV91cGRhdGVyLnVwZGF0ZV9yZWNpcGVzKCkKICAgICAgICAgICAgaWYgc2VsZi51cGRhdGVfb2s6CiAgICAgICAgICAgICAgICB1aSgpLnNob3dfcmVjaXBlX2luZm9ybWF0aW9uKCJQTEVBU0UgUE9XRVJDWUNMRSBUSEUgREVWSUNFIiwgIlByZXNzIE5FWFQvUFJFViB0byBzaG93IFFSIENvZGUgb3IgVVJMIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHVpKCkuc2hvd19yZWNpcGVfaW5mb3JtYXRpb24oIlVQREFURSBGQUlMRUQiLCAiUHJlc3MgTkVYVC9QUkVWIHRvIHNob3cgUVIgQ29kZSBvciBVUkwiKQoKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGUpCiAgICAgICAgICAgIHVpKCkuc2hvd19tc2coIkVSUk9SOiBVUERBVEUgRVJST1IiKQogICAgICAgICAgICB0aW1lLnNsZWVwKDIpCiAgICAgICAgICAgIG1lbnVfbWFuYWdlcigpLmV4aXRfY3VycmVudF9tZW51KCkKCgogICAgICAgIAoKICAgIGRlZiB0ZWFyZG93bihzZWxmKToKICAgICAgICBwcmludCgidGVhcmRvd24ge30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIHRyeToKICAgICAgICAgICAgcmVjaXBlX3VwZGF0ZXIuZGlzYWJsZV93aWZpKCkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGUpCgoKCiAgICBkZWYgdXBkYXRlKHNlbGYsIF9zeXN0ZW1fY29tbWFuZDogc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQpOgogICAgICAgIGlmIF9zeXN0ZW1fY29tbWFuZC50eXBlID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLkNPTU1BTkRfVFlQRV9OQVZJR0FUSU9OOgogICAgICAgICAgICAjIFVQREFURSBET0VTIE5PVEhJTkcgRVhDRVBUIEdPSU5HIEJBQ0sgVE8gTUFJTiBNRU5VCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLnVwZGF0ZV9vazoKICAgICAgICAgICAgICAgIG1lbnVfbWFuYWdlcigpLmV4aXRfY3VycmVudF9tZW51KCkKICAgICAgICBpZiBfc3lzdGVtX2NvbW1hbmQudHlwZSA9PSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5DT01NQU5EX1RZUEVfTkFWSUdBVElPTjoKICAgICAgICAgICAgaWYgX3N5c3RlbV9jb21tYW5kLmFjdGlvbiA9PSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5OQVZJR0FUSU9OX0VOVEVSOgogICAgICAgICAgICAgICAgbWVudV9tYW5hZ2VyKCkuZXhpdF9jdXJyZW50X21lbnUoKQogICAgICAgICAgICBlbGlmIF9zeXN0ZW1fY29tbWFuZC5hY3Rpb24gPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuTkFWSUdBVElPTl9MRUZUOgogICAgICAgICAgICAgICAgdWkoKS5zaG93X2RldmljZV9xcl9jb2RlKHJlY2lwZV91cGRhdGVyLmdldF9hcGlfdXJsKCkpCiAgICAgICAgICAgIGVsaWYgX3N5c3RlbV9jb21tYW5kLmFjdGlvbiA9PSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5OQVZJR0FUSU9OX1JJR0hUOgogICAgICAgICAgICAgICAgdWkoKS5zaG93X21zZygiR0VORVJBVElORyIpCiAgICAgICAgICAgICAgICB1aSgpLnNob3dfdXJsKHJlY2lwZV91cGRhdGVyLmdldF9hcGlfdXJsKCkp", "menu_entry_recipe.py": "", "recipe_updater.py": "aW1wb3J0IGNvbmZpZwppbXBvcnQgc2V0dGluZ3MKaW1wb3J0IHRpbWUKaW1wb3J0IGhlbHBlcgoKCmNsYXNzIHJlY2lwZV91cGRhdGVfaGVscGVyOgoKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgaGFzX25ldHdvcmtfY2FwYWJpbGl0aWVzKCkgLT4gYm9vbDoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGltcG9ydCBuZXR3b3JrCiAgICAgICAgICAgIGltcG9ydCBzb2NrZXQKICAgICAgICAgICAgaW1wb3J0IHVyZXF1ZXN0cwogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGdldF9hcGlfdXJsKCkgLT4gc3RyOgogICAgICAgIGFwaV9lbmRwb2ludDogc3RyID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5nZXRfc2V0dGluZ3NfZW50cnkoc2V0dGluZ3MuU0VUVElOR1NfRU5UUklFUy5ORVRXT1JLX0FQSV9FTlBPSU5UKQogICAgICAgIGlmIGFwaV9lbmRwb2ludCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gTm9uZQoKCiAgICAgICAgaWYgbm90IGFwaV9lbmRwb2ludC5zdGFydHN3aXRoKCdodHRwOi8vJyk6CiAgICAgICAgICAgIGFwaV9lbmRwb2ludCA9ICdodHRwOi8vJyArIGFwaV9lbmRwb2ludAogICAgICAgIHByaW50KCJjaGVja191cGRhdGVfdXJsOiBzZXQgYXBpIGVuZHBvaW50IHVybCB7fSIuZm9ybWF0KGFwaV9lbmRwb2ludCkpCiAgICAgICAgCiAgICAgICAgIyBSRU1PVkUgVEFJTElORyAvIFRPIE1BS0UgRk9XTExJTkcgVVJMIENBTExTIFZBTElECiAgICAgICAgaWYgYXBpX2VuZHBvaW50LmVuZHN3aXRoKCcvJykgYW5kIGxlbihhcGlfZW5kcG9pbnQpID4gMDoKICAgICAgICAgICAgYXBpX2VuZHBvaW50ID0gYXBpX2VuZHBvaW50WzotMV0KCiAgICAgICAgCiAgICAgICAgZmluYWxfYXBpX3VybDogc3RyID0gInt9L3t9Ii5mb3JtYXQoYXBpX2VuZHBvaW50LCBzdHIoaGVscGVyLmdldF9zeXN0ZW1faWQoKSkpCiAgICAgICAgcmV0dXJuIGZpbmFsX2FwaV91cmwKCnRyeToKICAgIGltcG9ydCBuZXR3b3JrCiAgICBpbXBvcnQgc29ja2V0CiAgICBpbXBvcnQgdXJlcXVlc3RzCgogICAgY2xhc3MgcmVjaXBlX3VwZGF0ZXI6CiAgICAgICAgCiAgICAgICAgQHN0YXRpY21ldGhvZAogICAgICAgIGRlZiBkaXNhYmxlX3dpZmkoKToKICAgICAgICAgICAgd2xhbiA9IG5ldHdvcmsuV0xBTihuZXR3b3JrLlNUQV9JRikKICAgICAgICAgICAgd2xhbi5hY3RpdmUoRmFsc2UpCiAgICAgICAgCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgZ2V0X2FwaV91cmwoKSAtPiBzdHI6CiAgICAgICAgICAgIHJldHVybiByZWNpcGVfdXBkYXRlX2hlbHBlci5nZXRfYXBpX3VybCgpCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgY29ubmVjdF93aWZpKCkgLT4gYm9vbDoKICAgICAgICAgICAgbmV0d29yay5jb3VudHJ5KGNvbmZpZy5DRkdfTkVUV09SS19XSUZJQ09VTlRSWSkKICAgICAgICAgICAgbmV0d29yay5ob3N0bmFtZShjb25maWcuQ0ZHX05FVFdPUktfSE9TVE5BTUUpICMuZm9ybWF0KGhlbHBlci5nZXRfc3lzdGVtX2lkKCkpKQoKICAgICAgICAgICAgd2xhbiA9IG5ldHdvcmsuV0xBTihuZXR3b3JrLlNUQV9JRikKICAgICAgICAgICAgd2xhbi5hY3RpdmUoVHJ1ZSkKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICBzc2lkID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5nZXRfc2V0dGluZ3NfZW50cnkoc2V0dGluZ3MuU0VUVElOR1NfRU5UUklFUy5ORVRXT1JLX1dJRklfU1NJRCkKICAgICAgICAgICAgcHNrID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5nZXRfc2V0dGluZ3NfZW50cnkoc2V0dGluZ3MuU0VUVElOR1NfRU5UUklFUy5ORVRXT1JLX1dJRklfUFNLKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgc3NpZCBpcyBOb25lIG9yIHBzayBpcyBOb25lOgogICAgICAgICAgICAgICAgcHJpbnQoIlNTSUQgT1IgUFNLIEZPUiBXSUZJIENPTk5FQ1RJT04gTk9UIFNFVCIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCgogICAgICAgICAgICBwcmludCgiQ09OTkVDVElORyBUTzoge30iLmZvcm1hdChzc2lkKSkKICAgICAgICAgICAgd2xhbi5jb25uZWN0KHNzaWQsIHBzaykKICAgICAgICAgICAgdGltZXIgPSAwCiAgICAgICAgICAgIHdoaWxlIHdsYW4uaXNjb25uZWN0ZWQoKSA9PSBGYWxzZToKICAgICAgICAgICAgICAgIHByaW50KCdXYWl0aW5nIGZvciBjb25uZWN0aW9uLi4uJykKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICAgICAgICAgIHRpbWVyID0gdGltZXIgKyAxCgogICAgICAgICAgICAgICAgaWYgdGltZXIgPiAxMDoKICAgICAgICAgICAgICAgICAgICB3bGFuLmFjdGl2ZShGYWxzZSkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHdsYW4uaXNjb25uZWN0ZWQoKToKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAoKICAgICAgICBAc3RhdGljbWV0aG9kCiAgICAgICAgZGVmIGNoZWNrX3VwZGF0ZV91cmwoKSAtPiBib29sOgogICAgICAgICAgICBpZiBub3QgcmVjaXBlX3VwZGF0ZXIuY29ubmVjdF93aWZpKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgIyBHRVQgTElTVCBPRiBSRUNJUEVTCiAgICAgICAgICAgICAgICByID0gdXJlcXVlc3RzLmdldChyZWNpcGVfdXBkYXRlX2hlbHBlci5nZXRfYXBpX3VybCgpKQogICAgICAgICAgICAgICAgci5jbG9zZSgpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZSAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KHN0cihlKSkKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAgICAgCiAgICAgICAgQHN0YXRpY21ldGhvZCAgIAogICAgICAgIGRlZiB1cGRhdGVfcmVjaXBlcygpIC0+IGJvb2w6CiAgICAgICAgICAgIGlmIG5vdCByZWNpcGVfdXBkYXRlci5jaGVja191cGRhdGVfdXJsKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgICAgIGFwaV9lbmRwb2ludDogc3RyID0gcmVjaXBlX3VwZGF0ZV9oZWxwZXIuZ2V0X2FwaV91cmwoKQogICAgICAgIAogICAgICAgICAgICBwcmludCgiQVBJOiB7fSIuZm9ybWF0KGFwaV9lbmRwb2ludCkpCgogICAgICAgICAgICB0aW1lLnNsZWVwKDIpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICMgR0VUIExJU1QgT0YgUkVDSVBFUwogICAgICAgICAgICAgICAgaGVhZGVyczogZGljdCA9IHt9CiAgICAgICAgICAgICAgICByID0gdXJlcXVlc3RzLmdldCgie30vcmVjaXBlcyIuZm9ybWF0KGFwaV9lbmRwb2ludCksICBoZWFkZXJzPWhlYWRlcnMpCiAgICAgICAgICAgICAgICByZWNpcGVfbGlzdCA9IHIuanNvbigpICMgWyJyZXNpcGVfZmlsZV91cmlfcmVsYXRpdmUiXQogICAgICAgICAgICAgICAgci5jbG9zZSgpCiAgICAgICAgICAgICAgICBpZiByZWNpcGVfbGlzdCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICAjIERPTldMT0FEIEVBQ0ggUkVDSVBFCiAgICAgICAgICAgICAgICAgICAgZm9yIHJlY2lwZSBpbiByZWNpcGVfbGlzdDoKICAgICAgICAgICAgICAgICAgICAgICAgciA9IHVyZXF1ZXN0cy5nZXQoInt9L3JlY2lwZS97fSIuZm9ybWF0KGFwaV9lbmRwb2ludCwgcmVjaXBlKSwgIGhlYWRlcnM9aGVhZGVycykKICAgICAgICAgICAgICAgICAgICAgICAgZGxfcmVjaXBlID0gci5qc29uKCkgIyBbe2ZpbGVuYW1lX3dpdGhvdXRfZW5kaW5nLCByZWNpcGV9XQogICAgICAgICAgICAgICAgICAgICAgICByLmNsb3NlKCkKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdyZWNpcGUnIGluIGRsX3JlY2lwZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnNldHRpbmdzLmluc3RhbmNlKCkud3JpdGVfanNvbl9maWxlKGRsX3JlY2lwZVsnbmFtZSddICsgIi5yZWNpcGUiLCBkbF9yZWNpcGVbJ3JlY2lwZSddKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoImNhbnQgc3RvcmUgcmVjaXBlZCBkYXRhIGJsb2NrIGR1ZSB0byBtaXNzaW5nIHJlY2lwZSBkaWN0IGJsb2NrIikKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KHN0cihlKSkKICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHJlY2lwZV91cGRhdGVyLmRpc2FibGVfd2lmaSgpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgCgpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgCiAgICBjbGFzcyByZWNpcGVfdXBkYXRlcjoKICAgICAgICAKICAgICAgICBAc3RhdGljbWV0aG9kCiAgICAgICAgZGVmIGdldF9hcGlfdXJsKCkgLT4gc3RyOgogICAgICAgICAgICByZXR1cm4gcmVjaXBlX3VwZGF0ZV9oZWxwZXIuZ2V0X2FwaV91cmwoKQoKICAgICAgICBAc3RhdGljbWV0aG9kCiAgICAgICAgZGVmIGRpc2FibGVfd2lmaSgpOgogICAgICAgICAgICBwYXNzCiAgICAgICAgCiAgICAgICAgQHN0YXRpY21ldGhvZAogICAgICAgIGRlZiBjaGVja191cGRhdGVfdXJsKCkgLT4gYm9vbDoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgY29ubmVjdF93aWZpKCkgLT4gYm9vbDoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgdXBkYXRlX3JlY2lwZXMoKSAtPiBib29sOgogICAgICAgICAgICByZXR1cm4gRmFsc2U=", "menu_entry_recipe_editor.py": "aW1wb3J0IG1lbnVfZW50cnkKaW1wb3J0IHN5c3RlbV9jb21tYW5kCmZyb20gdWkgaW1wb3J0IHVpCmZyb20gbGVkcmluZyBpbXBvcnQgbGVkcmluZwpmcm9tIHJlY2lwZV91cGRhdGVyIGltcG9ydCByZWNpcGVfdXBkYXRlcgpmcm9tIG1lbnVfbWFuYWdlciBpbXBvcnQgbWVudV9tYW5hZ2VyCmZyb20gcmVjaXBlX2VkaXRvciBpbXBvcnQgcmVjaXBlX2VkaXRvcgppbXBvcnQgaGVscGVyCmltcG9ydCBjb25maWcKaW1wb3J0IHRpbWUKCmNsYXNzIG1lbnVfZW50cnlfcmVjaXBlX2VkaXRvcihtZW51X2VudHJ5Lm1lbnVfZW50cnkpOgoKICAgIGVkaXRvcjogcmVjaXBlX2VkaXRvciA9IE5vbmUKICAgIGluaXRfc3VjY2VzczogYm9vbCA9IEZhbHNlCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygiUkVDSVBFIEVESVRPUiIsICJFbmFibGUgV2lmaSBiYXNlZCBvbmxpbmUgcmVjaXBlIGVkaXRvciIpCgogICAgZGVmIHByZXZpZXcoc2VsZik6CiAgICAgICAgcHJpbnQoInByZXZpZXcge30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIHVpKCkuc2hvd19yZWNpcGVfaW5mb3JtYXRpb24oc2VsZi5uYW1lLCBzZWxmLmRlc2NyaXB0aW9uKQoKICAgIGRlZiBleGl0KHNlbGYsIF9yZWFzb246IHN0cik6CiAgICAgICAgdWkoKS5zaG93X21zZyhfcmVhc29uKQogICAgICAgIHRpbWUuc2xlZXAoMikKICAgICAgICBzZWxmLnRlYXJkb3duKCkKICAgICAgICBtZW51X21hbmFnZXIoKS5leGl0X2N1cnJlbnRfbWVudSgpCgoKICAgIGRlZiBhY3RpdmF0ZShzZWxmKToKICAgICAgICBwcmludCgiYWN0aXZhdGUge30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIGlmIHNlbGYuZWRpdG9yIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLmV4aXQoIkVkaXRvciBpbml0IGZhaWxlZCwgcGxlYXNlIHJlcG9ydCIpCiAgICAgICAgICAgIHJldHVybgoKICAgICAgICBzZWxmLmVkaXRvciA9IHJlY2lwZV9lZGl0b3IoKQoKICAgICAgICBpZiBub3Qgc2VsZi5lZGl0b3IuaGFzX2NhcGFiaWxpdGllcygpOgogICAgICAgICAgICBzZWxmLmluaXRfc3VjY2VzcyA9IFRydWUKICAgICAgICAgICAgc2VsZi5leGl0KCJXaWZpIGFjY2VzcyBwb2ludCBpcyBub3Qgc3VwcG9ydGVkIikKICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIGlwOiBzdHIgPSAiIgogICAgICAgIGlmIGNvbmZpZy5DRkdfRURJVE9SX09QRU5fQUNDRVNTUE9JTlQ6CiAgICAgICAgICAgIHNzaWQ6IHN0ciA9IGNvbmZpZy5DRkdfRURJVE9SX1dJRklfU1RBX1NTSUQuZm9ybWF0KGhlbHBlci5nZXRfc3lzdGVtX2lkKCkpCiAgICAgICAgICAgIHBzazogc3RyID0gIGNvbmZpZy5DRkdfRURJVE9SX1dJRklfU1RBX1BTSy5mb3JtYXQoaGVscGVyLmdldF9zeXN0ZW1faWQoKSkKICAgICAgICAgICAgaXAgPSBzZWxmLmVkaXRvci5vcGVuX2FjY2Vzc3BvaW50KHNzaWQsIHBzaykgICAKICAgICAgICBlbHNlOgogICAgICAgICAgICBpcCwgc3VjY2VzcyA9IHNlbGYuZWRpdG9yLmNvbm5lY3Rfd2lmaSgpIAogICAgICAgICAgICBpZiBub3Qgc3VjY2VzczoKICAgICAgICAgICAgICAgIHNlbGYuZXhpdCgiQ2FudCBjb25uZWN0IHRvIHdpZmkiKQogICAgICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIHVpKCkuc2hvd19yZWNpcGVfaW5mb3JtYXRpb24oIlBsZWFzZSBjb25uZWN0IHVzaW5nIDoiLCAiSVA6e31cblNTSUQ6e31cblBTSzp7fSIuZm9ybWF0KGlwLCBzc2lkLCBwc2spKQoKICAgICAgICBzZWxmLmVkaXRvci5zZXR1cF93ZWJzZXJ2ZXIoKQoKICAgICAgICBzZWxmLmluaXRfc3VjY2VzcyA9IFRydWUKCgogICAgZGVmIHRlYXJkb3duKHNlbGYpOgogICAgICAgIHByaW50KCJ0ZWFyZG93biB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCiAgICAgICAgaWYgc2VsZi5lZGl0b3IgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYuZWRpdG9yLnN0b3Bfd2Vic2VydmVyKCkKICAgICAgICAgICAgc2VsZi5lZGl0b3IuZGlzYWJsZV93aWZpKCkKICAgICAgICBkZWwgZWRpdG9yCgogICAgZGVmIHVwZGF0ZShzZWxmLCBfc3lzdGVtX2NvbW1hbmQ6IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kKToKICAgICAgICBpZiBzZWxmLmluaXRfc3VjY2VzczoKICAgICAgICAgICAgc2VsZi5lZGl0b3IuaGFuZGxlX2Nvbm5lY3Rpb24oKQ==", "main.py": ""}

# FOR DEBUGGING
ALWAYS_HARD_RESTORE: bool = False

RESTORE_IGNORED_FILES_LIST = ['static_modules', 'thridparty_libs', 'boot.py', 'lib', 'fsdatareconstructor']

def restore_filesystem(_basepath: str = "/", _override: bool = False, _erase: bool = False):
    import ubinascii
    import os

    if _erase:
        print("erase enabled")
        for f in os.listdir():
            if f in __file__:
                print("skipping {} to vaoid installer override".format(f))
                continue 
            
            # UGLY REWORK
            for n in RESTORE_IGNORED_FILES_LIST:
                if n in f:
                    print("skipping {} to vaoid installer override".format(f))
                    continue

            os.remove(f)

    for k in FILE_DATA:

        if k in os.listdir() and not _override:
            continue
        
        print(k)
        d = FILE_DATA[k]
        ubinascii.a2b_base64(d)

        with open(_basepath + "/" + k, "w") as file:
            file.write(ubinascii.a2b_base64(d))

    # CLEANUP
    del ubinascii
    del os


def restore(_hard_restore: bool = False):
    import machine
    import time
    RESTORE_BUTTON_PIN: int = 15
    RESTORE_LED_PIN: int = 25

    push_button_restore = machine.Pin(RESTORE_BUTTON_PIN, machine.Pin.IN, machine.Pin.PULL_UP)
    led_onboard = machine.Pin(RESTORE_LED_PIN, machine.Pin.OUT)

    if not push_button_restore.value() or ALWAYS_HARD_RESTORE or _hard_restore:
        led_onboard.on()
        time.sleep(0.2)
        led_onboard.off()
        time.sleep(0.2)
        led_onboard.on()
        time.sleep(0.2)
        led_onboard.on()
        # RESTORE HARD OVERRIDE USER CHANGES
        restore_filesystem(_override=True, _erase=True)
        led_onboard.off()

    else:
        led_onboard.on()
        # RESTORE SOFT ONLY ADD MISSING FILES IN VIRTUAL FS
        restore_filesystem()
        led_onboard.off()

    # RESTORE PIN STATE
    machine.Pin(RESTORE_BUTTON_PIN, machine.Pin.IN, machine.Pin.OPEN_DRAIN)
    machine.Pin(RESTORE_LED_PIN, machine.Pin.IN)
    
    del machine


if __name__ == "__main__":
    restore()

