FILE_DATA = {"menu_entry_info.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSByZWNpcGVfdXBkYXRlciBpbXBvcnQgcmVjaXBlX3VwZGF0ZXIKZnJvbSBtZW51X21hbmFnZXIgaW1wb3J0IG1lbnVfbWFuYWdlcgpjbGFzcyBtZW51X2VudHJ5X2luZm8obWVudV9lbnRyeS5tZW51X2VudHJ5KToKCgogICAKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygiSU5GTyIsICJIYXZlIGEgbmljZSBkYXkgOikiKQoKICAgIGRlZiBwcmV2aWV3KHNlbGYpOgogICAgICAgIHByaW50KCJwcmV2aWV3IHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLnNob3dfcmVjaXBlX2luZm9ybWF0aW9uKHNlbGYubmFtZSwgc2VsZi5kZXNjcmlwdGlvbikKCgogICAgZGVmIGFjdGl2YXRlKHNlbGYpOgogICAgICAgIHByaW50KCJhY3RpdmF0ZSB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCiAgICAgICAgdWkoKS5zaG93X3RpdGxlc2NyZWVuKCkKCgogICAgZGVmIHRlYXJkb3duKHNlbGYpOgogICAgICAgIHByaW50KCJ0ZWFyZG93biB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCgoKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CiAgICAgICAgaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX05BVklHQVRJT046CiAgICAgICAgICAgICAgICBtZW51X21hbmFnZXIoKS5leGl0X2N1cnJlbnRfbWVudSgpCiAgICAgICAgICAg", "menu_entry_recipe_editor.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSByZWNpcGVfdXBkYXRlciBpbXBvcnQgcmVjaXBlX3VwZGF0ZXIKZnJvbSBtZW51X21hbmFnZXIgaW1wb3J0IG1lbnVfbWFuYWdlcgpjbGFzcyBtZW51X2VudHJ5X3JlY2lwZV9lZGl0b3IobWVudV9lbnRyeS5tZW51X2VudHJ5KToKCgogICAKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygiUkVDSVBFIEVESVRPUiIsICJTaG93cyByZWNpcGUgZWRpdG9yIFVSTCIpCgogICAgZGVmIHByZXZpZXcoc2VsZik6CiAgICAgICAgcHJpbnQoInByZXZpZXcge30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIHVpKCkuc2hvd19yZWNpcGVfaW5mb3JtYXRpb24oc2VsZi5uYW1lLCBzZWxmLmRlc2NyaXB0aW9uKQoKCiAgICBkZWYgYWN0aXZhdGUoc2VsZik6CiAgICAgICAgcHJpbnQoImFjdGl2YXRlIHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLnNob3dfcmVjaXBlX2luZm9ybWF0aW9uKCJQTEVBU0UgV0FJVCIsICJQcmVzcyBORVhUL1BSRVYgdG8gc2hvdyBRUiBDb2RlIG9yIFVSTCIpCiAgICAgICAgCgogICAgZGVmIHRlYXJkb3duKHNlbGYpOgogICAgICAgIHByaW50KCJ0ZWFyZG93biB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCgoKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CiAgICAgICAgaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX05BVklHQVRJT046CiAgICAgICAgICAgIGlmIF9zeXN0ZW1fY29tbWFuZC5hY3Rpb24gPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuTkFWSUdBVElPTl9FTlRFUjoKICAgICAgICAgICAgICAgIG1lbnVfbWFuYWdlcigpLmV4aXRfY3VycmVudF9tZW51KCkKICAgICAgICAgICAgZWxpZiBfc3lzdGVtX2NvbW1hbmQuYWN0aW9uID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLk5BVklHQVRJT05fTEVGVDoKICAgICAgICAgICAgICAgIHVpKCkuc2hvd19kZXZpY2VfcXJfY29kZShyZWNpcGVfdXBkYXRlci5nZXRfYXBpX3VybCgpKQogICAgICAgICAgICBlbGlmIF9zeXN0ZW1fY29tbWFuZC5hY3Rpb24gPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuTkFWSUdBVElPTl9SSUdIVDoKICAgICAgICAgICAgICAgIHVpKCkuc2hvd191cmwocmVjaXBlX3VwZGF0ZXIuZ2V0X2FwaV91cmwoKSk=", "recipe_updater.py": "aW1wb3J0IGNvbmZpZwppbXBvcnQgc2V0dGluZ3MKaW1wb3J0IHRpbWUKaW1wb3J0IGhlbHBlcgoKCmNsYXNzIHJlY2lwZV91cGRhdGVfaGVscGVyOgoKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgaGFzX25ldHdvcmtfY2FwYWJpbGl0aWVzKCkgLT4gYm9vbDoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGltcG9ydCBuZXR3b3JrCiAgICAgICAgICAgIGltcG9ydCBzb2NrZXQKICAgICAgICAgICAgaW1wb3J0IHVyZXF1ZXN0cwogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGdldF9hcGlfdXJsKCkgLT4gc3RyOgogICAgICAgIGFwaV9lbmRwb2ludDogc3RyID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5nZXRfc2V0dGluZ3NfZW50cnkoc2V0dGluZ3MuU0VUVElOR1NfRU5UUklFUy5ORVRXT1JLX0FQSV9FTlBPSU5UKQogICAgICAgIGlmIGFwaV9lbmRwb2ludCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gTm9uZQoKCiAgICAgICAgaWYgbm90IGFwaV9lbmRwb2ludC5zdGFydHN3aXRoKCdodHRwOi8vJyk6CiAgICAgICAgICAgIGFwaV9lbmRwb2ludCA9ICdodHRwOi8vJyArIGFwaV9lbmRwb2ludAogICAgICAgIHByaW50KCJjaGVja191cGRhdGVfdXJsOiBzZXQgYXBpIGVuZHBvaW50IHVybCB7fSIuZm9ybWF0KGFwaV9lbmRwb2ludCkpCiAgICAgICAgCiAgICAgICAgIyBSRU1PVkUgVEFJTElORyAvIFRPIE1BS0UgRk9XTExJTkcgVVJMIENBTExTIFZBTElECiAgICAgICAgaWYgYXBpX2VuZHBvaW50LmVuZHN3aXRoKCcvJykgYW5kIGxlbihhcGlfZW5kcG9pbnQpID4gMDoKICAgICAgICAgICAgYXBpX2VuZHBvaW50ID0gYXBpX2VuZHBvaW50WzotMV0KCiAgICAgICAgCiAgICAgICAgZmluYWxfYXBpX3VybDogc3RyID0gInt9L3t9Ii5mb3JtYXQoYXBpX2VuZHBvaW50LCBzdHIoaGVscGVyLmdldF9zeXN0ZW1faWQoKSkpCiAgICAgICAgcmV0dXJuIGZpbmFsX2FwaV91cmwKCnRyeToKICAgIGltcG9ydCBuZXR3b3JrCiAgICBpbXBvcnQgc29ja2V0CiAgICBpbXBvcnQgdXJlcXVlc3RzCgogICAgY2xhc3MgcmVjaXBlX3VwZGF0ZXI6CiAgICAgICAgCiAgICAgICAgQHN0YXRpY21ldGhvZAogICAgICAgIGRlZiBkaXNhYmxlX3dpZmkoKToKICAgICAgICAgICAgd2xhbiA9IG5ldHdvcmsuV0xBTihuZXR3b3JrLlNUQV9JRikKICAgICAgICAgICAgd2xhbi5hY3RpdmUoRmFsc2UpCiAgICAgICAgCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgZ2V0X2FwaV91cmwoKSAtPiBzdHI6CiAgICAgICAgICAgIHJldHVybiByZWNpcGVfdXBkYXRlX2hlbHBlci5nZXRfYXBpX3VybCgpCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgY29ubmVjdF93aWZpKCkgLT4gYm9vbDoKICAgICAgICAgICAgbmV0d29yay5jb3VudHJ5KGNvbmZpZy5DRkdfTkVUV09SS19XSUZJQ09VTlRSWSkKICAgICAgICAgICAgbmV0d29yay5ob3N0bmFtZShjb25maWcuQ0ZHX05FVFdPUktfSE9TVE5BTUUpCgogICAgICAgICAgICB3bGFuID0gbmV0d29yay5XTEFOKG5ldHdvcmsuU1RBX0lGKQogICAgICAgICAgICB3bGFuLmFjdGl2ZShUcnVlKQogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIHNzaWQgPSBzZXR0aW5ncy5zZXR0aW5ncygpLmdldF9zZXR0aW5nc19lbnRyeShzZXR0aW5ncy5TRVRUSU5HU19FTlRSSUVTLk5FVFdPUktfV0lGSV9TU0lEKQogICAgICAgICAgICBwc2sgPSBzZXR0aW5ncy5zZXR0aW5ncygpLmdldF9zZXR0aW5nc19lbnRyeShzZXR0aW5ncy5TRVRUSU5HU19FTlRSSUVTLk5FVFdPUktfV0lGSV9QU0spCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBzc2lkIGlzIE5vbmUgb3IgcHNrIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBwcmludCgiU1NJRCBPUiBQU0sgRk9SIFdJRkkgQ09OTkVDVElPTiBOT1QgU0VUIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQoKCiAgICAgICAgICAgIHByaW50KCJDT05ORUNUSU5HIFRPOiB7fSIuZm9ybWF0KHNzaWQpKQogICAgICAgICAgICB3bGFuLmNvbm5lY3Qoc3NpZCwgcHNrKQogICAgICAgICAgICB0aW1lciA9IDAKICAgICAgICAgICAgd2hpbGUgd2xhbi5pc2Nvbm5lY3RlZCgpID09IEZhbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoJ1dhaXRpbmcgZm9yIGNvbm5lY3Rpb24uLi4nKQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgICAgICAgdGltZXIgPSB0aW1lciArIDEKCiAgICAgICAgICAgICAgICBpZiB0aW1lciA+IDEwOgogICAgICAgICAgICAgICAgICAgIHdsYW4uYWN0aXZlKEZhbHNlKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgd2xhbi5pc2Nvbm5lY3RlZCgpOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgY2hlY2tfdXBkYXRlX3VybCgpIC0+IGJvb2w6CiAgICAgICAgICAgIGlmIG5vdCByZWNpcGVfdXBkYXRlci5jb25uZWN0X3dpZmkoKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAogICAgICAgIAogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIEdFVCBMSVNUIE9GIFJFQ0lQRVMKICAgICAgICAgICAgICAgIHIgPSB1cmVxdWVzdHMuZ2V0KHJlY2lwZV91cGRhdGVfaGVscGVyLmdldF9hcGlfdXJsKCkpCiAgICAgICAgICAgICAgICByLmNsb3NlKCkKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlICAgICAgICAKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgcHJpbnQoc3RyKGUpKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgICAgICAKICAgICAgICBAc3RhdGljbWV0aG9kICAgCiAgICAgICAgZGVmIHVwZGF0ZV9yZWNpcGVzKCkgLT4gYm9vbDoKICAgICAgICAgICAgaWYgbm90IHJlY2lwZV91cGRhdGVyLmNoZWNrX3VwZGF0ZV91cmwoKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAgICAgYXBpX2VuZHBvaW50OiBzdHIgPSByZWNpcGVfdXBkYXRlX2hlbHBlci5nZXRfYXBpX3VybCgpCiAgICAgICAgCiAgICAgICAgICAgIHByaW50KCJBUEk6IHt9Ii5mb3JtYXQoYXBpX2VuZHBvaW50KSkKCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMikKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgIyBHRVQgTElTVCBPRiBSRUNJUEVTCiAgICAgICAgICAgICAgICBoZWFkZXJzOiBkaWN0ID0ge30KICAgICAgICAgICAgICAgIHIgPSB1cmVxdWVzdHMuZ2V0KCJ7fS9yZWNpcGVzIi5mb3JtYXQoYXBpX2VuZHBvaW50KSwgIGhlYWRlcnM9aGVhZGVycykKICAgICAgICAgICAgICAgIHJlY2lwZV9saXN0ID0gci5qc29uKCkgIyBbInJlc2lwZV9maWxlX3VyaV9yZWxhdGl2ZSJdCiAgICAgICAgICAgICAgICByLmNsb3NlKCkKICAgICAgICAgICAgICAgIGlmIHJlY2lwZV9saXN0IGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgICMgRE9OV0xPQUQgRUFDSCBSRUNJUEUKICAgICAgICAgICAgICAgICAgICBmb3IgcmVjaXBlIGluIHJlY2lwZV9saXN0OgogICAgICAgICAgICAgICAgICAgICAgICByID0gdXJlcXVlc3RzLmdldCgie30vcmVjaXBlL3t9Ii5mb3JtYXQoYXBpX2VuZHBvaW50LCByZWNpcGUpLCAgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICAgICAgICAgICAgICBkbF9yZWNpcGUgPSByLmpzb24oKSAjIFt7ZmlsZW5hbWVfd2l0aG91dF9lbmRpbmcsIHJlY2lwZX1dCiAgICAgICAgICAgICAgICAgICAgICAgIHIuY2xvc2UoKQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3JlY2lwZScgaW4gZGxfcmVjaXBlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Muc2V0dGluZ3MuaW5zdGFuY2UoKS53cml0ZV9qc29uX2ZpbGUoZGxfcmVjaXBlWyduYW1lJ10gKyAiLnJlY2lwZSIsIGRsX3JlY2lwZVsncmVjaXBlJ10pCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiY2FudCBzdG9yZSByZWNpcGVkIGRhdGEgYmxvY2sgZHVlIHRvIG1pc3NpbmcgcmVjaXBlIGRpY3QgYmxvY2siKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgcHJpbnQoc3RyKGUpKQogICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgcmVjaXBlX3VwZGF0ZXIuZGlzYWJsZV93aWZpKCkKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAKCmV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAKICAgIGNsYXNzIHJlY2lwZV91cGRhdGVyOgogICAgICAgIAogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgZ2V0X2FwaV91cmwoKSAtPiBzdHI6CiAgICAgICAgICAgIHJldHVybiByZWNpcGVfdXBkYXRlX2hlbHBlci5nZXRfYXBpX3VybCgpCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgZGlzYWJsZV93aWZpKCk6CiAgICAgICAgICAgIHBhc3MKICAgICAgICAKICAgICAgICBAc3RhdGljbWV0aG9kCiAgICAgICAgZGVmIGNoZWNrX3VwZGF0ZV91cmwoKSAtPiBib29sOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgQHN0YXRpY21ldGhvZAogICAgICAgIGRlZiBjb25uZWN0X3dpZmkoKSAtPiBib29sOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgQHN0YXRpY21ldGhvZAogICAgICAgIGRlZiB1cGRhdGVfcmVjaXBlcygpIC0+IGJvb2w6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQ==", "example_recipes.py": "RVhBTVBMRV9SRUNJUEVTX0NPTExFQ1RJT046IGRpY3QgPSB7CiAgICAiZXhhbXBsZV9yZWNpcGUucmVjaXBlIjogewogICAgICAgICJuYW1lIjogIkVYQU1QTEVfUkVDSVBFIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiQSBuaWNlIEV4YW1wbGUgQ29ja3RhaWwiLAogICAgICAgICJ2ZXJzaW9uIjogIjEuMC4wIiwKICAgICAgICAiaW5ncmVkaWVudHMiOiB7IjAiOiAiQSIsICIxIjogIkIiLCAiMiI6ICJDIn0sCiAgICAgICAgInN0ZXBzIjogWwogICAgICAgICAgICB7ImFjdGlvbiI6ICJzY2FsZSIsICJpbmdyZWRpZW50IjogIjAiLCAiYW1vdW50IjogMTB9LAogICAgICAgICAgICB7ImFjdGlvbiI6ICJjb25maXJtIiwgInRleHQiOiAic2hha2UgaXQifSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAid2FpdCIsICJ0ZXh0IjogIndhaXQgZm9yIGl0IiwgImFtb3VudCI6IDIwfSwKICAgICAgICBdLAogICAgfSwKICAgICJUZXF1aWxhX1N1bnJpc2UucmVjaXBlIjogewogICAgICAgICJuYW1lIjogIlRlcXVpbGEgU3VucmlzZSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgbmljZSBUZXF1aWxhIFN1bnJpc2UgQ29ja3RhaWwiLAogICAgICAgICJ2ZXJzaW9uIjogIjEuMC4wIiwKICAgICAgICAiaW5ncmVkaWVudHMiOiB7IjAiOiAid2Vpw59lciBUZXF1aWxhIiwgIjEiOiAiT3JhbmdlbnNhZnQiLCAiMiI6ICJHcmVuYWRpbmUifSwKICAgICAgICAic3RlcHMiOiBbCiAgICAgICAgICAgIHsiYWN0aW9uIjogInNjYWxlIiwgImluZ3JlZGllbnQiOiAiMCIsICJhbW91bnQiOiAxMH0sCiAgICAgICAgICAgIHsiYWN0aW9uIjogInNjYWxlIiwgImluZ3JlZGllbnQiOiAiMSIsICJhbW91bnQiOiAxMjB9LAogICAgICAgICAgICB7ImFjdGlvbiI6ICJjb25maXJtIiwgInRleHQiOiAiQUREIElDRSJ9LAogICAgICAgICAgICB7ImFjdGlvbiI6ICJzY2FsZSIsICJpbmdyZWRpZW50IjogIjIiLCAiYW1vdW50IjogNDB9LAogICAgICAgICAgICB7ImFjdGlvbiI6ICJ3YWl0IiwgInRleHQiOiAiV0FJVCBGT1IgU0VUVExFIERPV04iLCAiYW1vdW50IjogMTB9LAogICAgICAgIF0sCiAgICB9LAogICAgIlN0cmF3YmVycnlfQ29sYWRhLnJlY2lwZSI6IHsKICAgICAgICAibmFtZSI6ICJTdHJhd2JlcnJ5IENvbGFkYSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgZnJ1aXR5IHN0cmF3YmVycnkgY29ja3RhaWwgd2l0aCBjb2NvbnV0IiwKICAgICAgICAidmVyc2lvbiI6ICIxLjAuMCIsCiAgICAgICAgImluZ3JlZGllbnRzIjogewogICAgICAgICAgICAiMCI6ICIxMCBTdHJhd2JlcnJpZXMiLAogICAgICAgICAgICAiMSI6ICJDb2NvbnV0LUp1aWNlIiwKICAgICAgICAgICAgIjIiOiAiQ3JlYW0iLAogICAgICAgICAgICAiMyI6ICJQaW5lYXBwbGUtSnVpY2UiLAogICAgICAgICAgICAiNCI6ICJ3aGl0ZSBSdW0iLAogICAgICAgICAgICAiNSI6ICJDcnVzaGVkIEljZSIsCiAgICAgICAgfSwKICAgICAgICAic3RlcHMiOiBbCiAgICAgICAgICAgIHsiYWN0aW9uIjogImNvbmZpcm0iLCAidGV4dCI6ICJwdXJlZSBzdHJhd2JlcnJpZXMifSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAiY29uZmlybSIsICJ0ZXh0IjogImFkZCAxLzIgY3J1c2hlZCBpY2UifSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAic2NhbGUiLCAiaW5ncmVkaWVudCI6ICIxIiwgImFtb3VudCI6IDYwfSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAic2NhbGUiLCAiaW5ncmVkaWVudCI6ICIyIiwgImFtb3VudCI6IDMwfSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAic2NhbGUiLCAiaW5ncmVkaWVudCI6ICIzIiwgImFtb3VudCI6IDgwfSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAic2NhbGUiLCAiaW5ncmVkaWVudCI6ICI0IiwgImFtb3VudCI6IDUwfSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAid2FpdCIsICJ0ZXh0IjogIlNoYWtlIiwgImFtb3VudCI6IDMwfSwKICAgICAgICBdLAogICAgfSwKfQo=", "menu_entry.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCB1aQppbXBvcnQgc3lzdGVtX2NvbW1hbmQKCgpjbGFzcyBtZW51X2VudHJ5KCk6CiAgICAKCgogICAgbmFtZTogc3RyID0gIiIKICAgIGRlc2NyaXB0aW9uOiBzdHIgPSAiIgogICAgZGVmIF9faW5pdF9fKHNlbGYsIF9uYW1lOiBzdHIsIF9kZXNjcmlwdGlvbjogc3RyID0gIiIpOgogICAgICAgIHNlbGYubmFtZSA9IF9uYW1lCiAgICAgICAgc2VsZi5kZXNjcmlwdGlvbiA9IF9kZXNjcmlwdGlvbgogICAgCgoKICAgIEBhYnN0cmFjdG1ldGhvZAogICAgZGVmIHByZXZpZXcoc2VsZik6CiAgICAgICAgcHJpbnQoInByZXZpZXcge30iLmZvcm1hdChzZWxmLm5hbWUpKQoKICAgIEBhYnN0cmFjdG1ldGhvZAogICAgZGVmIGFjdGl2YXRlKHNlbGYpOgogICAgICAgIHByaW50KCJhY3RpdmF0ZSB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgdGVhcmRvd24oc2VsZik6CiAgICAgICAgcHJpbnQoInRlYXJkb3duIHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CiAgICAgICAgcGFzcw==", "system_command.py": "ZnJvbSBtaWNyb3B5dGhvbiBpbXBvcnQgY29uc3QKCmNsYXNzIHN5c3RlbV9jb21tYW5kOgogICAgVU5LTk9XTjogaW50ID0gY29uc3QoLTEpCiAgICBDT01NQU5EX1RZUEVfTkFWSUdBVElPTjogaW50ID0gY29uc3QoMCkKICAgIENPTU1BTkRfVFlQRV9TQ0FMRV9WQUxVRTogaW50ID0gY29uc3QoMSkKICAgIENPTU1BTkRfVFlQRV9USU1FUl9JUlE6IGludCA9IGNvbnN0KDIpCgogICAgTkFWSUdBVElPTl9MRUZUOiBpbnQgPSBjb25zdCgwKQogICAgTkFWSUdBVElPTl9SSUdIVDogaW50ID0gY29uc3QoMSkKICAgIE5BVklHQVRJT05fRU5URVI6IGludCA9IGNvbnN0KDIpCiAgICBOQVZJR0FUSU9OX0VYSVQ6IGludCA9IGNvbnN0KDMpCgogICAgU0NBTEVfQ1VSUkVOVF9WQUxVRTogaW50ID0gY29uc3QoMTApCgogICAgVElNRVJfVElDSyA9IGludCA9IGNvbnN0KDExKQoKICAgIHR5cGU6IGludCA9IFVOS05PV04KICAgIGFjdGlvbjogaW50ID0gVU5LTk9XTgogICAgdmFsdWU6IGFueSA9IE5vbmUKCiAgICBkZWYgX19pbml0X18oc2VsZiwgX3R5cGU6IGludCA9IFVOS05PV04sIF9hY3Rpb246IGludCA9IFVOS05PV04sIF92YWx1ZTogYW55ID0gTm9uZSk6CiAgICAgICAgc2VsZi50eXBlID0gX3R5cGUKICAgICAgICBzZWxmLmFjdGlvbiA9IF9hY3Rpb24KICAgICAgICBzZWxmLnZhbHVlID0gX3ZhbHVl", "main.py": "", "menu_entry_recipe_update.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSByZWNpcGVfdXBkYXRlciBpbXBvcnQgcmVjaXBlX3VwZGF0ZXIKZnJvbSBtZW51X21hbmFnZXIgaW1wb3J0IG1lbnVfbWFuYWdlcgoKY2xhc3MgbWVudV9lbnRyeV9yZWNpcGVfdXBkYXRlKG1lbnVfZW50cnkubWVudV9lbnRyeSk6CgoKICAgIHVwZGF0ZV9vazogYm9vbCA9IEZhbHNlCgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oIlJFQ0lQRSBVUERBVEUiLCAiVXBkYXRlIHJlY2lwZXMgb3ZlciBNaXhNZWFzdXJlQnVkZHkgQVBJIikKCiAgICBkZWYgcHJldmlldyhzZWxmKToKICAgICAgICBwcmludCgicHJldmlldyB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCiAgICAgICAgdWkoKS5zaG93X3JlY2lwZV9pbmZvcm1hdGlvbihzZWxmLm5hbWUsIHNlbGYuZGVzY3JpcHRpb24pCgoKICAgIGRlZiBhY3RpdmF0ZShzZWxmKToKICAgICAgICBzZWxmLnVwZGF0ZV9vayA9IEZhbHNlCiAgICAgICAgCiAgICAgICAgcHJpbnQoImFjdGl2YXRlIHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLnNob3dfbXNnKCJDSEVDSyBGT1IgV0lGSSBDT05ORUNUSU9OIikKICAgICAgICBpZiByZWNpcGVfdXBkYXRlci5jaGVja191cGRhdGVfdXJsKCk6CiAgICAgICAgICAgIHVpKCkuc2hvd19tc2coIldJRkkgU1VDQ0VTUyIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgdWkoKS5zaG93X21zZygiRVJST1I6IENIRUNLIENSRURFTlRJQUxTIikKICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIHVpKCkuc2hvd19tc2coIlJFQ0lQRSBGRVRDSElORyBTVEFSVEVEIikKICAgICAgICBpZiByZWNpcGVfdXBkYXRlci51cGRhdGVfcmVjaXBlcygpOgogICAgICAgICAgICBzZWxmLnVwZGF0ZV9vayA9IFRydWUKICAgICAgICAgICAgdWkoKS5zaG93X21zZygiUExFQVNFIFBPV0VSQ1lDTEUgVEhFIERFVklDRSIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgdWkoKS5zaG93X21zZygiVVBEQVRFIEZBSUxFRCIpCgogICAgZGVmIHRlYXJkb3duKHNlbGYpOgogICAgICAgIHByaW50KCJ0ZWFyZG93biB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCiAgICAgICAgcmVjaXBlX3VwZGF0ZXIuZGlzYWJsZV93aWZpKCkKCgogICAgZGVmIHVwZGF0ZShzZWxmLCBfc3lzdGVtX2NvbW1hbmQ6IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kKToKICAgICAgICBpZiBfc3lzdGVtX2NvbW1hbmQudHlwZSA9PSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5DT01NQU5EX1RZUEVfTkFWSUdBVElPTjoKICAgICAgICAgICAgIyBVUERBVEUgRE9FUyBOT1RISU5HIEVYQ0VQVCBHT0lORyBCQUNLIFRPIE1BSU4gTUVOVQogICAgICAgICAgICBpZiBub3Qgc2VsZi51cGRhdGVfb2s6CiAgICAgICAgICAgICAgICBtZW51X21hbmFnZXIoKS5leGl0X2N1cnJlbnRfbWVudSgp", "menu_entry_scale.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSBTY2FsZXMgaW1wb3J0IFNjYWxlSW50ZXJmYWNlCgpjbGFzcyBtZW51X2VudHJ5X3NjYWxlKG1lbnVfZW50cnkubWVudV9lbnRyeSk6CgoKICAgIFdJR0hUX0NIQU5HRV9ESVNQTEFZX1VQREFURTogZmxvYXQgPSAxLjAgIyBVUERBVCBESVNQTEFZIEFGVEVSTEVBU1QgWGcgQ0hBTkdFUwogICAgbGFzdF9zY2FsZV92YWx1ZTogZmxvYXQgPSAwLjAKICAgIG1heF9zY2FsZV92YWx1ZTogZmxvYXQgPSAwLjAKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygiU0NBTEUiLCAiQSBub3JtYWwga2l0Y2hlbiBzY2FsZSIpCgogICAgZGVmIHByZXZpZXcoc2VsZik6CiAgICAgICAgcHJpbnQoInByZXZpZXcge30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIHVpKCkuc2hvd19yZWNpcGVfaW5mb3JtYXRpb24oc2VsZi5uYW1lLCBzZWxmLmRlc2NyaXB0aW9uKQoKCiAgICBkZWYgYWN0aXZhdGUoc2VsZik6CiAgICAgICAgcHJpbnQoImFjdGl2YXRlIHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICBTY2FsZUludGVyZmFjZSgpLnRhcmUoKQogICAgICAgIHVpKCkuc2hvd19zY2FsZShTY2FsZUludGVyZmFjZSgpLmdldF9jdXJyZW50X3dlaWdodCgpKQogICAgICAgIHNlbGYubGFzdF9zY2FsZV92YWx1ZSA9IDAuMAogICAgICAgIHNlbGYubWF4X3NjYWxlX3ZhbHVlID0gMTAuMAogICAgICAgIGxlZHJpbmcoKS5zZXRfbmVvcGl4ZWxfZnVsbCgxMCwgMTAsIDEwKQoKCgogICAgZGVmIHRlYXJkb3duKHNlbGYpOgogICAgICAgIHByaW50KCJ0ZWFyZG93biB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCgoKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CgogICAgICAgICMgVVBEQVRFIFNDQUxFIFZBTFVFCiAgICAgICAgaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX1NDQUxFX1ZBTFVFOgogICAgICAgICAgICBpZiBhYnMoX3N5c3RlbV9jb21tYW5kLnZhbHVlIC0gc2VsZi5sYXN0X3NjYWxlX3ZhbHVlKToKICAgICAgICAgICAgICAgIHNlbGYubGFzdF9zY2FsZV92YWx1ZSA9IF9zeXN0ZW1fY29tbWFuZC52YWx1ZQogICAgICAgICAgICAgICAgdWkoKS5zaG93X3NjYWxlKHNlbGYubGFzdF9zY2FsZV92YWx1ZSkgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQUREIFNPTUUgTkVPUElYRUwgTElHSFROSU5HCiAgICAgICAgICAgICAgICBsZWRyaW5nKCkuc2V0X25lb3BpeGVsX3BlcmNlbnRhZ2UobWluKDEuMCwgYWJzKHNlbGYubWF4X3NjYWxlX3ZhbHVlIC8gc2VsZi5sYXN0X3NjYWxlX3ZhbHVlKSkpCgogICAgICAgICMgVEFSRSBTQ0FMRSBPTiBPSyBCVVRUT04KICAgICAgICBlbGlmIF9zeXN0ZW1fY29tbWFuZC50eXBlID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLkNPTU1BTkRfVFlQRV9OQVZJR0FUSU9OOgogICAgICAgICAgICBpZiBfc3lzdGVtX2NvbW1hbmQuYWN0aW9uID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLk5BVklHQVRJT05fRU5URVI6CiAgICAgICAgICAgICAgICBTY2FsZUludGVyZmFjZSgpLnRhcmUoKQogICAgICAgICAgICAgICAgc2VsZi5tYXhfc2NhbGVfdmFsdWUgPSAxMC4w", "while.bck": "", "ui.py": "", "helper.py": "aW1wb3J0IHRpbWUNCmltcG9ydCB1YmluYXNjaWkNCmltcG9ydCBtYWNoaW5lDQppbXBvcnQgc3lzDQoNCmRlZiBtaWxsaXMoKToNCiAgICByZXR1cm4gcm91bmQodGltZS50aW1lKCkgKiAxMDAwKQ0KDQpkZWYgZm1hcChzLCBhMSwgYTIsIGIxLCBiMikgLT4gZmxvYXQ6DQogICAgcmV0dXJuIGIxICsgKHMgLSBhMSkgKiAoYjIgLSBiMSkgLyAoYTIgLSBhMSkNCg0KZGVmIGltYXAocywgYTEsIGEyLCBiMSwgYjIpIC0+IGludDoNCiAgICByZXR1cm4gYjEgKyAocyAtIGExKSAqIChiMiAtIGIxKSAvIChhMiAtIGExKQ0KDQpkZWYgZ2V0X3N5c3RlbV9pZCgpOg0KICAgIHJldHVybiB1YmluYXNjaWkuaGV4bGlmeShtYWNoaW5lLnVuaXF1ZV9pZCgpKS5kZWNvZGUoJ3V0Zi04JykNCg0KZGVmIGhhc193aWZpKCk6DQogICAgaWYgJ1Jhc3BiZXJyeSBQaSBQaWNvIFcnIGluIHN0cihzeXMuaW1wbGVtZW50YXRpb24pOg0KICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgIHJldHVybiBGYWxzZQ0K", "menu_entry_recipe.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSBtZW51X21hbmFnZXIgaW1wb3J0IG1lbnVfbWFuYWdlcgppbXBvcnQgcmVjaXBlX2xvYWRlcgppbXBvcnQgcmVjaXBlCgpjbGFzcyBtZW51X2VudHJ5X3JlY2lwZShtZW51X2VudHJ5Lm1lbnVfZW50cnkpOgoKCiAgIAogICAgcmVjaXBlX2ZpbGVuYW1lOiBzdHIgPSAiIgogICAgbG9hZGVkX3JlY2lwZTogcmVjaXBlLnJlY2lwZSA9IE5vbmUKCiAgICBkZWYgX19pbml0X18oc2VsZiwgX3JlY2lwZV9maWxlbmFtZTogc3RyLCBfcmVjaXBlX25hbWU6IHN0ciwgX3JlY2lwZV9kZXNjaXB0aW9uOiBzdHIpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oX3JlY2lwZV9uYW1lLCBfcmVjaXBlX2Rlc2NpcHRpb24pCiAgICAgICAgc2VsZi5yZWNpcGVfZmlsZW5hbWUgPSBfcmVjaXBlX2ZpbGVuYW1lCgogICAgZGVmIHByZXZpZXcoc2VsZik6CiAgICAgICAgcHJpbnQoInByZXZpZXcgY3t9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLnNob3dfcmVjaXBlX2luZm9ybWF0aW9uKHNlbGYubmFtZSwgc2VsZi5kZXNjcmlwdGlvbikKCgogICAgZGVmIGFjdGl2YXRlKHNlbGYpOgogICAgICAgIHByaW50KCJhY3RpdmF0ZSB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCiAgICAgICAgdWkoKS5jbGVhcigpCiAgICAgICAgIyBMT0FEIFJFQ0lQRQogICAgICAgIGlmIGxlbihzZWxmLnJlY2lwZV9maWxlbmFtZSkgPD0gMDoKICAgICAgICAgICAgdWkoKS5zaG93X21zZygiUmVjaXBlIGZpbGVuYW1lIGVtcHR5LiBQbGVhc2UgY2hlY2sgZmlsZSIpCgogICAgICAgIAogICAgICAgIHNlbGYubG9hZGVkX3JlY2lwZSA9IHJlY2lwZV9sb2FkZXIucmVjaXBlX2xvYWRlcigpLmdldF9yZWNpcGVfYnlfZmlsZW5hbWUoc2VsZi5yZWNpcGVfZmlsZW5hbWUpCgogICAgICAgIGlmIHNlbGYubG9hZGVkX3JlY2lwZSBpcyBOb25lIG9yIG5vdCBzZWxmLmxvYWRlZF9yZWNpcGUuaXNfdmFsaWQoKToKICAgICAgICAgICAgdWkoKS5zaG93X21zZygiUmVjaXBlIGxvYWRpbmcgZmFpbGVkLiBQbGVhc2UgY2hlY2sgZmlsZSBzdHJ1Y3R1cmUiKQoKCgoKICAgIGRlZiB0ZWFyZG93bihzZWxmKToKICAgICAgICBwcmludCgidGVhcmRvd24ge30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgICMgVU5MT0FEIFJFQ0lQRQogICAgICAgIGlmIHNlbGYubG9hZGVkX3JlY2lwZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgZGVsIHNlbGYubG9hZGVkX3JlY2lwZQogICAgICAgICAgICBzZWxmLmxvYWRlZF9yZWNpcGUgPSBOb25lCgoKCiAgICBkZWYgdXBkYXRlKHNlbGYsIF9zeXN0ZW1fY29tbWFuZDogc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQpOgogICAgICAgIGlmIHNlbGYubG9hZGVkX3JlY2lwZSBpcyBOb25lOgogICAgICAgICAgICBtZW51X21hbmFnZXIuZXhpdF9jdXJyZW50X21lbnUoKQoKCiAgICAgICAgI2lmIF9zeXN0ZW1fY29tbWFuZC50eXBlID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLkNPTU1BTkRfVFlQRV9USU1FUl9JUlE6CiAgICAgICAgIyAgIHNlbGYubGFzdF90aW1lcl9ldmVudCA9IF9zeXN0ZW1fY29tbWFuZAogICAgICAgICNlbGlmIF9zeXN0ZW1fY29tbWFuZC50eXBlID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLkNPTU1BTkRfVFlQRV9TQ0FMRV9WQUxVRToKICAgICAgICAjICAgc2VsZi5sYXN0X3NjYWxlX2V2ZW50ID0gX3N5c3RlbV9jb21tYW5kCiAgICAgICAgI2VsaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX05BVklHQVRJT046CiAgICAgICAgIyAgICBzZWxmLmxhc3RfdXNlcl9ldmVudCA9IF9zeXN0ZW1fY29tbWFuZAogICAgICAgIA==", "config.py": "IyBIQVJEV0FSRSBDT05GSUcgU1RBUlRTIEhFUkUKIyBzc2QxMzA2ID0gMTI4eDY0IG9sZGVkIHdpdGggc3NkMTMwNiBjb250cm9sbGVyCiMgc2gxMTA2ID0gMTI4eDY0IG9sZGVkIHdpdGggc3NoMTEwNiBjb250cm9sbGVyCkNGR19ESVNQTEFZX1RZUEUgPSAic2gxMTA2IiAjIHNoMTEwNiBzc2QxMzA2CkNGR19DQUxJQlJBVElPTl9XRUlHSFRfV0VJR0hUID0gNTAKQ0ZHX1NDQUxFX0dMQVNTX0FERElUSU9OX05FWFRfU1RFUF9XRUlHSFQgPSA1MCAjIFhnIG1vcmUgb24gc2NhbGUgdG8gdHJpZ2dlciBuZXh0IHN0ZXAgaW4gcmVjaXBlID0+IDEvMyB3ZWlnaHQgb2YgYSB0eXBpY2FsIGdsYXNzCkNGR19VU0VSX0xPTkdfQlVUVE9OX1BSRVNTX1RJTUUgPSAxMDAwICMgdGltZSB0byByZWdzaXRlciBhIGxvbmcgYnV0dG9uIHByZXNzIGluIG1zCkNGR19ESVNQTEFZX1VTRVJfUVJfQ09ERSA9IFRydWUgIyBUcnVlIEZhbHNlCkNGR19ORU9QSVhFTF9MRURfQ09VTlQgPSAyNiAjNjAKQ0ZHX05FT1BJWEVMX0xFRF9TVEFSVF9PRkZTRVQgPSAoQ0ZHX05FT1BJWEVMX0xFRF9DT1VOVC8yKSAjIE1BWCBDRkdfTkVPUElYRUxfTEVEX0NPVU5UIFRPIFJPVEFURSBUSEUgU1RBUlRQT0lOVApDRkdfTkVPUElYRUxfTUFYX0JSSUdIVE5FU1MgPSAwLjggIyAwIC0gMS4wCgojIERFRkFVTFQgV0lGSSBTRVRUSU5HUwojIENBTiBMQVRFUiBCRSBDQU5HRUQgSU4gVEhFIFNEQ0FSRC9TRVRUSU5HUy5KU09OIEZJTEUKQ0ZHX05FVFdPUktfSE9TVE5BTUUgPSAibWl4YW5kbWVhc3VyZWJlcnJ5IiAjIHhYeFgubG9jYWwKQ0ZHX05FVFdPUktfV0lGSUNPVU5UUlkgPSAiREUiICMgREUgVVMKQ0ZHX05FVFdPUktfV0lGSV9TU0lEID0gIk1ha2Vyc3BhY2UiCkNGR19ORVRXT1JLX1dJRklfUFNLID0gIk1TOGNDdnBFIgpDRkdfTkVUV09SS19BUElfRU5EUE9JTlQgPSAibWl4bWVhc3VyZWJ1ZGR5LmNvbS9hcGkvbW1iIgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjIyMjIyBQSU4gQ09ORklHICMjIyMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBORU9QSVhFTCBSSU5HCkNGR19ORU9QSVhFTF9QSU4gPSAyOAojIEJVVFRPTlMKQ0ZHX0JVVFRPTl9MRUZUX1BJTiA9IDEyCkNGR19CVVRUT05fUklHSFRfUElOID0gMTMKIyBIWDcxMSBNT0RVTEUKQ0ZHX0hYNzExX0RPVVRfUElOID0gNQpDRkdfSFg3MTFfU0NLX1BJTiA9IDEyCiMgW09QVElPTkFMXSBTRCBDQVJECkNGR19TRENBUkRfU1BJSU5TVEFOQ0UgPSAxCkNGR19TRENBUkRfU0NLX1BJTiA9IDEwCkNGR19TRENBUkRfTU9TSV9QSU4gPSAxMQpDRkdfU0RDQVJEX01JU09fUElOID0gOApDRkdfU0RDQVJEX0NTX1BJTiA9IDkKIyBbT1BUSU9OQUxdIFNTRDEzMDYgb3IgU0gxMTA2CkNGR19PTEVEX0kyQ0lOU1RBTkNFID0gMApDRkdfT0xFRF9TQ0xfUElOID0gMjEKQ0ZHX09MRURfU0RBX1BJTiA9IDIwCkNGR19PTEVEX0FERFIgPSAweDNjCkNGR19ESVNQTEFZX0xJTkVfU1BBQ0lORyA9IDkgIyBwaXhlbCBmb250IHdpZHRoCkNGR19ESVNQTEFZX0NIQVJfV0lEVEggPSA4CgpTQ1JfV0lEVEggPSAxMjgKU0NSX0hFSUdIVCA9IDY0CgoKICAgIAo=", "ledring.py": "aW1wb3J0IG5lb3BpeGVsCmltcG9ydCBtYWNoaW5lCmltcG9ydCBjb25maWcKaW1wb3J0IG5lb3BpeGVsCmltcG9ydCByYW5kb20KaW1wb3J0IGhlbHBlcgppbXBvcnQgbWF0aAppbXBvcnQgdGltZQpmcm9tIHNpbmdsZXRvbiBpbXBvcnQgc2luZ2xldG9uCgpAc2luZ2xldG9uCmNsYXNzIGxlZHJpbmc6CgogICAgQ09MT1JfUFJFU0VUX0hTVl9IX19CTFVFOiBmbG9hdCA9IDAuNjYKICAgIENPTE9SX1BSRVNFVF9IU1ZfSF9fUElOSzogZmxvYXQgPSAwLjg4CiAgICBDT0xPUl9QUkVTRVRfSFNWX0hfX0JMQUNLOiBmbG9hdCA9IC0xLjAKCiAgICBkZWYgaHN2X3RvX3JnYihzZWxmLCBoc3ZfY29sb3IpOgogICAgICAgICMgaHR0cHM6Ly9naXRodWIuY29tL1dhcnJpbmdlci9taWNyb3B5dGhvbi1yZ2JsZWQvYmxvYi9tYXN0ZXIvcmdibGVkLnB5CiAgICAgICAgKGgsIHMsIHYpID0gaHN2X2NvbG9yCgogICAgICAgIGlmIGggPCAwLjA6CiAgICAgICAgICAgIHJldHVybiAwLCAwLCAwCiAgICAgICAgaSA9IG1hdGguZmxvb3IoaCo2KQogICAgICAgIGYgPSBoKjYgLSBpCiAgICAgICAgcCA9IHYgKiAoMS1zKQogICAgICAgIHEgPSB2ICogKDEtZipzKQogICAgICAgIHQgPSB2ICogKDEtKDEtZikqcykKCiAgICAgICAgciwgZywgYiA9IFsKICAgICAgICAgICAgKHYsIHQsIHApLAogICAgICAgICAgICAocSwgdiwgcCksCiAgICAgICAgICAgIChwLCB2LCB0KSwKICAgICAgICAgICAgKHAsIHEsIHYpLAogICAgICAgICAgICAodCwgcCwgdiksCiAgICAgICAgICAgICh2LCBwLCBxKSwKICAgICAgICBdW2ludChpJTYpXQogICAgICAgIHIgPSBpbnQoMjU1ICogcikKICAgICAgICBnID0gaW50KDI1NSAqIGcpCiAgICAgICAgYiA9IGludCgyNTUgKiBiKQogICAgICAgIHJldHVybiByLCBnLCBiCgogICAgZGVmIHJnYl90b19oc3Yoc2VsZiwgcmdiX2NvbG9yKToKICAgICAgICAiIiJDb252ZXJ0cyBjb2xvcnMgZnJvbSB0aGUgUkdCIGNvbG9yIHNwYWNlIHRvIHRoZSBIU1YgY29sb3Igc3BhY2UuCgogICAgICAgIFBhcmFtZXRlcnMKICAgICAgICAtLS0tLS0tLS0tCiAgICAgICAgcmdiX2NvbG9yIDogdHVwbGUgKHIsIGcsIGIpCiAgICAgICAgICAgIENvbG9yIGluIHRoZSBSR0IgY29sb3Igc3BhY2UKCiAgICAgICAgUmV0dXJucwogICAgICAgIC0tLS0tLS0KICAgICAgICB0dXBsZSAoaCwgcywgdikKICAgICAgICAgICAgQ29sb3IgaW4gdGhlIEhTViBjb2xvciBzcGFjZQoKICAgICAgICAiIiIKICAgICAgICAociwgZywgYikgPSByZ2JfY29sb3IKICAgICAgICByID0gZmxvYXQoMSAvIDI1NSAqIHIpCiAgICAgICAgZyA9IGZsb2F0KDEgLyAyNTUgKiBnKQogICAgICAgIGIgPSBmbG9hdCgxIC8gMjU1ICogYikKICAgICAgICBoaWdoID0gbWF4KHIsIGcsIGIpCiAgICAgICAgbG93ID0gbWluKHIsIGcsIGIpCiAgICAgICAgaCwgcywgdiA9IGhpZ2gsIGhpZ2gsIGhpZ2gKCiAgICAgICAgZCA9IGhpZ2ggLSBsb3cKICAgICAgICBzID0gMCBpZiBoaWdoID09IDAgZWxzZSBkL2hpZ2gKCiAgICAgICAgaWYgaGlnaCA9PSBsb3c6CiAgICAgICAgICAgIGggPSAwLjAKICAgICAgICBlbHNlOgogICAgICAgICAgICBoID0gewogICAgICAgICAgICAgICAgcjogKGcgLSBiKSAvIGQgKyAoNiBpZiBnIDwgYiBlbHNlIDApLAogICAgICAgICAgICAgICAgZzogKGIgLSByKSAvIGQgKyAyLAogICAgICAgICAgICAgICAgYjogKHIgLSBnKSAvIGQgKyA0LAogICAgICAgICAgICB9W2hpZ2hdCiAgICAgICAgICAgIGggLz0gNgoKICAgICAgICByZXR1cm4gaCwgcywgdgoKICAgIG5lb3BpeGVscmluZzogbmVvcGl4ZWwuTmVvUGl4ZWwgPSBOb25lCiAgIAogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYubmVvcGl4ZWxyaW5nID0gbmVvcGl4ZWwuTmVvUGl4ZWwobWFjaGluZS5QaW4oY29uZmlnLkNGR19ORU9QSVhFTF9QSU4pLCBjb25maWcuQ0ZHX05FT1BJWEVMX0xFRF9DT1VOVCkKICAgCiAgICBkZWYgY2xlYXIoc2VsZik6CiAgICAgICAgc2VsZi5zZXRfbmVvcGl4ZWxfZnVsbCgKICAgICAgICAgICAgMCwgMCwgMCkKCgogICAgZGVmIHNldF9uZW9waXhlbF9wZXJjZW50YWdlKHNlbGYsIF9wZXJjZW50YWdlOiBmbG9hdCwgX3N0YXJ0X2NvbG9yOiBmbG9hdCA9IDAuMCwgX3RhcmdldF9jb2xvcjogZmxvYXQgPSAwLjQsIF9vZmZfY29sb3I6IGZsb2F0ID0gMC42LCBfaW5kZXBlbmRlbnRfY29sb3Jpbmc6IGJvb2wgPSBGYWxzZSk6CiAgICAgICAgX3BlcmNlbnRhZ2UgPSBtaW4oX3BlcmNlbnRhZ2UsIDEuMCkKICAgICAgICAKICAgICAgICBkaXNwX3ZhbHVlOiBpbnQgPSBpbnQobWluKFtoZWxwZXIuaW1hcChfcGVyY2VudGFnZSAqIDEwMCwgMCwgMTAwLCAwICwgY29uZmlnLkNGR19ORU9QSVhFTF9MRURfQ09VTlQpLCBjb25maWcuQ0ZHX05FT1BJWEVMX0xFRF9DT1VOVF0pKQogICAgICAgICNwcmludChkaXNwX3ZhbHVlKQogICAgICAgIAoKICAgICAgICBjb2xvcl92YWx1ZTogZmxvYXQgPSBoZWxwZXIuZm1hcChkaXNwX3ZhbHVlLCAwLCBjb25maWcuQ0ZHX05FT1BJWEVMX0xFRF9DT1VOVCwgX3N0YXJ0X2NvbG9yICwgX3RhcmdldF9jb2xvcikKICAgICAgICAKICAgICAgICBvZmZfY29sb3IgPSBzZWxmLmhzdl90b19yZ2IoW19vZmZfY29sb3IsIGNvbmZpZy5DRkdfTkVPUElYRUxfTUFYX0JSSUdIVE5FU1MsIGNvbmZpZy5DRkdfTkVPUElYRUxfTUFYX0JSSUdIVE5FU1NdKQogICAgICAgICAgICAKICAgICAgICAKICAgICAgICBmb3IgaSBpbiByYW5nZShjb25maWcuQ0ZHX05FT1BJWEVMX0xFRF9DT1VOVCk6CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBfaW5kZXBlbmRlbnRfY29sb3Jpbmc6CiAgICAgICAgICAgICAgICBjb2xvcl92YWx1ZSA9IGhlbHBlci5mbWFwKGksIDAsIGNvbmZpZy5DRkdfTkVPUElYRUxfTEVEX0NPVU5ULCBfc3RhcnRfY29sb3IgLCBfdGFyZ2V0X2NvbG9yKQogICAgICAgICMgICAgIyBBUFBMWSBTVEFSVCBJTkRFWCBPRkZTRVQKICAgICAgICAgICAgbGVkX2luZGV4ID0gaW50KChpK2NvbmZpZy5DRkdfTkVPUElYRUxfTEVEX1NUQVJUX09GRlNFVCkgJSBjb25maWcuQ0ZHX05FT1BJWEVMX0xFRF9DT1VOVCkKICAgICAgICAjICAgICMgQUJPVkUgVEFSR0VUIFBFUkNFTlRBR0UgU0VUIE9GRiBPUiBPTiBMT1cgQ09MT1IKICAgICAgICAgICAgaWYgaSA+IGRpc3BfdmFsdWU6CiAgICAgICAgICAgICAgICBzZWxmLm5lb3BpeGVscmluZ1tsZWRfaW5kZXhdID0gKG9mZl9jb2xvclswXSwgb2ZmX2NvbG9yWzFdLCBvZmZfY29sb3JbMl0pCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAKICAgICAgICAgICAgcmdiID0gc2VsZi5oc3ZfdG9fcmdiKFtjb2xvcl92YWx1ZSwgMS4wLCBjb25maWcuQ0ZHX05FT1BJWEVMX01BWF9CUklHSFRORVNTXSkKICAgICAgICAgICAgc2VsZi5uZW9waXhlbHJpbmdbbGVkX2luZGV4XSA9IChyZ2JbMF0sIHJnYlsxXSwgcmdiWzJdKQogICAgICAgIAogICAgICAgIAogICAgICAgIHNlbGYubmVvcGl4ZWxyaW5nLndyaXRlKCkKCgogICAgZGVmIHNldF9uZW9waXhlbF9mdWxsX2hzdihzZWxmLCBfaHN2X2NvbG9yOiBmbG9hdCA9IDAuMCk6CiAgICAgICAgc2VsZi5zZXRfbmVvcGl4ZWxfcGVyY2VudGFnZSgxLjAsIF9oc3ZfY29sb3IsIF9oc3ZfY29sb3IsIF9oc3ZfY29sb3IpCgogICAgZGVmIHNldF9uZW9waXhlbF9yYW5kb20oc2VsZiwgX2VyOiBib29sID0gRmFsc2UsIF9lZzogYm9vbCA9IEZhbHNlLCBfZWI6IGJvb2wgPSBUcnVlKToKICAgICAgICByOiBpbnQgPSBpbnQoMTI4KiByYW5kb20ucmFuZG9tKCkpICogX2VyCiAgICAgICAgZzogaW50ID0gaW50KDEyOCogcmFuZG9tLnJhbmRvbSgpKSAqIF9lZwogICAgICAgIGI6IGludCA9IGludCgxMjgqIHJhbmRvbS5yYW5kb20oKSkgKiBfZWIKICAgICAgICBzZWxmLnNldF9uZW9waXhlbF9mdWxsKHIsIGcsIGIpCgoKICAgIGRlZiBzZXRfbmVvcGl4ZWxfZnVsbChzZWxmLCBfcjogaW50LCBfZzogaW50LCBfYjogaW50KToKICAgICAgICBoLCBfLCBfID0gc2VsZi5yZ2JfdG9faHN2KFtfciwgX2csIF9iXSkKICAgICAgICBzZWxmLnNldF9uZW9waXhlbF9mdWxsX2hzdihoKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIHdoaWxlIFRydWU6CiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMTApOgogICAgICAgICAgICBsZWRyaW5nKCkuc2V0X25lb3BpeGVsX3BlcmNlbnRhZ2UoaS8xMCwgbGVkcmluZygpLkNPTE9SX1BSRVNFVF9IU1ZfSF9fQkxVRSwgbGVkcmluZygpLkNPTE9SX1BSRVNFVF9IU1ZfSF9fUElOSywgbGVkcmluZygpLkNPTE9SX1BSRVNFVF9IU1ZfSF9fQkxBQ0ssIFRydWUpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4xKQoK", "recipe.py": "CmNsYXNzIFVTRVJfSU5URVJBQ1RJT05fTU9ERToKICAgIFVOS05PV04gPSAtMQogICAgU0NBTEUgPSAwCiAgICBDT05GSVJNID0gMQogICAgV0FJVCA9IDIKCgpjbGFzcyByZWNpcGVfc3RlcDoKICAgIHN0ZXBfdmFsaWQ6IGJvb2wgPSBGYWxzZQogICAgYWN0aW9uOiBVU0VSX0lOVEVSQUNUSU9OX01PREUgPSBVU0VSX0lOVEVSQUNUSU9OX01PREUuVU5LTk9XTgogICAgaW5ncmVkaWVudF9uYW1lOiBzdHIgPSAiLi4uIgogICAgY3VycmVudF9zdGVwX3RleHQ6IHN0ciA9ICItLS0iCiAgICBtYXhfc3RlcDogaW50ID0gLTEKICAgIHRhcmdldF92YWx1ZTogaW50ID0gMAogICAgcmVjaXBlX2ZpbmlzaGVkOiBib29sID0gVHJ1ZQoKCiAgICBkZWYgX19pbml0X18oc2VsZiwgX3N0ZXBfdmFsaWQ6IGJvb2wgPSBGYWxzZSwgX2FjdGlvbjogVVNFUl9JTlRFUkFDVElPTl9NT0RFID0gVVNFUl9JTlRFUkFDVElPTl9NT0RFLlVOS05PV04sIF9pbmdyZWRpZW50X25hbWU6IHN0ciA9ICIuLi4iLCBfY3VycmVudF9zdGVwX3RleHQ6c3RyID0gIi0tLSIsIF9tYXhfc3RlcDogaW50ID0gLTEsIF90YXJnZXRfdmFsdWU6IGludCA9IDAsIF9yZWNpcGVfZmluaXNoZWQ6IGJvbyA9IEZhbHNlKToKICAgICAgICBzZWxmLnN0ZXBfdmFsaWQgPSBfc3RlcF92YWxpZAogICAgICAgIHNlbGYuYWN0aW9uID0gX2FjdGlvbgogICAgICAgIHNlbGYuaW5ncmVkaWVudF9uYW1lID0gX2luZ3JlZGllbnRfbmFtZQogICAgICAgIHNlbGYuY3VycmVudF9zdGVwX3RleHQgPSBfY3VycmVudF9zdGVwX3RleHQKICAgICAgICBzZWxmLm1heF9zdGVwID0gX21heF9zdGVwCiAgICAgICAgc2VsZi50YXJnZXRfdmFsdWUgPSBfdGFyZ2V0X3ZhbHVlCiAgICAgICAgc2VsZi5yZWNpcGVfZmluaXNoZWQgPSBfcmVjaXBlX2ZpbmlzaGVkCgogICAgIyAoYWN0aW9uLCBpbmdyZWRpZW50LCBjdXJyZW50X3N0ZXAsIG1heF9zdGVwcywgdGFyZ2V0X3dlaWdodCwgZmluaXNoZWQpCgpjbGFzcyByZWNpcGU6CiAgICAKCiAgICBkZWYgX19pbml0X18oc2VsZikgLT4gTm9uZToKICAgICAgICBwYXNzCgogICAgZGVmIGlzX3ZhbGlkKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgcmV0dXJuIEZhbHNlCgoKICAgIGRlZiBnZXRfZGVzY3JpcHRpb24oc2VsZikgLT4gc3RyOgogICAgICAgIHJldHVybiAiIgoKICAgIGRlZiBnZXRfY2F0ZWdvcmllcyhzZWxmKSAtPiBsaXN0W3N0cl06CiAgICAgICAgcmV0dXJuIFtdCgogICAgCgoKICAgIGRlZiBnZXRfcmVjaXBlX2luZm9ybWF0aW9uKHNlbGYpIC0+IHR1cGxlW3N0ciwgc3RyXToKICAgICAgICBpZiBzZWxmLmxvYWRlZF9yZWNpcGUgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuICgiaW52YWxpZCIsICItLS0iKQogICAgICAgIAogICAgICAgIHJldHVybiAoc2VsZi5sb2FkZWRfcmVjaXBlWyduYW1lJ10sIHNlbGYubG9hZGVkX3JlY2lwZVsnZGVzY3JpcHRpb24nXSkKICAgIAogICAgZGVmIHN3aXRjaF9uZXh0X3N0ZXAoc2VsZik6CiAgICAgICAgaWYgc2VsZi5sb2FkZWRfcmVjaXBlIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGlmIHNlbGYuY3VycmVudF9yZWNpcGVfc3RlcCBpcyBOb25lOgogICAgICAgICAgICBzZWxmLmN1cnJlbnRfcmVjaXBlX3N0ZXAgPSAwCiAgICAgICAgc3RlcHMgPSBzZWxmLmxvYWRlZF9yZWNpcGVbJ3N0ZXBzJ10KICAgICAgICBuX3N0ZXBzID0gbGVuKHN0ZXBzKQogICAgICAgIGlmIHNlbGYuY3VycmVudF9yZWNpcGVfc3RlcCA8IG5fc3RlcHM6CiAgICAgICAgICAgIHNlbGYuY3VycmVudF9yZWNpcGVfc3RlcCA9IHNlbGYuY3VycmVudF9yZWNpcGVfc3RlcCArIDEKICAgICAgICAgICAgICAgICAgCiAgICBkZWYgc3dpdGNoX3ByZXZfc3RlcChzZWxmKToKICAgICAgICBwYXNzCgoKICAgIGRlZiBnZXRfaW5ncmVkaWVudF9saXN0KHNlbGYpIC0+IGxpc3Rbc3RyXToKICAgICAgICBpZiBzZWxmLmxvYWRlZF9yZWNpcGUgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgcnQgPSBbXQogICAgICAgIGluZyA9IHNlbGYubG9hZGVkX3JlY2lwZVsnaW5ncmVkaWVudHMnXQogICAgICAgIGlmIGluZyBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gW10KICAgICAgICBmb3IgayBpbiBpbmc6CiAgICAgICAgICAgIHJ0LmFwcGVuZChpbmdba10pCiAgICAgICAgcmV0dXJuIHJ0CiAgICAKICAgIGRlZiBnZXRfaW5ncmVkaWVudF9zdHIoc2VsZikgLT4gc3RyOgogICAgICAgIHJ0ID0gIiIKICAgICAgICBmb3IgaXRlbSBpbiBzZWxmLmdldF9pbmdyZWRpZW50X2xpc3QoKToKICAgICAgICAgICAgcnQgPSBydCArIGl0ZW0gKyAiXG4iCiAgICAgICAgcmV0dXJuIHJ0CgoKICAgIGRlZiBnZXRfY3VycmVudF9yZWNpcGVfc3RlcChzZWxmKSAtPiByZWNpcGVfc3RlcDogIyAoYWN0aW9uLCBpbmdyZWRpZW50LCBjdXJyZW50X3N0ZXAsIG1heF9zdGVwcywgdGFyZ2V0X3dlaWdodCwgZmluaXNoZWQpCiAgICAgICAgaWYgc2VsZi5sb2FkZWRfcmVjaXBlIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiByZWNpcGVfc3RlcCgpCgoKICAgICAgICBzdGVwcyA9IHNlbGYubG9hZGVkX3JlY2lwZVsnc3RlcHMnXQogICAgICAgIG5fc3RlcHMgPSBsZW4oc3RlcHMpCiAgICAgICAgaWYgc2VsZi5jdXJyZW50X3JlY2lwZV9zdGVwIGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYuY3VycmVudF9yZWNpcGVfc3RlcCA9IDAKICAgICAgICAKICAgICAgICAjIFRPRE8gSlNPTiBUTyBSRUNJUEUgSU4gUkVDSVBFIExPQURFUgogICAgICAgIGlmIHNlbGYuY3VycmVudF9yZWNpcGVfc3RlcCA+PSBuX3N0ZXBzOgogICAgICAgICAgICAgcmV0dXJuIHJlY2lwZV9zdGVwKF9yZWNpcGVfZmluaXNoZWQgPSBUcnVlKQogICAgICAgICAgICAKICAgICAgICBzdGVwID0gc3RlcHNbc2VsZi5jdXJyZW50X3JlY2lwZV9zdGVwXQogICAgICAgIGlmIHN0ZXBbJ2FjdGlvbiddID09ICdzY2FsZSc6CiAgICAgICAgICAgIGluZ3JlZGllbnRfbmFtZSA9IHNlbGYubG9hZGVkX3JlY2lwZVsnaW5ncmVkaWVudHMnXVtzdGVwWydpbmdyZWRpZW50J11dCiAgICAgICAgICAgICNyZXR1cm4gKFVTRVJfSU5URVJBQ1RJT05fTU9ERS5TQ0FMRSwgc3RlcFsnYWN0aW9uJ10sIGluZ3JlZGllbnRfbmFtZSwgc2VsZi5jdXJyZW50X3JlY2lwZV9zdGVwKzEsIG5fc3RlcHMsIHN0ZXBbJ2Ftb3VudCddLCBGYWxzZSkKICAgICAgICBlbGlmIHN0ZXBbJ2FjdGlvbiddID09ICdjb25maXJtJzoKICAgICAgICAgICAgcGFzcyAgICAgCiAgICAgICAgICAgICNyZXR1cm4gKFVTRVJfSU5URVJBQ1RJT05fTU9ERS5DT05GSVJNLCBzdGVwWydhY3Rpb24nXSwgc3RlcFsndGV4dCddLCBzZWxmLmN1cnJlbnRfcmVjaXBlX3N0ZXArMSwgbl9zdGVwcywgMCwgRmFsc2UpCiAgICAgICAgZWxpZiBzdGVwWydhY3Rpb24nXSA9PSAnd2FpdCc6ICAgICAKICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAjcmV0dXJuIChVU0VSX0lOVEVSQUNUSU9OX01PREUuV0FJVCwgc3RlcFsnYWN0aW9uJ10sIHN0ZXBbJ3RleHQnXSwgc2VsZi5jdXJyZW50X3JlY2lwZV9zdGVwKzEsIG5fc3RlcHMsIHN0ZXBbJ2Ftb3VudCddLCBGYWxzZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gcmVjaXBlX3N0ZXAoKQ==", "settings.py": "aW1wb3J0IHNkY2FyZAppbXBvcnQgbWFjaGluZQppbXBvcnQgdW9zCmltcG9ydCBqc29uCmltcG9ydCBjb25maWcKaW1wb3J0IG9zCmZyb20gc2luZ2xldG9uIGltcG9ydCBzaW5nbGV0b24KCmNsYXNzIFNFVFRJTkdTX0VOVFJJRVMob2JqZWN0KToKICAgIFNDQUxFX0NBTElCUkFUSU9OX01JTl9WQUxVRSA9ICJzY2FsZV9taW4iCiAgICBTQ0FMRV9DQUxJQlJBVElPTl9NQVhfVkFMVUUgPSAic2NhbGVfZnVsbCIKICAgIFNDQUxFX0NBTElCUkFUSU9OX0NBTElCUkFUSU9OX1dFSUdIVCA9ICJzY2FsZV93ZWlnaHQiCgogICAgTkVUV09SS19XSUZJX1NTSUQgPSAid2lmaV9zc2lkIgogICAgTkVUV09SS19XSUZJX1BTSyA9ICJ3aWZpX3BzayIKICAgIE5FVFdPUktfQVBJX0VOUE9JTlQgPSAiYXBpX2VucG9pbnQiCgoKCkBzaW5nbGV0b24KY2xhc3Mgc2V0dGluZ3Mob2JqZWN0KToKCiAgIAoKICAgIHNkID0gTm9uZSAjIHNkY2FyZCBjbGFzcyBpbnN0YW5jZQoKICAgIFJFQ0lQRV9CQVNFX0RJUjogc3RyID0gIi9kYXRhIiAjIEZPTERFUiBPRiBUSEUgU0VUVElOR1MgRklMRVMgU1RPUkFHRSBJRiBTRCBDQVJEIEZPVU5EIFNEIENBUkQgV0lMTCBCRSBNT1VOVEVEIFRIRVJFCiAgICBTRVRUSU5HU19GSUxFTkFNRTogc3RyID0gIlNFVFRJTkdTLmpzb24iCiAgICAgCiAgICBkZWYgX19pbml0X18oc2VsZiwgX3NwaSA9IE5vbmUsIF9jc19waW4gPSBjb25maWcuQ0ZHX1NEQ0FSRF9DU19QSU4sIF9kYXRhX2Rpcjogc3RyID0gIi9kYXRhIik6CiAgICAgICAgc2VsZi5SRUNJUEVfQkFTRV9ESVIgPSBfZGF0YV9kaXIKCiAgICAgICAgaWYgX3NwaSBpcyBOb25lOgogICAgICAgICAgICBfc3BpID0gbWFjaGluZS5TUEkoY29uZmlnLkNGR19TRENBUkRfU1BJSU5TVEFOQ0UsIGJhdWRyYXRlPTEwMDAwMDAsIHBvbGFyaXR5PTAsIHBoYXNlPTAsIGJpdHM9OCwgZmlyc3RiaXQ9bWFjaGluZS5TUEkuTVNCLCBzY2s9bWFjaGluZS5QaW4oY29uZmlnLkNGR19TRENBUkRfU0NLX1BJTiksIG1vc2k9bWFjaGluZS5QaW4oY29uZmlnLkNGR19TRENBUkRfTU9TSV9QSU4pLCBtaXNvPW1hY2hpbmUuUGluKGNvbmZpZy5DRkdfU0RDQVJEX01JU09fUElOKSkKICAgICAgICAjIEFzc2lnbiBjaGlwIHNlbGVjdCAoQ1MpIHBpbiAoYW5kIHN0YXJ0IGl0IGhpZ2gpCiAgICAgICAgc2VsZi5jcyA9IG1hY2hpbmUuUGluKF9jc19waW4sIG1hY2hpbmUuUGluLk9VVCkKCiAgICAgICAgc2VsZi5zZCA9IE5vbmUKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYuc2QgPSBzZGNhcmQuU0RDYXJkKF9zcGksIHNlbGYuY3MpCgogICAgICAgICAjIE1vdW50IGZpbGVzeXN0ZW0KICAgICAgICAgICAgc2VsZi52ZnMgPSB1b3MuVmZzRmF0KHNlbGYuc2QpCiAgICAgICAgICAgIHVvcy5tb3VudChzZWxmLnZmcywgc2VsZi5SRUNJUEVfQkFTRV9ESVIpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludCgic2RjYXJkIGluaXQgZmFpbGVkIHVzaW5nIGxvY2FsIGZpbGVzeXN0ZW0gb24gL2RhdGEiLCBzdHIoZSkpCgoKICAgICAgICBpZiBzZWxmLnNkIGlzIE5vbmU6CiAgICAgICAgICAgIHRyeTogCiAgICAgICAgICAgICAgICBvcy5ta2RpcihzZWxmLlJFQ0lQRV9CQVNFX0RJUikgCiAgICAgICAgICAgICAgICBwcmludCgiRGlyZWN0b3J5ICclcycgY3JlYXRlZCBzdWNjZXNzZnVsbHkiICUgc2VsZi5SRUNJUEVfQkFTRV9ESVIpIAogICAgICAgICAgICBleGNlcHQgT1NFcnJvciBhcyBlcnJvcjogCiAgICAgICAgICAgICAgICBwcmludCgiRGlyZWN0b3J5ICclcycgY2FuIG5vdCBiZSBjcmVhdGVkIiAlIHNlbGYuUkVDSVBFX0JBU0VfRElSKQoKCiAgICAgICAgc2VsZi5jcmVhdGVfc2V0dGluZ3NfZmlsZSgpCiAgICAgICAgc2VsZi5jcmVhdGVfaW5pdGlhbF9jb25maWcoKQoKICAgIGRlZiBjcmVhdGVfc2V0dGluZ3NfZmlsZShzZWxmKToKICAgICAgICBzZXR0aW5nc19kaWN0ID0ge30KICAgICAgICBpZiBub3Qgc2VsZi5TRVRUSU5HU19GSUxFTkFNRSBpbiBzZWxmLmxpc3RfZmlsZXMoKToKICAgICAgICAgICAgd2l0aCBvcGVuKHNlbGYuUkVDSVBFX0JBU0VfRElSICsgIi8iICsgc2VsZi5TRVRUSU5HU19GSUxFTkFNRSwgInciKSBhcyBmaWxlOgogICAgICAgICAgICAgICAgZmlsZS53cml0ZShqc29uLmR1bXBzKHNldHRpbmdzX2RpY3QpKQoKCiAgICBkZWYgY3JlYXRlX2luaXRpYWxfY29uZmlnKHNlbGYpOgogICAgICAgIG1lbWJlcnMgPSBbYXR0ciBmb3IgYXR0ciBpbiBkaXIoU0VUVElOR1NfRU5UUklFUykgaWYgbm90IGNhbGxhYmxlKGdldGF0dHIoU0VUVElOR1NfRU5UUklFUywgYXR0cikpIGFuZCBub3QgYXR0ci5zdGFydHN3aXRoKCJfXyIpXQogICAgICAgICMgUE9QVUxBVEUgQ09ORklHIEZJTEUgV0lUSCBBTEwgUE9TU0lCTEUgS0VZUwogICAgICAgIGZvciBtIGluIG1lbWJlcnM6CiAgICAgICAgICAgIGlmIHNlbGYuZ2V0X3NldHRpbmdzX2VudHJ5KG0pIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgc2VsZi5zZXRfc2V0dGluZ3NfZW50cnkobSwgTm9uZSkgIAoKCiAgICAgICAgIyBBREQgU09NRSBERUZBVUxUIFZBTFVFUyBGUk9NIENPTkZJRwoKICAgICAgICBpZiBzZWxmLmdldF9zZXR0aW5nc19lbnRyeShTRVRUSU5HU19FTlRSSUVTLk5FVFdPUktfV0lGSV9TU0lEKSBpcyBOb25lOgogICAgICAgICAgICBzZWxmLnNldF9zZXR0aW5nc19lbnRyeShTRVRUSU5HU19FTlRSSUVTLk5FVFdPUktfV0lGSV9TU0lELCBjb25maWcuQ0ZHX05FVFdPUktfV0lGSV9TU0lEKQoKICAgICAgICBpZiBzZWxmLmdldF9zZXR0aW5nc19lbnRyeShTRVRUSU5HU19FTlRSSUVTLk5FVFdPUktfV0lGSV9QU0spIGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYuc2V0X3NldHRpbmdzX2VudHJ5KFNFVFRJTkdTX0VOVFJJRVMuTkVUV09SS19XSUZJX1BTSywgY29uZmlnLkNGR19ORVRXT1JLX1dJRklfUFNLKQoKICAgICAgICBpZiBzZWxmLmdldF9zZXR0aW5nc19lbnRyeShTRVRUSU5HU19FTlRSSUVTLk5FVFdPUktfQVBJX0VOUE9JTlQpIGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYuc2V0X3NldHRpbmdzX2VudHJ5KFNFVFRJTkdTX0VOVFJJRVMuTkVUV09SS19BUElfRU5QT0lOVCwgY29uZmlnLkNGR19ORVRXT1JLX0FQSV9FTkRQT0lOVCkKICAgICAgICAKCgogICAgZGVmIGdldF9zZXR0aW5nc19lbnRyeShzZWxmLCBfa2V5OiBzdHIpIC0+IGFueToKICAgICAgICBzZXR0aW5nc19kaWN0OiBkaWN0ID0ge30KICAgICAgICB3aXRoIG9wZW4oc2VsZi5SRUNJUEVfQkFTRV9ESVIgKyAiLyIgKyBzZWxmLlNFVFRJTkdTX0ZJTEVOQU1FLCAiciIpIGFzIGZpbGU6CiAgICAgICAgICAgIHNldHRpbmdzX2RpY3QgPSBqc29uLmxvYWRzKGZpbGUucmVhZCgpKQoKICAgICAgICBpZiBfa2V5IGluIHNldHRpbmdzX2RpY3Q6CiAgICAgICAgICAgIHJldHVybiBzZXR0aW5nc19kaWN0W19rZXldCgogICAgICAgIHByaW50KCJnZXRfc2V0dGluZ3NfZW50cnkga2V5OiB7fSBub3QgZm91bmQgaW4gc2V0dGluZ3MgZmlsZSIuZm9ybWF0KF9rZXkpKQogICAgICAgIHJldHVybiBOb25lCiAgICAKCgogICAgZGVmIHNldF9zZXR0aW5nc19lbnRyeShzZWxmLCBfa2V5OiBzdHIsIF92YWx1ZTogYW55KToKICAgICAgICBzZXR0aW5nc19kaWN0OiBkaWN0ID0ge30KCiAgICAgICAgd2l0aCBvcGVuKHNlbGYuUkVDSVBFX0JBU0VfRElSICsgIi8iICsgc2VsZi5TRVRUSU5HU19GSUxFTkFNRSwgInIiKSBhcyBmaWxlOgogICAgICAgICAgICBzZXR0aW5nc19kaWN0ID0ganNvbi5sb2FkcyhmaWxlLnJlYWQoKSkKCiAgICAgICAgc2V0dGluZ3NfZGljdFtzdHIoX2tleSldID0gX3ZhbHVlCgogICAgICAgIHdpdGggb3BlbihzZWxmLlJFQ0lQRV9CQVNFX0RJUiArICIvIiArIHNlbGYuU0VUVElOR1NfRklMRU5BTUUsICJ3IikgYXMgZmlsZToKICAgICAgICAgICAgZmlsZS53cml0ZShqc29uLmR1bXBzKHNldHRpbmdzX2RpY3QpKQoKCgogICAgZGVmIGdldF9zZXR0aW5nc19iYXNlX2ZvbGRlcl9wYXRoKHNlbGYpIC0+IHN0cjoKICAgICAgICByZXR1cm4gc2VsZi5SRUNJUEVfQkFTRV9ESVIKCiAgICBkZWYgbGlzdF9maWxlcyhzZWxmKSAtPltzdHJdOgogICAgICAgIHJldHVybiBvcy5saXN0ZGlyKHNlbGYuUkVDSVBFX0JBU0VfRElSKQoKCiAgICAKICAgIGRlZiB3cml0ZV9qc29uX2ZpbGUoc2VsZiwgX3BhdGg6c3RyLCBfZGljdF8wY29udGVudDogZGljdCk6CiAgICAgICAgIyBBREQgU0VUVElOR1MgU1RPUkFHRSBESVJFQ1RPUlkgSUYgUkVMIFBBVEggSVMgUkVRVUVTVEVECiAgICAgICAgaWYgbm90IF9wYXRoLnN0YXJ0c3dpdGgoIi8iKToKICAgICAgICAgICAgX3BhdGggPSBzZWxmLlJFQ0lQRV9CQVNFX0RJUiArICIvIiArIF9wYXRoCgogICAgICAgIHdpdGggb3BlbihfcGF0aCwgInciKSBhcyBmaWxlOgogICAgICAgICAgICBmaWxlLndyaXRlKGpzb24uZHVtcHMoIF9kaWN0XzBjb250ZW50KSkKCgogICAgZGVmIGxvYWRfanNvbl9maWxlKHNlbGYsIF9wYXRoOiBzdHIpIC0+IGRpY3Q6CgogICAgICAgIGlmIG5vdCBfcGF0aC5zdGFydHN3aXRoKCIvIik6CiAgICAgICAgICAgIF9wYXRoID0gc2VsZi5SRUNJUEVfQkFTRV9ESVIgKyAiLyIgKyBfcGF0aAogICAgICAgIAogICAgICAgICMgVE9ETyBBREQgQ0hFQ0sgRk9SIEZJTEUgRVhTSVRTCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZXR0aW5nc19kaWN0OiBkaWN0ID0ge30KICAgICAgICAgICAgd2l0aCBvcGVuKHNlbGYuUkVDSVBFX0JBU0VfRElSICsgIi8iICsgc2VsZi5TRVRUSU5HU19GSUxFTkFNRSwgInIiKSBhcyBmaWxlOgogICAgICAgICAgICAgICAgc2V0dGluZ3NfZGljdCA9IGpzb24ubG9hZHMoZmlsZS5yZWFkKCkpCiAgICAgICAgICAgIHJldHVybiBzZXR0aW5nc19kaWN0CiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgIyMjIyMjIyMjIyMjIyMjIyBTUEVDSUZJQyBTRVRUSU5HUyBMT0FESU5HIEZVQ1RJT05TICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCgogICAgZGVmIHNhdmVfc2NhbGVfY2FsaWJyYXRpb25fdmFsdWVzKHNlbGYsIF9zY2FsZV9jYWxpYnJhdGlvbl8wZzogZmxvYXQsIF9zY2FsZV9jYWxpYnJhdGlvbl81MGc6IGZsb2F0KToKICAgICAgICBzZWxmLnNldF9zZXR0aW5nc19lbnRyeShTRVRUSU5HU19FTlRSSUVTLlNDQUxFX0NBTElCUkFUSU9OX01JTl9WQUxVRSwgc3RyKF9zY2FsZV9jYWxpYnJhdGlvbl8wZykpCiAgICAgICAgc2VsZi5zZXRfc2V0dGluZ3NfZW50cnkoU0VUVElOR1NfRU5UUklFUy5TQ0FMRV9DQUxJQlJBVElPTl9NQVhfVkFMVUUsIHN0cihfc2NhbGVfY2FsaWJyYXRpb25fNTBnKSkKICAgICAgICBzZWxmLnNldF9zZXR0aW5nc19lbnRyeShTRVRUSU5HU19FTlRSSUVTLlNDQUxFX0NBTElCUkFUSU9OX0NBTElCUkFUSU9OX1dFSUdIVCwgc3RyKGNvbmZpZy5DRkdfQ0FMSUJSQVRJT05fV0VJR0hUX1dFSUdIVCkpCgogICAgICAgIHByaW50KCJzYXZlX3NjYWxlX2NhbGlicmF0aW9uX3ZhbHVlcyAoe30te30pIC8ge30iLmZvcm1hdChfc2NhbGVfY2FsaWJyYXRpb25fMGcsIF9zY2FsZV9jYWxpYnJhdGlvbl81MGcsIGNvbmZpZy5DRkdfQ0FMSUJSQVRJT05fV0VJR0hUX1dFSUdIVCkpCgoKICAgIAogICAgZGVmIGdldF9zY2FsZV9jYWxpYnJhdGlvbl9mYWN0b3Ioc2VsZik6CiAgICAgICAgc2NfbWluID0gMC4wCiAgICAgICAgc2NfZnVsbCA9IDUwMDAuMAogICAgICAgIHNjX3dlaWdodCA9IGNvbmZpZy5DRkdfQ0FMSUJSQVRJT05fV0VJR0hUX1dFSUdIVAogICAgICAgIHRyeToKICAgICAgICAgICAgc2NfbWluID0gZmxvYXQoc2VsZi5nZXRfc2V0dGluZ3NfZW50cnkoU0VUVElOR1NfRU5UUklFUy5TQ0FMRV9DQUxJQlJBVElPTl9NSU5fVkFMVUUpKQogICAgICAgICAgICBzY19mdWxsID0gZmxvYXQoc2VsZi5nZXRfc2V0dGluZ3NfZW50cnkoU0VUVElOR1NfRU5UUklFUy5TQ0FMRV9DQUxJQlJBVElPTl9NQVhfVkFMVUUpKQogICAgICAgICAgICBzY193ZWlnaHQgPSBmbG9hdChzZWxmLmdldF9zZXR0aW5nc19lbnRyeShTRVRUSU5HU19FTlRSSUVTLlNDQUxFX0NBTElCUkFUSU9OX0NBTElCUkFUSU9OX1dFSUdIVCkpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLnNhdmVfc2NhbGVfY2FsaWJyYXRpb25fdmFsdWVzKHNjX21pbiwgc2NfZnVsbCkKCgogICAgICAgIGNhbGlicmF0aW9uX2ZhY3RvciA9ICAoc2NfbWluLXNjX2Z1bGwpIC8gc2Nfd2VpZ2h0CiAgICAgICAgcHJpbnQoImdldF9zY2FsZV9jYWxpYnJhdGlvbl9mYWN0b3IgdXNpbmcgKHt9LXt9KSAvIHt9ID0ge30iLmZvcm1hdChzY19taW4sIHNjX2Z1bGwsIHNjX3dlaWdodCwgY2FsaWJyYXRpb25fZmFjdG9yKSkKICAgICAgICByZXR1cm4gY2FsaWJyYXRpb25fZmFjdG9y", "recipe_loader.py": "aW1wb3J0IG1hY2hpbmUNCmltcG9ydCBvcw0KaW1wb3J0IHRpbWUNCmltcG9ydCBqc29uDQoNCmZyb20gdWkgaW1wb3J0IHVpDQppbXBvcnQgY29uZmlnDQppbXBvcnQgaGVscGVyDQppbXBvcnQgZXhhbXBsZV9yZWNpcGVzDQppbXBvcnQgc2V0dGluZ3MNCmltcG9ydCByZWNpcGUNCmZyb20gc2luZ2xldG9uIGltcG9ydCBzaW5nbGV0b24NCg0KDQoNCkBzaW5nbGV0b24NCmNsYXNzIHJlY2lwZV9sb2FkZXI6DQogICAgDQogIA0KICAgDQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBwcmludCgicmVjaXBlX2xvYWRlcjogX19pbml0X18iKQ0KDQogICAgICAgIHNlbGYuY3JlYXRlX2luaXRpYWxfcmVjaXBlKCkNCiAgICAgICAgDQogICANCiAgICAgDQogICAgZGVmIGNyZWF0ZV9pbml0aWFsX3JlY2lwZShzZWxmKToNCiAgICAgICAgZm9yIGsgaW4gZXhhbXBsZV9yZWNpcGVzLkVYQU1QTEVfUkVDSVBFU19DT0xMRUNUSU9OOg0KICAgICAgICAgICAgc2V0dGluZ3Muc2V0dGluZ3MoKS53cml0ZV9qc29uX2ZpbGUoayArICIucmVjaXBlIiwgZXhhbXBsZV9yZWNpcGVzLkVYQU1QTEVfUkVDSVBFU19DT0xMRUNUSU9OW2tdKQ0KICAgICAgICAgICAgDQoNCiAgICBkZWYgbGlzdF9yZWNwaWVzKHNlbGYsIF9pbmNsdWRlX2Rlc2NyaXB0aW9uOiBib29sID0gRmFsc2UpIC0+IHR1cGxlW3N0ciwgc3RyLCBzdHJdOg0KICAgICAgICByZXMgPSBbXQ0KICAgICAgICBmb3IgZiBpbiBzZXR0aW5ncy5zZXR0aW5ncygpLmxpc3RfZmlsZXMoKToNCiAgICAgICAgICAgIGlmIGYuZW5kc3dpdGgoJy5yZWNpcGUnKToNCiAgICAgICAgICAgICAgICAjIGYgPSB0ZXF1aWxhX3N1bnJpc2UucmVjaXBlDQogICAgICAgICAgICAgICAgbmFtZTogc3RyID0gZi5yZXBsYWNlKCcucmVjaXBlJywgJycpLnJlcGxhY2UoJ18nLCAnICcpDQoNCiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogc3RyID0gIiINCg0KICAgICAgICAgICAgICAgIGlmIF9pbmNsdWRlX2Rlc2NyaXB0aW9uOg0KICAgICAgICAgICAgICAgICAgICByOiByZWNpcGUucmVjaXBlID0gc2VsZi5nZXRfcmVjaXBlX2J5X2ZpbGVuYW1lKGYpDQogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gci5nZXRfZGVzY3JpcHRpb24oKQ0KICAgICAgICAgICAgICAgICAgICBkZWwgcg0KDQogICAgICAgICAgICAgICAgcmVzLmFwcGVuZCgoZixuYW1lLCBkZXNjcmlwdGlvbikpDQogICAgICAgIHJldHVybiByZXMNCiAgICANCg0KDQogICAgZGVmIGdldF9yZWNpcGVfYnlfZmlsZW5hbWUoc2VsZiwgX2ZpbGVuYW1lOiBzdHIpIC0+IHJlY2lwZToNCiAgICAgICAgIA0KICAgICAgICBpZiAnLnJlY2lwZScgbm90IGluIF9maWxlbmFtZToNCiAgICAgICAgICAgIF9maWxlbmFtZSA9IF9maWxlbmFtZSArICIucmVjaXBlIg0KICAgICAgICAgICAgDQogICAgICAgIGlmIF9maWxlbmFtZSBub3QgaW4gc2V0dGluZ3Muc2V0dGluZ3MoKS5saXN0X2ZpbGVzKCk6DQogICAgICAgICAgICByZXR1cm4gcmVjaXBlLnJlY2lwZSgpDQogICAgICAgIA0KICAgICAgICBqc29uX3JlY2lwZSA9IHNldHRpbmdzLnNldHRpbmdzKCkubG9hZF9qc29uX2ZpbGUoX2ZpbGVuYW1lKQ0KICAgICAgICANCg0KDQogICAgICAgICMgVE9ETyBJTVBMRU1FTlQgTE9BREVSDQogICAgICAgIGlmIGpzb25fcmVjaXBlOg0KICAgICAgICAgICAgcGFzcw0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHJlY2lwZS5yZWNpcGUoKQ0KICAgIA0KICAgIA0K", "sdcard.py": "IiIiCk1pY3JvUHl0aG9uIGRyaXZlciBmb3IgU0QgY2FyZHMgdXNpbmcgU1BJIGJ1cy4KClJlcXVpcmVzIGFuIFNQSSBidXMgYW5kIGEgQ1MgcGluLiAgUHJvdmlkZXMgcmVhZGJsb2NrcyBhbmQgd3JpdGVibG9ja3MKbWV0aG9kcyBzbyB0aGUgZGV2aWNlIGNhbiBiZSBtb3VudGVkIGFzIGEgZmlsZXN5c3RlbS4KCkV4YW1wbGUgdXNhZ2Ugb24gcHlib2FyZDoKCiAgICBpbXBvcnQgcHliLCBzZGNhcmQsIG9zCiAgICBzZCA9IHNkY2FyZC5TRENhcmQocHliLlNQSSgxKSwgcHliLlBpbi5ib2FyZC5YNSkKICAgIHB5Yi5tb3VudChzZCwgJy9zZDInKQogICAgb3MubGlzdGRpcignLycpCgpFeGFtcGxlIHVzYWdlIG9uIEVTUDgyNjY6CgogICAgaW1wb3J0IG1hY2hpbmUsIHNkY2FyZCwgb3MKICAgIHNkID0gc2RjYXJkLlNEQ2FyZChtYWNoaW5lLlNQSSgxKSwgbWFjaGluZS5QaW4oMTUpKQogICAgb3MubW91bnQoc2QsICcvc2QnKQogICAgb3MubGlzdGRpcignLycpCgoiIiIKCmZyb20gbWljcm9weXRob24gaW1wb3J0IGNvbnN0CmltcG9ydCB0aW1lCgoKX0NNRF9USU1FT1VUID0gY29uc3QoMTAwKQoKX1IxX0lETEVfU1RBVEUgPSBjb25zdCgxIDw8IDApCiMgUjFfRVJBU0VfUkVTRVQgPSBjb25zdCgxIDw8IDEpCl9SMV9JTExFR0FMX0NPTU1BTkQgPSBjb25zdCgxIDw8IDIpCiMgUjFfQ09NX0NSQ19FUlJPUiA9IGNvbnN0KDEgPDwgMykKIyBSMV9FUkFTRV9TRVFVRU5DRV9FUlJPUiA9IGNvbnN0KDEgPDwgNCkKIyBSMV9BRERSRVNTX0VSUk9SID0gY29uc3QoMSA8PCA1KQojIFIxX1BBUkFNRVRFUl9FUlJPUiA9IGNvbnN0KDEgPDwgNikKX1RPS0VOX0NNRDI1ID0gY29uc3QoMHhGQykKX1RPS0VOX1NUT1BfVFJBTiA9IGNvbnN0KDB4RkQpCl9UT0tFTl9EQVRBID0gY29uc3QoMHhGRSkKCgpjbGFzcyBTRENhcmQ6CiAgICBkZWYgX19pbml0X18oc2VsZiwgc3BpLCBjcywgYmF1ZHJhdGU9MTMyMDAwMCk6CiAgICAgICAgc2VsZi5zcGkgPSBzcGkKICAgICAgICBzZWxmLmNzID0gY3MKCiAgICAgICAgc2VsZi5jbWRidWYgPSBieXRlYXJyYXkoNikKICAgICAgICBzZWxmLmR1bW15YnVmID0gYnl0ZWFycmF5KDUxMikKICAgICAgICBzZWxmLnRva2VuYnVmID0gYnl0ZWFycmF5KDEpCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoNTEyKToKICAgICAgICAgICAgc2VsZi5kdW1teWJ1ZltpXSA9IDB4RkYKICAgICAgICBzZWxmLmR1bW15YnVmX21lbW9yeXZpZXcgPSBtZW1vcnl2aWV3KHNlbGYuZHVtbXlidWYpCgogICAgICAgICMgaW5pdGlhbGlzZSB0aGUgY2FyZAogICAgICAgIHNlbGYuaW5pdF9jYXJkKGJhdWRyYXRlKQoKICAgIGRlZiBpbml0X3NwaShzZWxmLCBiYXVkcmF0ZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBtYXN0ZXIgPSBzZWxmLnNwaS5NQVNURVIKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgICMgb24gRVNQODI2NgogICAgICAgICAgICBzZWxmLnNwaS5pbml0KGJhdWRyYXRlPWJhdWRyYXRlLCBwaGFzZT0wLCBwb2xhcml0eT0wKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgb24gcHlib2FyZAogICAgICAgICAgICBzZWxmLnNwaS5pbml0KG1hc3RlciwgYmF1ZHJhdGU9YmF1ZHJhdGUsIHBoYXNlPTAsIHBvbGFyaXR5PTApCgogICAgZGVmIGluaXRfY2FyZChzZWxmLCBiYXVkcmF0ZSk6CiAgICAgICAgIyBpbml0IENTIHBpbgogICAgICAgIHNlbGYuY3MuaW5pdChzZWxmLmNzLk9VVCwgdmFsdWU9MSkKCiAgICAgICAgIyBpbml0IFNQSSBidXM7IHVzZSBsb3cgZGF0YSByYXRlIGZvciBpbml0aWFsaXNhdGlvbgogICAgICAgIHNlbGYuaW5pdF9zcGkoMTAwMDAwKQoKICAgICAgICAjIGNsb2NrIGNhcmQgYXQgbGVhc3QgMTAwIGN5Y2xlcyB3aXRoIGNzIGhpZ2gKICAgICAgICBmb3IgaSBpbiByYW5nZSgxNik6CiAgICAgICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCgogICAgICAgICMgQ01EMDogaW5pdCBjYXJkOyBzaG91bGQgcmV0dXJuIF9SMV9JRExFX1NUQVRFIChhbGxvdyA1IGF0dGVtcHRzKQogICAgICAgIGZvciBfIGluIHJhbmdlKDUpOgogICAgICAgICAgICBpZiBzZWxmLmNtZCgwLCAwLCAweDk1KSA9PSBfUjFfSURMRV9TVEFURToKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgT1NFcnJvcigibm8gU0QgY2FyZCIpCgogICAgICAgICMgQ01EODogZGV0ZXJtaW5lIGNhcmQgdmVyc2lvbgogICAgICAgIHIgPSBzZWxmLmNtZCg4LCAweDAxQUEsIDB4ODcsIDQpCiAgICAgICAgaWYgciA9PSBfUjFfSURMRV9TVEFURToKICAgICAgICAgICAgc2VsZi5pbml0X2NhcmRfdjIoKQogICAgICAgIGVsaWYgciA9PSAoX1IxX0lETEVfU1RBVEUgfCBfUjFfSUxMRUdBTF9DT01NQU5EKToKICAgICAgICAgICAgc2VsZi5pbml0X2NhcmRfdjEoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJhaXNlIE9TRXJyb3IoImNvdWxkbid0IGRldGVybWluZSBTRCBjYXJkIHZlcnNpb24iKQoKICAgICAgICAjIGdldCB0aGUgbnVtYmVyIG9mIHNlY3RvcnMKICAgICAgICAjIENNRDk6IHJlc3BvbnNlIFIyIChSMSBieXRlICsgMTYtYnl0ZSBibG9jayByZWFkKQogICAgICAgIGlmIHNlbGYuY21kKDksIDAsIDAsIDAsIEZhbHNlKSAhPSAwOgogICAgICAgICAgICByYWlzZSBPU0Vycm9yKCJubyByZXNwb25zZSBmcm9tIFNEIGNhcmQiKQogICAgICAgIGNzZCA9IGJ5dGVhcnJheSgxNikKICAgICAgICBzZWxmLnJlYWRpbnRvKGNzZCkKICAgICAgICBpZiBjc2RbMF0gJiAweEMwID09IDB4NDA6ICAjIENTRCB2ZXJzaW9uIDIuMAogICAgICAgICAgICBzZWxmLnNlY3RvcnMgPSAoKGNzZFs4XSA8PCA4IHwgY3NkWzldKSArIDEpICogMTAyNAogICAgICAgIGVsaWYgY3NkWzBdICYgMHhDMCA9PSAweDAwOiAgIyBDU0QgdmVyc2lvbiAxLjAgKG9sZCwgPD0yR0IpCiAgICAgICAgICAgIGNfc2l6ZSA9IChjc2RbNl0gJiAwYjExKSA8PCAxMCB8IGNzZFs3XSA8PCAyIHwgY3NkWzhdID4+IDYKICAgICAgICAgICAgY19zaXplX211bHQgPSAoY3NkWzldICYgMGIxMSkgPDwgMSB8IGNzZFsxMF0gPj4gNwogICAgICAgICAgICByZWFkX2JsX2xlbiA9IGNzZFs1XSAmIDBiMTExMQogICAgICAgICAgICBjYXBhY2l0eSA9IChjX3NpemUgKyAxKSAqICgyICoqIChjX3NpemVfbXVsdCArIDIpKSAqICgyKipyZWFkX2JsX2xlbikKICAgICAgICAgICAgc2VsZi5zZWN0b3JzID0gY2FwYWNpdHkgLy8gNTEyCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgT1NFcnJvcigiU0QgY2FyZCBDU0QgZm9ybWF0IG5vdCBzdXBwb3J0ZWQiKQogICAgICAgICMgcHJpbnQoJ3NlY3RvcnMnLCBzZWxmLnNlY3RvcnMpCgogICAgICAgICMgQ01EMTY6IHNldCBibG9jayBsZW5ndGggdG8gNTEyIGJ5dGVzCiAgICAgICAgaWYgc2VsZi5jbWQoMTYsIDUxMiwgMCkgIT0gMDoKICAgICAgICAgICAgcmFpc2UgT1NFcnJvcigiY2FuJ3Qgc2V0IDUxMiBibG9jayBzaXplIikKCiAgICAgICAgIyBzZXQgdG8gaGlnaCBkYXRhIHJhdGUgbm93IHRoYXQgaXQncyBpbml0aWFsaXNlZAogICAgICAgIHNlbGYuaW5pdF9zcGkoYmF1ZHJhdGUpCgogICAgZGVmIGluaXRfY2FyZF92MShzZWxmKToKICAgICAgICBmb3IgaSBpbiByYW5nZShfQ01EX1RJTUVPVVQpOgogICAgICAgICAgICB0aW1lLnNsZWVwX21zKDUwKQogICAgICAgICAgICBzZWxmLmNtZCg1NSwgMCwgMCkKICAgICAgICAgICAgaWYgc2VsZi5jbWQoNDEsIDAsIDApID09IDA6CiAgICAgICAgICAgICAgICAjIFNEU0MgY2FyZCwgdXNlcyBieXRlIGFkZHJlc3NpbmcgaW4gcmVhZC93cml0ZS9lcmFzZSBjb21tYW5kcwogICAgICAgICAgICAgICAgc2VsZi5jZHYgPSA1MTIKICAgICAgICAgICAgICAgICMgcHJpbnQoIltTRENhcmRdIHYxIGNhcmQiKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgcmFpc2UgT1NFcnJvcigidGltZW91dCB3YWl0aW5nIGZvciB2MSBjYXJkIikKCiAgICBkZWYgaW5pdF9jYXJkX3YyKHNlbGYpOgogICAgICAgIGZvciBpIGluIHJhbmdlKF9DTURfVElNRU9VVCk6CiAgICAgICAgICAgIHRpbWUuc2xlZXBfbXMoNTApCiAgICAgICAgICAgIHNlbGYuY21kKDU4LCAwLCAwLCA0KQogICAgICAgICAgICBzZWxmLmNtZCg1NSwgMCwgMCkKICAgICAgICAgICAgaWYgc2VsZi5jbWQoNDEsIDB4NDAwMDAwMDAsIDApID09IDA6CiAgICAgICAgICAgICAgICBzZWxmLmNtZCg1OCwgMCwgMCwgLTQpICAjIDQtYnl0ZSByZXNwb25zZSwgbmVnYXRpdmUgbWVhbnMga2VlcCB0aGUgZmlyc3QgYnl0ZQogICAgICAgICAgICAgICAgb2NyID0gc2VsZi50b2tlbmJ1ZlswXSAgIyBnZXQgZmlyc3QgYnl0ZSBvZiByZXNwb25zZSwgd2hpY2ggaXMgT0NSCiAgICAgICAgICAgICAgICBpZiBub3Qgb2NyICYgMHg0MDoKICAgICAgICAgICAgICAgICAgICAjIFNEU0MgY2FyZCwgdXNlcyBieXRlIGFkZHJlc3NpbmcgaW4gcmVhZC93cml0ZS9lcmFzZSBjb21tYW5kcwogICAgICAgICAgICAgICAgICAgIHNlbGYuY2R2ID0gNTEyCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICMgU0RIQy9TRFhDIGNhcmQsIHVzZXMgYmxvY2sgYWRkcmVzc2luZyBpbiByZWFkL3dyaXRlL2VyYXNlIGNvbW1hbmRzCiAgICAgICAgICAgICAgICAgICAgc2VsZi5jZHYgPSAxCiAgICAgICAgICAgICAgICAjIHByaW50KCJbU0RDYXJkXSB2MiBjYXJkIikKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgIHJhaXNlIE9TRXJyb3IoInRpbWVvdXQgd2FpdGluZyBmb3IgdjIgY2FyZCIpCgogICAgZGVmIGNtZChzZWxmLCBjbWQsIGFyZywgY3JjLCBmaW5hbD0wLCByZWxlYXNlPVRydWUsIHNraXAxPUZhbHNlKToKICAgICAgICBzZWxmLmNzKDApCgogICAgICAgICMgY3JlYXRlIGFuZCBzZW5kIHRoZSBjb21tYW5kCiAgICAgICAgYnVmID0gc2VsZi5jbWRidWYKICAgICAgICBidWZbMF0gPSAweDQwIHwgY21kCiAgICAgICAgYnVmWzFdID0gYXJnID4+IDI0CiAgICAgICAgYnVmWzJdID0gYXJnID4+IDE2CiAgICAgICAgYnVmWzNdID0gYXJnID4+IDgKICAgICAgICBidWZbNF0gPSBhcmcKICAgICAgICBidWZbNV0gPSBjcmMKICAgICAgICBzZWxmLnNwaS53cml0ZShidWYpCgogICAgICAgIGlmIHNraXAxOgogICAgICAgICAgICBzZWxmLnNwaS5yZWFkaW50byhzZWxmLnRva2VuYnVmLCAweEZGKQoKICAgICAgICAjIHdhaXQgZm9yIHRoZSByZXNwb25zZSAocmVzcG9uc2VbN10gPT0gMCkKICAgICAgICBmb3IgaSBpbiByYW5nZShfQ01EX1RJTUVPVVQpOgogICAgICAgICAgICBzZWxmLnNwaS5yZWFkaW50byhzZWxmLnRva2VuYnVmLCAweEZGKQogICAgICAgICAgICByZXNwb25zZSA9IHNlbGYudG9rZW5idWZbMF0KICAgICAgICAgICAgaWYgbm90IChyZXNwb25zZSAmIDB4ODApOgogICAgICAgICAgICAgICAgIyB0aGlzIGNvdWxkIGJlIGEgYmlnLWVuZGlhbiBpbnRlZ2VyIHRoYXQgd2UgYXJlIGdldHRpbmcgaGVyZQogICAgICAgICAgICAgICAgIyBpZiBmaW5hbDwwIHRoZW4gc3RvcmUgdGhlIGZpcnN0IGJ5dGUgdG8gdG9rZW5idWYgYW5kIGRpc2NhcmQgdGhlIHJlc3QKICAgICAgICAgICAgICAgIGlmIGZpbmFsIDwgMDoKICAgICAgICAgICAgICAgICAgICBzZWxmLnNwaS5yZWFkaW50byhzZWxmLnRva2VuYnVmLCAweEZGKQogICAgICAgICAgICAgICAgICAgIGZpbmFsID0gLTEgLSBmaW5hbAogICAgICAgICAgICAgICAgZm9yIGogaW4gcmFuZ2UoZmluYWwpOgogICAgICAgICAgICAgICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCiAgICAgICAgICAgICAgICBpZiByZWxlYXNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYuY3MoMSkKICAgICAgICAgICAgICAgICAgICBzZWxmLnNwaS53cml0ZShiIlx4ZmYiKQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlCgogICAgICAgICMgdGltZW91dAogICAgICAgIHNlbGYuY3MoMSkKICAgICAgICBzZWxmLnNwaS53cml0ZShiIlx4ZmYiKQogICAgICAgIHJldHVybiAtMQoKICAgIGRlZiByZWFkaW50byhzZWxmLCBidWYpOgogICAgICAgIHNlbGYuY3MoMCkKCiAgICAgICAgIyByZWFkIHVudGlsIHN0YXJ0IGJ5dGUgKDB4ZmYpCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoX0NNRF9USU1FT1VUKToKICAgICAgICAgICAgc2VsZi5zcGkucmVhZGludG8oc2VsZi50b2tlbmJ1ZiwgMHhGRikKICAgICAgICAgICAgaWYgc2VsZi50b2tlbmJ1ZlswXSA9PSBfVE9LRU5fREFUQToKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIHRpbWUuc2xlZXBfbXMoMSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLmNzKDEpCiAgICAgICAgICAgIHJhaXNlIE9TRXJyb3IoInRpbWVvdXQgd2FpdGluZyBmb3IgcmVzcG9uc2UiKQoKICAgICAgICAjIHJlYWQgZGF0YQogICAgICAgIG12ID0gc2VsZi5kdW1teWJ1Zl9tZW1vcnl2aWV3CiAgICAgICAgaWYgbGVuKGJ1ZikgIT0gbGVuKG12KToKICAgICAgICAgICAgbXYgPSBtdls6IGxlbihidWYpXQogICAgICAgIHNlbGYuc3BpLndyaXRlX3JlYWRpbnRvKG12LCBidWYpCgogICAgICAgICMgcmVhZCBjaGVja3N1bQogICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCiAgICAgICAgc2VsZi5zcGkud3JpdGUoYiJceGZmIikKCiAgICAgICAgc2VsZi5jcygxKQogICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCgogICAgZGVmIHdyaXRlKHNlbGYsIHRva2VuLCBidWYpOgogICAgICAgIHNlbGYuY3MoMCkKCiAgICAgICAgIyBzZW5kOiBzdGFydCBvZiBibG9jaywgZGF0YSwgY2hlY2tzdW0KICAgICAgICBzZWxmLnNwaS5yZWFkKDEsIHRva2VuKQogICAgICAgIHNlbGYuc3BpLndyaXRlKGJ1ZikKICAgICAgICBzZWxmLnNwaS53cml0ZShiIlx4ZmYiKQogICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCgogICAgICAgICMgY2hlY2sgdGhlIHJlc3BvbnNlCiAgICAgICAgaWYgKHNlbGYuc3BpLnJlYWQoMSwgMHhGRilbMF0gJiAweDFGKSAhPSAweDA1OgogICAgICAgICAgICBzZWxmLmNzKDEpCiAgICAgICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCiAgICAgICAgICAgIHJldHVybgoKICAgICAgICAjIHdhaXQgZm9yIHdyaXRlIHRvIGZpbmlzaAogICAgICAgIHdoaWxlIHNlbGYuc3BpLnJlYWQoMSwgMHhGRilbMF0gPT0gMDoKICAgICAgICAgICAgcGFzcwoKICAgICAgICBzZWxmLmNzKDEpCiAgICAgICAgc2VsZi5zcGkud3JpdGUoYiJceGZmIikKCiAgICBkZWYgd3JpdGVfdG9rZW4oc2VsZiwgdG9rZW4pOgogICAgICAgIHNlbGYuY3MoMCkKICAgICAgICBzZWxmLnNwaS5yZWFkKDEsIHRva2VuKQogICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCiAgICAgICAgIyB3YWl0IGZvciB3cml0ZSB0byBmaW5pc2gKICAgICAgICB3aGlsZSBzZWxmLnNwaS5yZWFkKDEsIDB4RkYpWzBdID09IDB4MDA6CiAgICAgICAgICAgIHBhc3MKCiAgICAgICAgc2VsZi5jcygxKQogICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCgogICAgZGVmIHJlYWRibG9ja3Moc2VsZiwgYmxvY2tfbnVtLCBidWYpOgogICAgICAgICMgd29ya2Fyb3VuZCBmb3Igc2hhcmVkIGJ1cywgcmVxdWlyZWQgZm9yIChhdCBsZWFzdCkgc29tZSBLaW5nc3RvbgogICAgICAgICMgZGV2aWNlcywgZW5zdXJlIE1PU0kgaXMgaGlnaCBiZWZvcmUgc3RhcnRpbmcgdHJhbnNhY3Rpb24KICAgICAgICBzZWxmLnNwaS53cml0ZShiIlx4ZmYiKQoKICAgICAgICBuYmxvY2tzID0gbGVuKGJ1ZikgLy8gNTEyCiAgICAgICAgYXNzZXJ0IG5ibG9ja3MgYW5kIG5vdCBsZW4oYnVmKSAlIDUxMiwgIkJ1ZmZlciBsZW5ndGggaXMgaW52YWxpZCIKICAgICAgICBpZiBuYmxvY2tzID09IDE6CiAgICAgICAgICAgICMgQ01EMTc6IHNldCByZWFkIGFkZHJlc3MgZm9yIHNpbmdsZSBibG9jawogICAgICAgICAgICBpZiBzZWxmLmNtZCgxNywgYmxvY2tfbnVtICogc2VsZi5jZHYsIDAsIHJlbGVhc2U9RmFsc2UpICE9IDA6CiAgICAgICAgICAgICAgICAjIHJlbGVhc2UgdGhlIGNhcmQKICAgICAgICAgICAgICAgIHNlbGYuY3MoMSkKICAgICAgICAgICAgICAgIHJhaXNlIE9TRXJyb3IoNSkgICMgRUlPCiAgICAgICAgICAgICMgcmVjZWl2ZSB0aGUgZGF0YSBhbmQgcmVsZWFzZSBjYXJkCiAgICAgICAgICAgIHNlbGYucmVhZGludG8oYnVmKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgQ01EMTg6IHNldCByZWFkIGFkZHJlc3MgZm9yIG11bHRpcGxlIGJsb2NrcwogICAgICAgICAgICBpZiBzZWxmLmNtZCgxOCwgYmxvY2tfbnVtICogc2VsZi5jZHYsIDAsIHJlbGVhc2U9RmFsc2UpICE9IDA6CiAgICAgICAgICAgICAgICAjIHJlbGVhc2UgdGhlIGNhcmQKICAgICAgICAgICAgICAgIHNlbGYuY3MoMSkKICAgICAgICAgICAgICAgIHJhaXNlIE9TRXJyb3IoNSkgICMgRUlPCiAgICAgICAgICAgIG9mZnNldCA9IDAKICAgICAgICAgICAgbXYgPSBtZW1vcnl2aWV3KGJ1ZikKICAgICAgICAgICAgd2hpbGUgbmJsb2NrczoKICAgICAgICAgICAgICAgICMgcmVjZWl2ZSB0aGUgZGF0YSBhbmQgcmVsZWFzZSBjYXJkCiAgICAgICAgICAgICAgICBzZWxmLnJlYWRpbnRvKG12W29mZnNldCA6IG9mZnNldCArIDUxMl0pCiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNTEyCiAgICAgICAgICAgICAgICBuYmxvY2tzIC09IDEKICAgICAgICAgICAgaWYgc2VsZi5jbWQoMTIsIDAsIDB4RkYsIHNraXAxPVRydWUpOgogICAgICAgICAgICAgICAgcmFpc2UgT1NFcnJvcig1KSAgIyBFSU8KCiAgICBkZWYgd3JpdGVibG9ja3Moc2VsZiwgYmxvY2tfbnVtLCBidWYpOgogICAgICAgICMgd29ya2Fyb3VuZCBmb3Igc2hhcmVkIGJ1cywgcmVxdWlyZWQgZm9yIChhdCBsZWFzdCkgc29tZSBLaW5nc3RvbgogICAgICAgICMgZGV2aWNlcywgZW5zdXJlIE1PU0kgaXMgaGlnaCBiZWZvcmUgc3RhcnRpbmcgdHJhbnNhY3Rpb24KICAgICAgICBzZWxmLnNwaS53cml0ZShiIlx4ZmYiKQoKICAgICAgICBuYmxvY2tzLCBlcnIgPSBkaXZtb2QobGVuKGJ1ZiksIDUxMikKICAgICAgICBhc3NlcnQgbmJsb2NrcyBhbmQgbm90IGVyciwgIkJ1ZmZlciBsZW5ndGggaXMgaW52YWxpZCIKICAgICAgICBpZiBuYmxvY2tzID09IDE6CiAgICAgICAgICAgICMgQ01EMjQ6IHNldCB3cml0ZSBhZGRyZXNzIGZvciBzaW5nbGUgYmxvY2sKICAgICAgICAgICAgaWYgc2VsZi5jbWQoMjQsIGJsb2NrX251bSAqIHNlbGYuY2R2LCAwKSAhPSAwOgogICAgICAgICAgICAgICAgcmFpc2UgT1NFcnJvcig1KSAgIyBFSU8KCiAgICAgICAgICAgICMgc2VuZCB0aGUgZGF0YQogICAgICAgICAgICBzZWxmLndyaXRlKF9UT0tFTl9EQVRBLCBidWYpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBDTUQyNTogc2V0IHdyaXRlIGFkZHJlc3MgZm9yIGZpcnN0IGJsb2NrCiAgICAgICAgICAgIGlmIHNlbGYuY21kKDI1LCBibG9ja19udW0gKiBzZWxmLmNkdiwgMCkgIT0gMDoKICAgICAgICAgICAgICAgIHJhaXNlIE9TRXJyb3IoNSkgICMgRUlPCiAgICAgICAgICAgICMgc2VuZCB0aGUgZGF0YQogICAgICAgICAgICBvZmZzZXQgPSAwCiAgICAgICAgICAgIG12ID0gbWVtb3J5dmlldyhidWYpCiAgICAgICAgICAgIHdoaWxlIG5ibG9ja3M6CiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKF9UT0tFTl9DTUQyNSwgbXZbb2Zmc2V0IDogb2Zmc2V0ICsgNTEyXSkKICAgICAgICAgICAgICAgIG9mZnNldCArPSA1MTIKICAgICAgICAgICAgICAgIG5ibG9ja3MgLT0gMQogICAgICAgICAgICBzZWxmLndyaXRlX3Rva2VuKF9UT0tFTl9TVE9QX1RSQU4pCgogICAgZGVmIGlvY3RsKHNlbGYsIG9wLCBhcmcpOgogICAgICAgIGlmIG9wID09IDQ6ICAjIGdldCBudW1iZXIgb2YgYmxvY2tzCiAgICAgICAgICAgIHJldHVybiBzZWxmLnNlY3RvcnMKICAgICAgICBpZiBvcCA9PSA1OiAgIyBnZXQgYmxvY2sgc2l6ZSBpbiBieXRlcwogICAgICAgICAgICByZXR1cm4gNTEy", "mmb_display.py": "aW1wb3J0IGNvbmZpZwppbXBvcnQgbWFjaGluZQoKCmNsYXNzIG1tYl9kaXNwbGF5KCk6CgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGRpc3BsYXlfaW5zdGFuY2VfY3JlYXRvcigpOgogICAgICAgICAgICAgICAgICAgCiAgICAgICAgaWYgY29uZmlnLkNGR19ESVNQTEFZX1RZUEUgPT0gInNoMTEwNiI6CiAgICAgICAgICAgIGltcG9ydCBzaDExMDYKICAgICAgICAgICAgaTJjID0gbWFjaGluZS5JMkMoY29uZmlnLkNGR19PTEVEX0kyQ0lOU1RBTkNFLCBzY2w9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NDTF9QSU4pLCBzZGE9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NEQV9QSU4pLCBmcmVxPTQwMDAwMCkKICAgICAgICAgICAgZGlzcCA9IHNoMTEwNi5TSDExMDZfSTJDKGNvbmZpZy5TQ1JfV0lEVEgsIGNvbmZpZy5TQ1JfSEVJR0hULCBpMmMsIE5vbmUsIGNvbmZpZy5DRkdfT0xFRF9BRERSKQogICAgICAgICAgICBkaXNwLnNsZWVwKEZhbHNlKQogICAgICAgICAgICByZXR1cm4gZGlzcAoKICAgICAgICBlbGlmIGNvbmZpZy5DRkdfRElTUExBWV9UWVBFID09ICJzc2QxMzA2IjoKICAgICAgICAgICAgaW1wb3J0IHNzZDEzMDYKICAgICAgICAgICAgaTJjID0gbWFjaGluZS5JMkMoY29uZmlnLkNGR19PTEVEX0kyQ0lOU1RBTkNFLCBzY2w9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NDTF9QSU4pLCBzZGE9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NEQV9QSU4pLCBmcmVxPTQwMDAwMCkKICAgICAgICAgICAgZGlzcCA9IHNzZDEzMDYuU1NEMTMwNl9JMkMoY29uZmlnLlNDUl9XSURUSCwgY29uZmlnLlNDUl9IRUlHSFQsIGkyYywgY29uZmlnLkNGR19PTEVEX0FERFIpCiAgICAgICAgICAgIHJldHVybiBkaXNwCiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICAKCiAgICAKICAgIGRlZiBfX2luaXRfXyhzZWxmKSAtPiBOb25lOgogICAgICAgIHBhc3MKCiAgICBkZWYgcGl4ZWwoc2VsZiwgeCwgeSwgdmFsdWUpOgogICAgICAgIHBhc3MKIAogICAgZGVmIHNob3coKToKICAgICAgICBwYXNzCiAgICAgIAogICAgZGVmIGZpbGxfcmVjdChzZWxmLCB4LCB5LCB3LCBoLCB2KToKICAgICAgICBwYXNzCiAgICAKICAgIGRlZiBwcmludChzZWxmLCBfc3RyKToKICAgICAgICBwYXNzCgogICAgZGVmIHdyaXRlKHNlbGYsIF9zdHIpOgogICAgICAgIHBhc3MKICAgIAogICAgZGVmIGVyYXNlKHNlbGYpOgogICAgICAgIHBhc3MKCiAgICBkZWYgdGV4dChzZWxmLCB0ZXh0LCB4LCB5LCBjb2xvcj0xKToKICAgICAgICBwYXNz", "menu_entry_hardwaretest.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSBtZW51X21hbmFnZXIgaW1wb3J0IG1lbnVfbWFuYWdlcgpjbGFzcyBtZW51X2VudHJ5X2hhcmR3YXJldGVzdChtZW51X2VudHJ5Lm1lbnVfZW50cnkpOgoKCiAgIAogICAgbGFzdF90aW1lcl9ldmVudDogc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQgPSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCgpCiAgICBsYXN0X3NjYWxlX2V2ZW50OiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCA9IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kKCkKICAgIGxhc3RfdXNlcl9ldmVudDogc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQgPSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCgpCgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oIkhBUkRXQVJFIFRFU1QiLCAiVGVzdHMgdGhlIGludGVybmFsIGhhcmR3YXJlIikKCiAgICBkZWYgcHJldmlldyhzZWxmKToKICAgICAgICBwcmludCgicHJldmlldyBje30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIHVpKCkuc2hvd19yZWNpcGVfaW5mb3JtYXRpb24oc2VsZi5uYW1lLCBzZWxmLmRlc2NyaXB0aW9uKQoKCiAgICBkZWYgYWN0aXZhdGUoc2VsZik6CiAgICAgICAgcHJpbnQoImFjdGl2YXRlIHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLmNsZWFyKCkKICAgICAgICAKCgogICAgZGVmIHRlYXJkb3duKHNlbGYpOgogICAgICAgIHByaW50KCJ0ZWFyZG93biB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCgoKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CiAgICAgICAKICAgICAgICBpZiBfc3lzdGVtX2NvbW1hbmQudHlwZSA9PSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5DT01NQU5EX1RZUEVfVElNRVJfSVJROgogICAgICAgICAgIHNlbGYubGFzdF90aW1lcl9ldmVudCA9IF9zeXN0ZW1fY29tbWFuZAogICAgICAgIGVsaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX1NDQUxFX1ZBTFVFOgogICAgICAgICAgIHNlbGYubGFzdF9zY2FsZV9ldmVudCA9IF9zeXN0ZW1fY29tbWFuZAogICAgICAgIGVsaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX05BVklHQVRJT046CiAgICAgICAgICAgIHNlbGYubGFzdF91c2VyX2V2ZW50ID0gX3N5c3RlbV9jb21tYW5kCiAgICAgICAgICAgIAogICAgICAgIHVpKCkuc2hvd19tc2coInQ6e30gYTp7fSBiOnt9IHQ6e30gczp7fSIuZm9ybWF0KHNlbGYubGFzdF91c2VyX2V2ZW50LnR5cGUsIHNlbGYubGFzdF91c2VyX2V2ZW50LmFjdGlvbiwgc2VsZi5sYXN0X3VzZXJfZXZlbnQudmFsdWUsIHNlbGYubGFzdF90aW1lcl9ldmVudC52YWx1ZSwgc2VsZi5sYXN0X3NjYWxlX2V2ZW50LnZhbHVlKSk=", "menu_manager.py": "aW1wb3J0IG1lbnVfZW50cnkKaW1wb3J0IHN5c3RlbV9jb21tYW5kCmltcG9ydCBsZWRyaW5nCmZyb20gc2luZ2xldG9uIGltcG9ydCBzaW5nbGV0b24KCgpAc2luZ2xldG9uCmNsYXNzIG1lbnVfbWFuYWdlcjoKCgogICAgTUVOVV9TVEFURV9JTkFDVElWRSA9IDAKICAgIE1FTlVfU1RBVEVfQUNUSVZFID0gMQoKICAgIG1lbnVfZW50aXJlczogW21lbnVfZW50cnkubWVudV9lbnRyeV0gPSBbXQoKICAgIGN1cnJlbnRfYWN0aXZlX2VudHJ5X2luZGV4OiBpbnQgPSAtMQogICAgY3VycmVudF9tZW51X3N0YXRlOiBpbnQgPSBNRU5VX1NUQVRFX0lOQUNUSVZFCgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHBhc3MKCiAgICAKICAgIGRlZiBhZGRfc3ViZW50cmllcyhzZWxmLCBfZW50cnk6IG1lbnVfZW50cnkubWVudV9lbnRyeSk6CgogICAgICAgIHNlbGYubWVudV9lbnRpcmVzLmFwcGVuZChfZW50cnkpCgogICAgICAgICMgVEhFIEZJUlNUIEVOVFJZIEFEREVEIElTIFRIRSBTVEFSVElORyBFTlRSWQogICAgICAgIGlmIHNlbGYuY3VycmVudF9hY3RpdmVfZW50cnlfaW5kZXggPCAwOgogICAgICAgICAgICBzZWxmLmN1cnJlbnRfYWN0aXZlX2VudHJ5X2luZGV4ID0gMAogICAgICAgICAgICBzZWxmLmRpc3BsYXlfcHJldmlldygpCiAgICAgICAgICAgIAogICAgCgoKCiAgICBkZWYgZ2V0X21lbnVfZW50cnkoc2VsZikgLT4gbWVudV9lbnRyeS5tZW51X2VudHJ5OgogICAgICAgIGlmIHNlbGYuY3VycmVudF9hY3RpdmVfZW50cnlfaW5kZXggPCAwOgogICAgICAgICAgICBwcmludCgibm8gbWVudV9lbnRyaWVzIGFkZGVkID8iKQogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIGVsaWYgc2VsZi5jdXJyZW50X2FjdGl2ZV9lbnRyeV9pbmRleCA+PSBsZW4oc2VsZi5tZW51X2VudGlyZXMpOgogICAgICAgICAgICBzZWxmLmN1cnJlbnRfYWN0aXZlX2VudHJ5X2luZGV4ID0gMAoKICAgICAgICByZXR1cm4gc2VsZi5tZW51X2VudGlyZXNbc2VsZi5jdXJyZW50X2FjdGl2ZV9lbnRyeV9pbmRleF0KCgogICAgZGVmIGV4aXRfY3VycmVudF9tZW51KHNlbGYpOgogICAgICAgIGlmIHNlbGYuZ2V0X21lbnVfZW50cnkoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5nZXRfbWVudV9lbnRyeSgpLnRlYXJkb3duKCkKICAgICAgICAgICAgc2VsZi5nZXRfbWVudV9lbnRyeSgpLnByZXZpZXcoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuY3VycmVudF9hY3RpdmVfZW50cnlfaW5kZXggPSAwCgogICAgICAgIHNlbGYuY3VycmVudF9tZW51X3N0YXRlID0gc2VsZi5NRU5VX1NUQVRFX0lOQUNUSVZFCgoKICAgIGRlZiBkaXNwbGF5X3ByZXZpZXcoc2VsZik6CiAgICAgICAgc2VsZi5nZXRfbWVudV9lbnRyeSgpLnByZXZpZXcoKQoKICAgICAgICAjIE9QVElPTkFMIERJU1BMQVkgTEVEIFNUQVRFCiAgICAgICAgcGVyY2VudGFnZTogZmxvYXQgPSAoc2VsZi5jdXJyZW50X2FjdGl2ZV9lbnRyeV9pbmRleCArMSkvIChsZW4oc2VsZi5tZW51X2VudGlyZXMpKiAxLjApCiAgICAgICAgbGVkcmluZy5sZWRyaW5nKCkuc2V0X25lb3BpeGVsX3BlcmNlbnRhZ2UocGVyY2VudGFnZSwgbGVkcmluZy5sZWRyaW5nKCkuQ09MT1JfUFJFU0VUX0hTVl9IX19CTFVFLCBsZWRyaW5nLmxlZHJpbmcoKS5DT0xPUl9QUkVTRVRfSFNWX0hfX1BJTkssIGxlZHJpbmcubGVkcmluZygpLkNPTE9SX1BSRVNFVF9IU1ZfSF9fQkxBQ0ssIFRydWUpCiAgICAgICAgCiAgICBkZWYgcHJvY2Vzc191c2VyX2NvbW1hbmRzKHNlbGYsIF9zeXN0ZW1fY29tbWFuZDogc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQpOgogICAgICAgIGlmIHNlbGYuZ2V0X21lbnVfZW50cnkoKSBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4KICAgICAgICAKICAgICAgICAKICAgICAgICBpZiBzZWxmLmN1cnJlbnRfbWVudV9zdGF0ZSA9PSBzZWxmLk1FTlVfU1RBVEVfSU5BQ1RJVkU6CiAgICAgICAgICAgIGlmIF9zeXN0ZW1fY29tbWFuZC50eXBlID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLkNPTU1BTkRfVFlQRV9OQVZJR0FUSU9OOgoKICAgICAgICAgICAgICAgICMgU0NST0wgVEhPVUdIIE1FTlVTCiAgICAgICAgICAgICAgICBpZiBfc3lzdGVtX2NvbW1hbmQuYWN0aW9uID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLk5BVklHQVRJT05fTEVGVDoKICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRfYWN0aXZlX2VudHJ5X2luZGV4ID0gKHNlbGYuY3VycmVudF9hY3RpdmVfZW50cnlfaW5kZXggKyAxKSAlIGxlbihzZWxmLm1lbnVfZW50aXJlcykKICAgICAgICAgICAgICAgICAgICBwcmludChzZWxmLmN1cnJlbnRfYWN0aXZlX2VudHJ5X2luZGV4KQogICAgICAgICAgICAgICAgICAgIHNlbGYuZGlzcGxheV9wcmV2aWV3KCkKICAgICAgICAgICAgICAgIGVsaWYgX3N5c3RlbV9jb21tYW5kLmFjdGlvbiA9PSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5OQVZJR0FUSU9OX1JJR0hUOgogICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudF9hY3RpdmVfZW50cnlfaW5kZXggPSAoc2VsZi5jdXJyZW50X2FjdGl2ZV9lbnRyeV9pbmRleCAtIDEpICUgbGVuKHNlbGYubWVudV9lbnRpcmVzKQogICAgICAgICAgICAgICAgICAgIHNlbGYuZGlzcGxheV9wcmV2aWV3KCkKICAgICAgICAgICAgICAgICMgRU5URVIgTUVOVQogICAgICAgICAgICAgICAgZWxpZiBfc3lzdGVtX2NvbW1hbmQuYWN0aW9uID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLk5BVklHQVRJT05fRU5URVI6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5nZXRfbWVudV9lbnRyeSgpLmFjdGl2YXRlKCkKICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRfbWVudV9zdGF0ZSA9IHNlbGYuTUVOVV9TVEFURV9BQ1RJVkUKCiAgICAgICAgZWxpZiBzZWxmLmN1cnJlbnRfbWVudV9zdGF0ZSA9PSBzZWxmLk1FTlVfU1RBVEVfQUNUSVZFOgogICAgICAgICAgICBpZiBfc3lzdGVtX2NvbW1hbmQudHlwZSA9PSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5DT01NQU5EX1RZUEVfTkFWSUdBVElPTiBhbmQgX3N5c3RlbV9jb21tYW5kLmFjdGlvbiA9PSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5OQVZJR0FUSU9OX0VYSVQ6CiAgICAgICAgICAgICAgICAjIExFQVZFIE1FTlUKICAgICAgICAgICAgICAgIHNlbGYuZXhpdF9jdXJyZW50X21lbnUoKQogICAgICAgICAgICAjIEFMTCBPVEhFUiBJTlBVVCBXSUxMIEJFIFBBU1NFRCBUTyBUSEUgTUVOVSBFTlRSWSBJVFNFTEYKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuZ2V0X21lbnVfZW50cnkoKS51cGRhdGUoX3N5c3RlbV9jb21tYW5kKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuZXhpdF9jdXJyZW50X21lbnUoKSAgICAKCgogICAgZGVmIHByb2Nlc3Nfc3lzdGVtX2NvbW1hbmRzKHNlbGYsIF9zeXN0ZW1fY29tbWFuZDogc3lzdGVtX2NvbW1hbmQpOgogICAgICAgIGlmIHNlbGYuY3VycmVudF9tZW51X3N0YXRlID09IHNlbGYuTUVOVV9TVEFURV9BQ1RJVkU6CiAgICAgICAgICAgIHNlbGYuZ2V0X21lbnVfZW50cnkoKS51cGRhdGUoX3N5c3RlbV9jb21tYW5kKQo=", "Scales.py": "ZnJvbSBzaW5nbGV0b24gaW1wb3J0IHNpbmdsZXRvbg0KaW1wb3J0IHRpbWUNCmltcG9ydCBtYXRoDQoNCmltcG9ydCBoeDcxMQ0KaW1wb3J0IGNvbmZpZw0KaW1wb3J0IHNldHRpbmdzDQoNCg0KY2xhc3MgU2NhbGVzKGh4NzExLkhYNzExKToNCiAgICBkZWYgX19pbml0X18oc2VsZiwgZF9vdXQgPSA1LCBwZF9zY2sgPSAxMik6DQogICAgICAgIHN1cGVyKFNjYWxlcywgc2VsZikuX19pbml0X18oZF9vdXQsIHBkX3NjaykNCiAgICAgICAgc2VsZi5vZmZzZXQgPSAwDQoNCiAgICBkZWYgcmVzZXQoc2VsZik6DQogICAgICAgIHNlbGYucG93ZXJfb2ZmKCkNCiAgICAgICAgc2VsZi5wb3dlcl9vbigpDQoNCiAgICBkZWYgdGFyZShzZWxmKToNCiAgICAgICAgc2VsZi5vZmZzZXQgPSBzZWxmLnJlYWQoKQ0KDQogICAgZGVmIHJhd192YWx1ZShzZWxmKToNCiAgICAgICAgcmV0dXJuIHNlbGYucmVhZCgpIC0gc2VsZi5vZmZzZXQNCg0KICAgIGRlZiBzdGFibGVfcmF3X3ZhbHVlKHNlbGYsIHdpdGhvdXRfb2Zmc2V0OiBib29sID0gRmFsc2UsIHJlYWRzPTEwLCBkZWxheV91cz0xMCk6ICAgICANCiAgICAgICAgc3RhYmxlX3ZhbHVlcyA9IFtdDQogICAgICAgIGZvciBpIGluIHJhbmdlKHJlYWRzKToNCiAgICAgICAgICAgIGlmIHdpdGhvdXRfb2Zmc2V0Og0KICAgICAgICAgICAgICAgIHN0YWJsZV92YWx1ZXMuYXBwZW5kKHNlbGYucmVhZCgpKQ0KICAgICAgICAgICAgZWxzZTogICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBzdGFibGVfdmFsdWVzLmFwcGVuZChzZWxmLnJhd192YWx1ZSgpKQ0KICAgICAgICAgICAgdGltZS5zbGVlcF9tcygxMCkNCiAgICAgICAgDQogICAgICAgIHRhcmVfdmFsdWUgPSAwLjANCiAgICAgICAgZm9yIHYgaW4gc3RhYmxlX3ZhbHVlczoNCiAgICAgICAgICAgIHRhcmVfdmFsdWUgPSB0YXJlX3ZhbHVlICsgdg0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHRhcmVfdmFsdWUgLyByZWFkcw0KICAgIA0KIA0KICAgIGRlZiBzZXRfc2NhbGUoc2VsZiwgX3NjYWxlX2ZhY3RvcjogZmxvYXQpOg0KICAgICAgICBpZiBfc2NhbGVfZmFjdG9yIGlzIE5vbmUgb3IgX3NjYWxlX2ZhY3RvciA9PSAwLjA6DQogICAgICAgICAgICBfc2NhbGVfZmFjdG9yID0gMS4wDQogICAgICAgICAgICBwcmludCgic2V0IF9zY2FsZV9mYWN0b3IgdG8gMS4wIGR1ZSBwYXJhbWV0ZXIgX3NjYWxlX2ZhY3RvciBpcyBOb25lIG9yIFplcm8iKQ0KICAgICAgICBzZWxmLlNDQUxFX0ZBQ1RPUiA9IF9zY2FsZV9mYWN0b3INCiAgICAgICAgDQogICAgZGVmIGdldF91bml0KHNlbGYsIF9zdGFibGU6IGJvb2wgPSBGYWxzZSkgLT4gZmxvYXQ6DQogICAgICAgIGlmIHNlbGYuU0NBTEVfRkFDVE9SID09IDAuMDoNCiAgICAgICAgICAgIHNlbGYuU0NBTEVfRkFDVE9SID0gMS4wDQogICAgICAgICAgICANCiAgICAgICAgaWYgX3N0YWJsZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLnJhd192YWx1ZSgpIC8gc2VsZi5TQ0FMRV9GQUNUT1INCiAgICAgICAgDQogICAgICAgIHJldHVybiBzZWxmLnN0YWJsZV9yYXdfdmFsdWUoKSAvIHNlbGYuU0NBTEVfRkFDVE9SDQogICAgICAgIA0KDQpAc2luZ2xldG9uICAgICAgICANCmNsYXNzIFNjYWxlSW50ZXJmYWNlOg0KDQogICAgc2NhbGU6IFNjYWxlcyA9IE5vbmUNCiAgICBjYWxpYnJhdGlvbl9mYWN0b3I6IGZsb2F0ID0gMS4wDQogICAgY3VycmVudF90YXJlX3ZhbHVlOiBmbG9hdCA9IDANCiAgICBkZWYgX19pbml0X18oc2VsZik6DQogICAgICAgIHNlbGYuc2NhbGUgPSBTY2FsZXMoZF9vdXQ9Y29uZmlnLkNGR19IWDcxMV9ET1VUX1BJTiwgcGRfc2NrPWNvbmZpZy5DRkdfSFg3MTFfU0NLX1BJTikNCg0KICAgICAgICBzZWxmLmN1cnJlbnRfdGFyZV92YWx1ZSA9IDAuMA0KICAgICAgICBzZWxmLnJlbG9hZF9jYWxpYnJhdGlvbigpDQogICAgICAgIHNlbGYuc2NhbGUudGFyZSgpICMgSEFSRFdBUkUgVEFSRQ0KICAgICAgICBzZWxmLnRhcmUoKQ0KICAgIA0KICAgIGRlZiB0YXJlKHNlbGYpOg0KICAgICAgICBzZWxmLmN1cnJlbnRfdGFyZV92YWx1ZSA9IHNlbGYuZ2V0X3VudGFyZWRfd2VpZ2h0KCkNCg0KICAgIGRlZiByZWxvYWRfY2FsaWJyYXRpb24oc2VsZik6DQogICAgICAgIHNlbGYuY2FsaWJyYXRpb25fZmFjdG9yID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5nZXRfc2NhbGVfY2FsaWJyYXRpb25fZmFjdG9yKCkNCiAgICAgICAgcHJpbnQoImNhbGlicmF0aW9uX2ZhY3RvciB7fSIuZm9ybWF0KHNlbGYuY2FsaWJyYXRpb25fZmFjdG9yKSkNCiAgICAgICAgc2VsZi5zY2FsZS5zZXRfc2NhbGUoc2VsZi5jYWxpYnJhdGlvbl9mYWN0b3IpDQoNCiAgICBkZWYgZ2V0X3VudGFyZWRfd2VpZ2h0KHNlbGYpIC0+IGZsb2F0Og0KICAgICAgICB0cnk6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5zY2FsZS5nZXRfdW5pdChUcnVlKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICByZXR1cm4gMC4wDQoNCiAgICBkZWYgZ2V0X2N1cnJlbnRfd2VpZ2h0KHNlbGYpOg0KICAgICAgICByZXR1cm4gc2VsZi5nZXRfdW50YXJlZF93ZWlnaHQoKSAtIHNlbGYuY3VycmVudF90YXJlX3ZhbHVlDQo="}

# FOR DEBUGGING
ALWAYS_HARD_RESTORE: bool = False

RESTORE_IGNORED_FILES_LIST = ['static_modules', 'thridparty_libs', 'boot.py', 'lib']

def restore_filesystem(_basepath: str = "/", _override: bool = False, _erase: bool = False):
    import ubinascii
    import os

    if _erase:
        print("erase enabled")
        for f in os.listdir():
            if f in __file__:
                print("skipping {} to vaoid installer override".format(f))
                continue 
            
            # UGLY REWORK
            for n in RESTORE_IGNORED_FILES_LIST:
                if n in f:
                    print("skipping {} to vaoid installer override".format(f))
                    continue

            os.remove(f)

    for k in FILE_DATA:

        if k in os.listdir() and not _override:
            continue
        
        print(k)
        d = FILE_DATA[k]
        ubinascii.a2b_base64(d)

        with open(_basepath + "/" + k, "w") as file:
            file.write(ubinascii.a2b_base64(d))

    # CLEANUP
    del ubinascii
    del os


def restore():
    import machine
    import time
    RESTORE_BUTTON_PIN: int = 14
    RESTORE_LED_PIN: int = 25

    push_button_restore = machine.Pin(RESTORE_BUTTON_PIN, machine.Pin.IN, machine.Pin.PULL_UP)
    led_onboard = machine.Pin(RESTORE_LED_PIN, machine.Pin.OUT)

    if not push_button_restore.value() or ALWAYS_HARD_RESTORE:
        led_onboard.on()
        time.sleep(0.2)
        led_onboard.off()
        time.sleep(0.2)
        led_onboard.on()
        time.sleep(0.2)
        led_onboard.on()
        # RESTORE HARD OVERRIDE USER CHANGES
        restore_filesystem(_override=True, _erase=True)
        led_onboard.off()

    else:
        led_onboard.on()
        # RESTORE SOFT ONLY ADD MISSING FILES IN VIRTUAL FS
        restore_filesystem()
        led_onboard.off()

    # RESTORE PIN STATE
    machine.Pin(RESTORE_BUTTON_PIN, machine.Pin.IN, machine.Pin.OPEN_DRAIN)
    machine.Pin(RESTORE_LED_PIN, machine.Pin.IN)
    
    del machine


if __name__ == "__main__":
    restore()

