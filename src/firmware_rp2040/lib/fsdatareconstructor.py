FILE_DATA = {"menu_entry_info.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSByZWNpcGVfdXBkYXRlciBpbXBvcnQgcmVjaXBlX3VwZGF0ZXIKZnJvbSBtZW51X21hbmFnZXIgaW1wb3J0IG1lbnVfbWFuYWdlcgpjbGFzcyBtZW51X2VudHJ5X2luZm8obWVudV9lbnRyeS5tZW51X2VudHJ5KToKCgogICAKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygiSU5GTyIsICJIYXZlIGEgbmljZSBkYXkgOikiKQoKICAgIGRlZiBwcmV2aWV3KHNlbGYpOgogICAgICAgIHByaW50KCJwcmV2aWV3IHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLnNob3dfcmVjaXBlX2luZm9ybWF0aW9uKHNlbGYubmFtZSwgc2VsZi5kZXNjcmlwdGlvbikKCgogICAgZGVmIGFjdGl2YXRlKHNlbGYpOgogICAgICAgIHByaW50KCJhY3RpdmF0ZSB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCiAgICAgICAgdWkoKS5zaG93X3RpdGxlc2NyZWVuKCkKCgogICAgZGVmIHRlYXJkb3duKHNlbGYpOgogICAgICAgIHByaW50KCJ0ZWFyZG93biB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCgoKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CiAgICAgICAgaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX05BVklHQVRJT046CiAgICAgICAgICAgICAgICBtZW51X21hbmFnZXIoKS5leGl0X2N1cnJlbnRfbWVudSgpCiAgICAgICAgICAg", "menu_entry_recipe_editor.py": "aW1wb3J0IG1lbnVfZW50cnkKaW1wb3J0IHN5c3RlbV9jb21tYW5kCmZyb20gdWkgaW1wb3J0IHVpCmZyb20gbGVkcmluZyBpbXBvcnQgbGVkcmluZwpmcm9tIHJlY2lwZV91cGRhdGVyIGltcG9ydCByZWNpcGVfdXBkYXRlcgpmcm9tIG1lbnVfbWFuYWdlciBpbXBvcnQgbWVudV9tYW5hZ2VyCmZyb20gcmVjaXBlX2VkaXRvciBpbXBvcnQgcmVjaXBlX2VkaXRvcgppbXBvcnQgaGVscGVyCmltcG9ydCBjb25maWcKCgpjbGFzcyBtZW51X2VudHJ5X3JlY2lwZV9lZGl0b3IobWVudV9lbnRyeS5tZW51X2VudHJ5KToKCiAgICBlZGl0b3I6IHJlY2lwZV9lZGl0b3IgPSBOb25lCiAgICBpbml0X3N1Y2Nlc3M6IGJvb2wgPSBGYWxzZQogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oIlJFQ0lQRSBFRElUT1IiLCAiRW5hYmxlIFdpZmkgYmFzZWQgb25saW5lIHJlY2lwZSBlZGl0b3IiKQoKICAgIGRlZiBwcmV2aWV3KHNlbGYpOgogICAgICAgIHByaW50KCJwcmV2aWV3IHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLnNob3dfcmVjaXBlX2luZm9ybWF0aW9uKHNlbGYubmFtZSwgc2VsZi5kZXNjcmlwdGlvbikKCgogICAgZGVmIGFjdGl2YXRlKHNlbGYpOgogICAgICAgIHByaW50KCJhY3RpdmF0ZSB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCiAgICAgICAgaWYgc2VsZi5lZGl0b3IgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYudGVhcmRvd24oKQoKICAgICAgICBzZWxmLmVkaXRvciA9IHJlY2lwZV9lZGl0b3IoKQoKICAgICAgICBpZiBub3Qgc2VsZi5lZGl0b3IuaGFzX2NhcGFiaWxpdGllcygpOgogICAgICAgICAgICBzZWxmLmluaXRfc3VjY2VzcyA9IFRydWUKICAgICAgICAgICAgdWkoKS5zaG93X21zZygiV2lmaSBhY2Nlc3MgcG9pbnQgaXMgbm90IHN1cHBvcnRlZCIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIAogICAgICAgICMgIENGR19FRElUT1JfV0lGSV9TVEFfU1NJRCBDRkdfRURJVE9SX1dJRklfU1RBX1BTSwogICAgICAgIHNzaWQ6IHN0ciA9IGNvbmZpZy5DRkdfRURJVE9SX1dJRklfU1RBX1NTSUQuZm9ybWF0KGhlbHBlci5nZXRfc3lzdGVtX2lkKCkpCiAgICAgICAgcHNrOiBzdHIgPSAgY29uZmlnLkNGR19FRElUT1JfV0lGSV9TVEFfUFNLLmZvcm1hdChoZWxwZXIuZ2V0X3N5c3RlbV9pZCgpKQoKICAgICAgICBpcDogc3RyPSBzZWxmLmVkaXRvci5vcGVuX2FjY2Vzc3BvaW50KHNzaWQsIHBzaykgICAgCiAgICAgICAgdWkoKS5zaG93X3JlY2lwZV9pbmZvcm1hdGlvbigiUGxlYXNlIGNvbm5lY3QgdXNpbmcgOiIsICJJUDp7fVxuU1NJRDp7fVxuUFNLOnt9Ii5mb3JtYXQoaXAsIHNzaWQsIHBzaykpCgogICAgICAgIHNlbGYuZWRpdG9yLnNldHVwX3dlYnNlcnZlcigpCgogICAgICAgIHNlbGYuaW5pdF9zdWNjZXNzID0gVHJ1ZQoKCiAgICBkZWYgdGVhcmRvd24oc2VsZik6CiAgICAgICAgcHJpbnQoInRlYXJkb3duIHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICBzZWxmLmVkaXRvci5zdG9wX3dlYnNlcnZlcigpCiAgICAgICAgc2VsZi5lZGl0b3IuZGlzYWJsZV93aWZpKCkKICAgICAgICBkZWwgZWRpdG9yCgoKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CiAgICAgICAgaWYgc2VsZi5pbml0X3N1Y2Nlc3M6CiAgICAgICAgICAgIHNlbGYuZWRpdG9yLmhhbmRsZV9jb25uZWN0aW9uKCk=", "recipe_updater.py": "aW1wb3J0IGNvbmZpZwppbXBvcnQgc2V0dGluZ3MKaW1wb3J0IHRpbWUKaW1wb3J0IGhlbHBlcgoKCmNsYXNzIHJlY2lwZV91cGRhdGVfaGVscGVyOgoKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgaGFzX25ldHdvcmtfY2FwYWJpbGl0aWVzKCkgLT4gYm9vbDoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGltcG9ydCBuZXR3b3JrCiAgICAgICAgICAgIGltcG9ydCBzb2NrZXQKICAgICAgICAgICAgaW1wb3J0IHVyZXF1ZXN0cwogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGdldF9hcGlfdXJsKCkgLT4gc3RyOgogICAgICAgIGFwaV9lbmRwb2ludDogc3RyID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5nZXRfc2V0dGluZ3NfZW50cnkoc2V0dGluZ3MuU0VUVElOR1NfRU5UUklFUy5ORVRXT1JLX0FQSV9FTlBPSU5UKQogICAgICAgIGlmIGFwaV9lbmRwb2ludCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gTm9uZQoKCiAgICAgICAgaWYgbm90IGFwaV9lbmRwb2ludC5zdGFydHN3aXRoKCdodHRwOi8vJyk6CiAgICAgICAgICAgIGFwaV9lbmRwb2ludCA9ICdodHRwOi8vJyArIGFwaV9lbmRwb2ludAogICAgICAgIHByaW50KCJjaGVja191cGRhdGVfdXJsOiBzZXQgYXBpIGVuZHBvaW50IHVybCB7fSIuZm9ybWF0KGFwaV9lbmRwb2ludCkpCiAgICAgICAgCiAgICAgICAgIyBSRU1PVkUgVEFJTElORyAvIFRPIE1BS0UgRk9XTExJTkcgVVJMIENBTExTIFZBTElECiAgICAgICAgaWYgYXBpX2VuZHBvaW50LmVuZHN3aXRoKCcvJykgYW5kIGxlbihhcGlfZW5kcG9pbnQpID4gMDoKICAgICAgICAgICAgYXBpX2VuZHBvaW50ID0gYXBpX2VuZHBvaW50WzotMV0KCiAgICAgICAgCiAgICAgICAgZmluYWxfYXBpX3VybDogc3RyID0gInt9L3t9Ii5mb3JtYXQoYXBpX2VuZHBvaW50LCBzdHIoaGVscGVyLmdldF9zeXN0ZW1faWQoKSkpCiAgICAgICAgcmV0dXJuIGZpbmFsX2FwaV91cmwKCnRyeToKICAgIGltcG9ydCBuZXR3b3JrCiAgICBpbXBvcnQgc29ja2V0CiAgICBpbXBvcnQgdXJlcXVlc3RzCgogICAgY2xhc3MgcmVjaXBlX3VwZGF0ZXI6CiAgICAgICAgCiAgICAgICAgQHN0YXRpY21ldGhvZAogICAgICAgIGRlZiBkaXNhYmxlX3dpZmkoKToKICAgICAgICAgICAgd2xhbiA9IG5ldHdvcmsuV0xBTihuZXR3b3JrLlNUQV9JRikKICAgICAgICAgICAgd2xhbi5hY3RpdmUoRmFsc2UpCiAgICAgICAgCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgZ2V0X2FwaV91cmwoKSAtPiBzdHI6CiAgICAgICAgICAgIHJldHVybiByZWNpcGVfdXBkYXRlX2hlbHBlci5nZXRfYXBpX3VybCgpCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgY29ubmVjdF93aWZpKCkgLT4gYm9vbDoKICAgICAgICAgICAgbmV0d29yay5jb3VudHJ5KGNvbmZpZy5DRkdfTkVUV09SS19XSUZJQ09VTlRSWSkKICAgICAgICAgICAgbmV0d29yay5ob3N0bmFtZShjb25maWcuQ0ZHX05FVFdPUktfSE9TVE5BTUUpICMuZm9ybWF0KGhlbHBlci5nZXRfc3lzdGVtX2lkKCkpKQoKICAgICAgICAgICAgd2xhbiA9IG5ldHdvcmsuV0xBTihuZXR3b3JrLlNUQV9JRikKICAgICAgICAgICAgd2xhbi5hY3RpdmUoVHJ1ZSkKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICBzc2lkID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5nZXRfc2V0dGluZ3NfZW50cnkoc2V0dGluZ3MuU0VUVElOR1NfRU5UUklFUy5ORVRXT1JLX1dJRklfU1NJRCkKICAgICAgICAgICAgcHNrID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5nZXRfc2V0dGluZ3NfZW50cnkoc2V0dGluZ3MuU0VUVElOR1NfRU5UUklFUy5ORVRXT1JLX1dJRklfUFNLKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgc3NpZCBpcyBOb25lIG9yIHBzayBpcyBOb25lOgogICAgICAgICAgICAgICAgcHJpbnQoIlNTSUQgT1IgUFNLIEZPUiBXSUZJIENPTk5FQ1RJT04gTk9UIFNFVCIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCgogICAgICAgICAgICBwcmludCgiQ09OTkVDVElORyBUTzoge30iLmZvcm1hdChzc2lkKSkKICAgICAgICAgICAgd2xhbi5jb25uZWN0KHNzaWQsIHBzaykKICAgICAgICAgICAgdGltZXIgPSAwCiAgICAgICAgICAgIHdoaWxlIHdsYW4uaXNjb25uZWN0ZWQoKSA9PSBGYWxzZToKICAgICAgICAgICAgICAgIHByaW50KCdXYWl0aW5nIGZvciBjb25uZWN0aW9uLi4uJykKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICAgICAgICAgIHRpbWVyID0gdGltZXIgKyAxCgogICAgICAgICAgICAgICAgaWYgdGltZXIgPiAxMDoKICAgICAgICAgICAgICAgICAgICB3bGFuLmFjdGl2ZShGYWxzZSkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHdsYW4uaXNjb25uZWN0ZWQoKToKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAoKICAgICAgICBAc3RhdGljbWV0aG9kCiAgICAgICAgZGVmIGNoZWNrX3VwZGF0ZV91cmwoKSAtPiBib29sOgogICAgICAgICAgICBpZiBub3QgcmVjaXBlX3VwZGF0ZXIuY29ubmVjdF93aWZpKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgIyBHRVQgTElTVCBPRiBSRUNJUEVTCiAgICAgICAgICAgICAgICByID0gdXJlcXVlc3RzLmdldChyZWNpcGVfdXBkYXRlX2hlbHBlci5nZXRfYXBpX3VybCgpKQogICAgICAgICAgICAgICAgci5jbG9zZSgpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZSAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KHN0cihlKSkKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAgICAgCiAgICAgICAgQHN0YXRpY21ldGhvZCAgIAogICAgICAgIGRlZiB1cGRhdGVfcmVjaXBlcygpIC0+IGJvb2w6CiAgICAgICAgICAgIGlmIG5vdCByZWNpcGVfdXBkYXRlci5jaGVja191cGRhdGVfdXJsKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgICAgIGFwaV9lbmRwb2ludDogc3RyID0gcmVjaXBlX3VwZGF0ZV9oZWxwZXIuZ2V0X2FwaV91cmwoKQogICAgICAgIAogICAgICAgICAgICBwcmludCgiQVBJOiB7fSIuZm9ybWF0KGFwaV9lbmRwb2ludCkpCgogICAgICAgICAgICB0aW1lLnNsZWVwKDIpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICMgR0VUIExJU1QgT0YgUkVDSVBFUwogICAgICAgICAgICAgICAgaGVhZGVyczogZGljdCA9IHt9CiAgICAgICAgICAgICAgICByID0gdXJlcXVlc3RzLmdldCgie30vcmVjaXBlcyIuZm9ybWF0KGFwaV9lbmRwb2ludCksICBoZWFkZXJzPWhlYWRlcnMpCiAgICAgICAgICAgICAgICByZWNpcGVfbGlzdCA9IHIuanNvbigpICMgWyJyZXNpcGVfZmlsZV91cmlfcmVsYXRpdmUiXQogICAgICAgICAgICAgICAgci5jbG9zZSgpCiAgICAgICAgICAgICAgICBpZiByZWNpcGVfbGlzdCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICAjIERPTldMT0FEIEVBQ0ggUkVDSVBFCiAgICAgICAgICAgICAgICAgICAgZm9yIHJlY2lwZSBpbiByZWNpcGVfbGlzdDoKICAgICAgICAgICAgICAgICAgICAgICAgciA9IHVyZXF1ZXN0cy5nZXQoInt9L3JlY2lwZS97fSIuZm9ybWF0KGFwaV9lbmRwb2ludCwgcmVjaXBlKSwgIGhlYWRlcnM9aGVhZGVycykKICAgICAgICAgICAgICAgICAgICAgICAgZGxfcmVjaXBlID0gci5qc29uKCkgIyBbe2ZpbGVuYW1lX3dpdGhvdXRfZW5kaW5nLCByZWNpcGV9XQogICAgICAgICAgICAgICAgICAgICAgICByLmNsb3NlKCkKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdyZWNpcGUnIGluIGRsX3JlY2lwZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnNldHRpbmdzLmluc3RhbmNlKCkud3JpdGVfanNvbl9maWxlKGRsX3JlY2lwZVsnbmFtZSddICsgIi5yZWNpcGUiLCBkbF9yZWNpcGVbJ3JlY2lwZSddKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoImNhbnQgc3RvcmUgcmVjaXBlZCBkYXRhIGJsb2NrIGR1ZSB0byBtaXNzaW5nIHJlY2lwZSBkaWN0IGJsb2NrIikKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KHN0cihlKSkKICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHJlY2lwZV91cGRhdGVyLmRpc2FibGVfd2lmaSgpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgCgpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgCiAgICBjbGFzcyByZWNpcGVfdXBkYXRlcjoKICAgICAgICAKICAgICAgICBAc3RhdGljbWV0aG9kCiAgICAgICAgZGVmIGdldF9hcGlfdXJsKCkgLT4gc3RyOgogICAgICAgICAgICByZXR1cm4gcmVjaXBlX3VwZGF0ZV9oZWxwZXIuZ2V0X2FwaV91cmwoKQoKICAgICAgICBAc3RhdGljbWV0aG9kCiAgICAgICAgZGVmIGRpc2FibGVfd2lmaSgpOgogICAgICAgICAgICBwYXNzCiAgICAgICAgCiAgICAgICAgQHN0YXRpY21ldGhvZAogICAgICAgIGRlZiBjaGVja191cGRhdGVfdXJsKCkgLT4gYm9vbDoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgY29ubmVjdF93aWZpKCkgLT4gYm9vbDoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgdXBkYXRlX3JlY2lwZXMoKSAtPiBib29sOgogICAgICAgICAgICByZXR1cm4gRmFsc2U=", "main.py": "", "menu_entry_recipe_update.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSByZWNpcGVfdXBkYXRlciBpbXBvcnQgcmVjaXBlX3VwZGF0ZXIKZnJvbSBtZW51X21hbmFnZXIgaW1wb3J0IG1lbnVfbWFuYWdlcgppbXBvcnQgdGltZQpjbGFzcyBtZW51X2VudHJ5X3JlY2lwZV91cGRhdGUobWVudV9lbnRyeS5tZW51X2VudHJ5KToKCgogICAgdXBkYXRlX29rOiBib29sID0gRmFsc2UKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygiUkVDSVBFIFVQREFURSIsICJVcGRhdGUgcmVjaXBlcyBvdmVyIE1peE1lYXN1cmVCdWRkeSBBUEkiKQoKICAgIGRlZiBwcmV2aWV3KHNlbGYpOgogICAgICAgIHByaW50KCJwcmV2aWV3IHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLnNob3dfcmVjaXBlX2luZm9ybWF0aW9uKHNlbGYubmFtZSwgc2VsZi5kZXNjcmlwdGlvbikKCgogICAgZGVmIGFjdGl2YXRlKHNlbGYpOgogICAgICAgIHNlbGYudXBkYXRlX29rID0gRmFsc2UKICAgICAgICAKICAgICAgICBwcmludCgiYWN0aXZhdGUge30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIHRyeToKICAgICAgICAgICAgdWkoKS5zaG93X21zZygiQ0hFQ0sgRk9SIFdJRkkgQ09OTkVDVElPTiIpCiAgICAgICAgICAgIGlmIHJlY2lwZV91cGRhdGVyLmNoZWNrX3VwZGF0ZV91cmwoKToKICAgICAgICAgICAgICAgIHVpKCkuc2hvd19tc2coIldJRkkgU1VDQ0VTUyIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB1aSgpLnNob3dfbXNnKCJFUlJPUjogQ0hFQ0sgQ1JFREVOVElBTFMiKQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgyKQogICAgICAgICAgICAgICAgbWVudV9tYW5hZ2VyKCkuZXhpdF9jdXJyZW50X21lbnUoKQoKICAgICAgICAgICAgdWkoKS5zaG93X21zZygiUkVDSVBFIEZFVENISU5HIFNUQVJURUQiKQogICAgICAgICAgICBzZWxmLnVwZGF0ZV9vayA9IHJlY2lwZV91cGRhdGVyLnVwZGF0ZV9yZWNpcGVzKCkKICAgICAgICAgICAgaWYgc2VsZi51cGRhdGVfb2s6CiAgICAgICAgICAgICAgICB1aSgpLnNob3dfcmVjaXBlX2luZm9ybWF0aW9uKCJQTEVBU0UgUE9XRVJDWUNMRSBUSEUgREVWSUNFIiwgIlByZXNzIE5FWFQvUFJFViB0byBzaG93IFFSIENvZGUgb3IgVVJMIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHVpKCkuc2hvd19yZWNpcGVfaW5mb3JtYXRpb24oIlVQREFURSBGQUlMRUQiLCAiUHJlc3MgTkVYVC9QUkVWIHRvIHNob3cgUVIgQ29kZSBvciBVUkwiKQoKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGUpCiAgICAgICAgICAgIHVpKCkuc2hvd19tc2coIkVSUk9SOiBVUERBVEUgRVJST1IiKQogICAgICAgICAgICB0aW1lLnNsZWVwKDIpCiAgICAgICAgICAgIG1lbnVfbWFuYWdlcigpLmV4aXRfY3VycmVudF9tZW51KCkKCgogICAgICAgIAoKICAgIGRlZiB0ZWFyZG93bihzZWxmKToKICAgICAgICBwcmludCgidGVhcmRvd24ge30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIHRyeToKICAgICAgICAgICAgcmVjaXBlX3VwZGF0ZXIuZGlzYWJsZV93aWZpKCkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGUpCgoKCiAgICBkZWYgdXBkYXRlKHNlbGYsIF9zeXN0ZW1fY29tbWFuZDogc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQpOgogICAgICAgIGlmIF9zeXN0ZW1fY29tbWFuZC50eXBlID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLkNPTU1BTkRfVFlQRV9OQVZJR0FUSU9OOgogICAgICAgICAgICAjIFVQREFURSBET0VTIE5PVEhJTkcgRVhDRVBUIEdPSU5HIEJBQ0sgVE8gTUFJTiBNRU5VCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLnVwZGF0ZV9vazoKICAgICAgICAgICAgICAgIG1lbnVfbWFuYWdlcigpLmV4aXRfY3VycmVudF9tZW51KCkKICAgICAgICBpZiBfc3lzdGVtX2NvbW1hbmQudHlwZSA9PSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5DT01NQU5EX1RZUEVfTkFWSUdBVElPTjoKICAgICAgICAgICAgaWYgX3N5c3RlbV9jb21tYW5kLmFjdGlvbiA9PSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5OQVZJR0FUSU9OX0VOVEVSOgogICAgICAgICAgICAgICAgbWVudV9tYW5hZ2VyKCkuZXhpdF9jdXJyZW50X21lbnUoKQogICAgICAgICAgICBlbGlmIF9zeXN0ZW1fY29tbWFuZC5hY3Rpb24gPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuTkFWSUdBVElPTl9MRUZUOgogICAgICAgICAgICAgICAgdWkoKS5zaG93X2RldmljZV9xcl9jb2RlKHJlY2lwZV91cGRhdGVyLmdldF9hcGlfdXJsKCkpCiAgICAgICAgICAgIGVsaWYgX3N5c3RlbV9jb21tYW5kLmFjdGlvbiA9PSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5OQVZJR0FUSU9OX1JJR0hUOgogICAgICAgICAgICAgICAgdWkoKS5zaG93X3VybChyZWNpcGVfdXBkYXRlci5nZXRfYXBpX3VybCgpKQ==", "menu_entry_scale.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSBTY2FsZXMgaW1wb3J0IFNjYWxlSW50ZXJmYWNlCgpjbGFzcyBtZW51X2VudHJ5X3NjYWxlKG1lbnVfZW50cnkubWVudV9lbnRyeSk6CgoKICAgIFdJR0hUX0NIQU5HRV9ESVNQTEFZX1VQREFURTogZmxvYXQgPSAxLjAgIyBVUERBVCBESVNQTEFZIEFGVEVSTEVBU1QgWGcgQ0hBTkdFUwogICAgbGFzdF9zY2FsZV92YWx1ZTogZmxvYXQgPSAwLjAKICAgIG1heF9zY2FsZV92YWx1ZTogZmxvYXQgPSAwLjAKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygiU0NBTEUiLCAiQSBub3JtYWwga2l0Y2hlbiBzY2FsZSIpCgogICAgZGVmIHByZXZpZXcoc2VsZik6CiAgICAgICAgcHJpbnQoInByZXZpZXcge30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIHVpKCkuc2hvd19yZWNpcGVfaW5mb3JtYXRpb24oc2VsZi5uYW1lLCBzZWxmLmRlc2NyaXB0aW9uKQoKCiAgICBkZWYgYWN0aXZhdGUoc2VsZik6CiAgICAgICAgcHJpbnQoImFjdGl2YXRlIHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICBTY2FsZUludGVyZmFjZSgpLnRhcmUoKQogICAgICAgIHVpKCkuc2hvd19zY2FsZShTY2FsZUludGVyZmFjZSgpLmdldF9jdXJyZW50X3dlaWdodCgpKQogICAgICAgIHNlbGYubGFzdF9zY2FsZV92YWx1ZSA9IDAuMAogICAgICAgIHNlbGYubWF4X3NjYWxlX3ZhbHVlID0gMTAuMAogICAgICAgIGxlZHJpbmcoKS5zZXRfbmVvcGl4ZWxfZnVsbCgxMCwgMTAsIDEwKQoKCgogICAgZGVmIHRlYXJkb3duKHNlbGYpOgogICAgICAgIHByaW50KCJ0ZWFyZG93biB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCgoKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CgogICAgICAgICMgVVBEQVRFIFNDQUxFIFZBTFVFCiAgICAgICAgaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX1NDQUxFX1ZBTFVFOgogICAgICAgICAgICBpZiBhYnMoX3N5c3RlbV9jb21tYW5kLnZhbHVlIC0gc2VsZi5sYXN0X3NjYWxlX3ZhbHVlKToKICAgICAgICAgICAgICAgIHNlbGYubGFzdF9zY2FsZV92YWx1ZSA9IF9zeXN0ZW1fY29tbWFuZC52YWx1ZQogICAgICAgICAgICAgICAgdWkoKS5zaG93X3NjYWxlKHNlbGYubGFzdF9zY2FsZV92YWx1ZSkgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQUREIFNPTUUgTkVPUElYRUwgTElHSFROSU5HCiAgICAgICAgICAgICAgICBsZWRyaW5nKCkuc2V0X25lb3BpeGVsX3BlcmNlbnRhZ2UobWluKDEuMCwgYWJzKHNlbGYubWF4X3NjYWxlX3ZhbHVlIC8gc2VsZi5sYXN0X3NjYWxlX3ZhbHVlKSkpCgogICAgICAgICMgVEFSRSBTQ0FMRSBPTiBPSyBCVVRUT04KICAgICAgICBlbGlmIF9zeXN0ZW1fY29tbWFuZC50eXBlID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLkNPTU1BTkRfVFlQRV9OQVZJR0FUSU9OOgogICAgICAgICAgICBpZiBfc3lzdGVtX2NvbW1hbmQuYWN0aW9uID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLk5BVklHQVRJT05fRU5URVI6CiAgICAgICAgICAgICAgICBTY2FsZUludGVyZmFjZSgpLnRhcmUoKQogICAgICAgICAgICAgICAgc2VsZi5tYXhfc2NhbGVfdmFsdWUgPSAxMC4w", "ui.py": "", "menu_entry_calibration.py": "", "menu_entry_recipe.py": "", "config.py": "IyBIQVJEV0FSRSBDT05GSUcgU1RBUlRTIEhFUkUKIyBzc2QxMzA2ID0gMTI4eDY0IG9sZGVkIHdpdGggc3NkMTMwNiBjb250cm9sbGVyCiMgc2gxMTA2ID0gMTI4eDY0IG9sZGVkIHdpdGggc3NoMTEwNiBjb250cm9sbGVyCkNGR19ESVNQTEFZX1RZUEU6IHN0ciA9ICJzaDExMDYiICMgc2gxMTA2IHNzZDEzMDYKQ0ZHX0NBTElCUkFUSU9OX1dFSUdIVF9XRUlHSFQ6ZmxvYXQgPSA1MC4wCkNGR19TQ0FMRV9JTlZFUlRfV0VJR0hUX01FQVNVUkVEX1ZBTFVFOiBmbG9hdCA9IC0xLjAgIyBpZiB0aGUgc2NhbGUgbWVhc3VyZW1lbnQgaXMgbmVnYXRpdmUgc2V0IHRoaXMgdG8gMS4wIG9yIC0xLjAKQ0ZHX1NDQUxFX0dMQVNTX0FERElUSU9OX05FWFRfU1RFUF9XRUlHSFQ6ZmxvYXQgPSA1MC4wICMgWGcgbW9yZSBvbiBzY2FsZSB0byB0cmlnZ2VyIG5leHQgc3RlcCBpbiByZWNpcGUgPT4gMS8zIHdlaWdodCBvZiBhIHR5cGljYWwgZ2xhc3MKQ0ZHX1VTRVJfTE9OR19CVVRUT05fUFJFU1NfVElNRTogaW50ID0gNzAwICMgdGltZSB0byByZWdzaXRlciBhIGxvbmcgYnV0dG9uIHByZXNzIGluIG1zCgpDRkdfTkVPUElYRUxfTEVEX0NPVU5UOiBpbnQgPSAyNiAjMzIgIzYwIGhvdyBtYW55IGxlZHMgZm9yIHRoZSByaW5nIGFyZSB1c2VkCkNGR19ORU9QSVhFTF9MRURfU1RBUlRfT0ZGU0VUOiBpbnQgPSAoQ0ZHX05FT1BJWEVMX0xFRF9DT1VOVC8yKSAjIE1BWCBDRkdfTkVPUElYRUxfTEVEX0NPVU5UIFRPIFJPVEFURSBUSEUgU1RBUlRQT0lOVApDRkdfTkVPUElYRUxfTUFYX0JSSUdIVE5FU1M6IGZsb2F0ID0gMC44ICMgbWF4IGxlZCBicmlnaG5lc3MgbW9kaWZpZXIgMC4wIC0gMS4wCgojIERFRkFVTFQgV0lGSSBTRVRUSU5HUwojIENBTiBMQVRFUiBCRSBDQU5HRUQgSU4gVEhFIFNEQ0FSRC9TRVRUSU5HUy5KU09OIEZJTEUKQ0ZHX05FVFdPUktfSE9TVE5BTUU6IHN0ciA9ICJtaXhhbmRtZWFzdXJlYnVkZHkiICMgeFh4WC5sb2NhbApDRkdfTkVUV09SS19XSUZJQ09VTlRSWTogc3RyID0gIkRFIiAjIERFIFVTCkNGR19ORVRXT1JLX1dJRklfU1NJRDogc3RyID0gIk1ha2Vyc3BhY2UiCkNGR19ORVRXT1JLX1dJRklfUFNLOiBzdHIgPSAiTVM4Y0N2cEUiCkNGR19ORVRXT1JLX0FQSV9FTkRQT0lOVDogc3RyID0gIm1peG1lYXN1cmVidWRkeS5jb20vYXBpL21tYiIKCgojIFNFVFRJTkdTIEZPUiBBQ0NFU1MgUE9JTlQgKyBMT0NBTCBXRUJFRElUT1IKQ0ZHX0VESVRPUl9XSUZJX1NUQV9IT1NUTkFNRTogc3RyID0gIm1peGFuZG1lYXN1cmVidWRkeSIKQ0ZHX0VESVRPUl9XSUZJX1NUQV9TU0lEOiBzdHIgPSAibWl4YW5kbWVhc3VyZWJ1ZGR5IgpDRkdfRURJVE9SX1dJRklfU1RBX1BTSzogc3RyID0gInt9IiAgIwpDRkdfRURJVE9SX0hUVFBfUE9SVDogaW50ID0gODAgIyBXRUJTRVJWRVIgUE9SVCBGT1IgVEhFIE9OTElORSBFRElUT1IKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjIyMjIyBQSU4gQ09ORklHICMjIyMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBORU9QSVhFTCBSSU5HCkNGR19ORU9QSVhFTF9QSU46IGludCA9IDI4CiMgQlVUVE9OUwpDRkdfQlVUVE9OX0xFRlRfUElOOiBpbnQgPSAzICMyMgpDRkdfQlVUVE9OX1JJR0hUX1BJTjogaW50ID0gMgoKI0VOQ09ERVIKQ0ZHX0VOQ09ERVJfSU5WRVJUOiBib29sID0gRmFsc2UKQ0ZHX0VOQ09ERVJfQ0xLX1BJTjogaW50ID0gMjAKQ0ZHX0VOQ09ERVJfRFRfUElOOiBpbnQgPSAxOQpDRkdfRU5DT0RFUl9TV19QSU46IGludCA9IDE4CiMgSFg3MTEgTU9EVUxFCkNGR19IWDcxMV9ET1VUX1BJTjogaW50ID0gNQpDRkdfSFg3MTFfU0NLX1BJTjogaW50ID0gNAojIFtPUFRJT05BTF0gU0QgQ0FSRApDRkdfU0RDQVJEX1NQSUlOU1RBTkNFOiBpbnQgPSAxICMgT04gUlAyMDQwIDAgb3IgMSBERVBFTkRJTkcgVEhFIEZPTExPV0lORyBVU0VEIFNQSSBQSU5TCkNGR19TRENBUkRfU0NLX1BJTjogaW50ID0gMTAKQ0ZHX1NEQ0FSRF9NT1NJX1BJTjogaW50ID0gMTEKQ0ZHX1NEQ0FSRF9NSVNPX1BJTjogaW50ID0gOApDRkdfU0RDQVJEX0NTX1BJTjogaW50ID0gOQojIFtPUFRJT05BTF0gU1NEMTMwNiBvciBTSDExMDYKQ0ZHX09MRURfSTJDSU5TVEFOQ0U6IGludCA9IDAgIyBPTiBSUDIwNDAgMCBvciAxIERFUEVORElORyBUSEUgRk9MTE9XSU5HIFVTRUQgSTJDIFBJTlMKQ0ZHX09MRURfU0NMX1BJTjogaW50ID0gMTcKQ0ZHX09MRURfU0RBX1BJTjogaW50ID0gMTYKQ0ZHX09MRURfQUREUjogaW50ID0gMHgzYwpDRkdfRElTUExBWV9DSEFSX1dJRFRIOiBpbnQgPSA4ICMgY2hhciB3aWR0aCBpbiBwaXhlbHMgc2VlIHZnYTJ4OHggYXMgdXNlZCBmb250ZmlsZQpDRkdfRElTUExBWV9MSU5FX1NQQUNJTkc6IGludCA9IChDRkdfRElTUExBWV9DSEFSX1dJRFRIICsgMSkgIyBwaXhlbCBmb250IGhlaWdodCArICBhIGJpdCBleHRyYSBzcGFjZSB0byBtYWtlIGxhcmdlIHRleHQgbW9yZSByZWFkYWJsZQoKIyBESVNQTEFZIFJFU09MVVRJT04KU0NSX1dJRFRIOiBpbnQgPSAxMjgKU0NSX0hFSUdIVDogaW50ID0gNjQKCgogICAgCg==", "recipe.py": "", "settings.py": "", "recipe_loader.py": "aW1wb3J0IG1hY2hpbmUNCmltcG9ydCBvcw0KaW1wb3J0IHRpbWUNCmltcG9ydCBqc29uDQoNCmZyb20gdWkgaW1wb3J0IHVpDQppbXBvcnQgY29uZmlnDQppbXBvcnQgaGVscGVyDQppbXBvcnQgZXhhbXBsZV9yZWNpcGVzDQppbXBvcnQgc2V0dGluZ3MNCmltcG9ydCByZWNpcGUNCmZyb20gc2luZ2xldG9uIGltcG9ydCBzaW5nbGV0b24NCg0KDQoNCkBzaW5nbGV0b24NCmNsYXNzIHJlY2lwZV9sb2FkZXI6DQogICAgDQogIA0KICAgDQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBwcmludCgicmVjaXBlX2xvYWRlcjogX19pbml0X18iKQ0KDQogICAgICAgIHNlbGYuY3JlYXRlX2luaXRpYWxfcmVjaXBlKCkNCiAgICAgICAgDQogICANCiAgICAgDQogICAgZGVmIGNyZWF0ZV9pbml0aWFsX3JlY2lwZShzZWxmKToNCiAgICAgICAgcjogcmVjaXBlLnJlY2lwZQ0KICAgICAgICBmb3IgciBpbiBleGFtcGxlX3JlY2lwZXMuR0VUX0VYQU1QTEVfUkVDSVBFU19DT0xMRUNUSU9OKCk6DQogICAgICAgICAgICBzZXR0aW5ncy5zZXR0aW5ncygpLndyaXRlX2pzb25fZmlsZShyLmZpbGVuYW1lLCByLnRvX2RpY3QoKSkNCiAgICAgICAgICAgIA0KDQogICAgZGVmIGxpc3RfcmVjcGllcyhzZWxmLCBfaW5jbHVkZV9kZXNjcmlwdGlvbjogYm9vbCA9IEZhbHNlKSAtPiB0dXBsZVtzdHIsIHN0ciwgc3RyXToNCiAgICAgICAgcmVzID0gW10NCiAgICAgICAgZm9yIGYgaW4gc2V0dGluZ3Muc2V0dGluZ3MoKS5saXN0X2ZpbGVzKCk6DQogICAgICAgICAgICBpZiBmLmVuZHN3aXRoKCcucmVjaXBlJyk6DQogICAgICAgICAgICAgICAgIyBmID0gdGVxdWlsYV9zdW5yaXNlLnJlY2lwZQ0KICAgICAgICAgICAgICAgIG5hbWU6IHN0ciA9IGYucmVwbGFjZSgnLnJlY2lwZScsICcnKS5yZXBsYWNlKCdfJywgJyAnKQ0KDQogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHN0ciA9ICIiDQoNCiAgICAgICAgICAgICAgICBpZiBfaW5jbHVkZV9kZXNjcmlwdGlvbjoNCiAgICAgICAgICAgICAgICAgICAgcjogcmVjaXBlLnJlY2lwZSA9IHNlbGYuZ2V0X3JlY2lwZV9ieV9maWxlbmFtZShmKQ0KICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA9IHIuZ2V0X2Rlc2NyaXB0aW9uKCkNCiAgICAgICAgICAgICAgICAgICAgZGVsIHINCg0KICAgICAgICAgICAgICAgIHJlcy5hcHBlbmQoKGYsbmFtZSwgZGVzY3JpcHRpb24pKQ0KICAgICAgICByZXR1cm4gcmVzDQogICAgDQoNCiAgICBkZWYgZ2V0X3JlY2lwZV9maWxlX2NvbnRlbnQoc2VsZiwgX2ZpbGVuYW1lOiBzdHIpIC0+IGRpY3Q6DQogICAgICAgICMgQ0hFQ0sgRk9SIEVYVEVOVElPTg0KICAgICAgICBpZiBub3QgX2ZpbGVuYW1lLmVuZHN3aXRoKCcucmVjaXBlJyk6DQogICAgICAgICAgICBfZmlsZW5hbWUgPSBfZmlsZW5hbWUgKyAiLnJlY2lwZSINCiAgICAgICAgIyBDSEVDSyBGSUxFIEVYSVNUUw0KICAgICAgICBpZiBfZmlsZW5hbWUgbm90IGluIHNldHRpbmdzLnNldHRpbmdzKCkubGlzdF9maWxlcygpOg0KICAgICAgICAgICAgcmV0dXJuIHJlY2lwZS5yZWNpcGUoKQ0KICAgICAgICAjIExPQUQgQ09OVEVOVCBBUyBKU09ODQogICAgICAgIGpzb25fcmVjaXBlID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5sb2FkX2pzb25fZmlsZShfZmlsZW5hbWUpDQogICAgICAgIHJldHVybiBqc29uX3JlY2lwZQ0KICAgIA0KDQogICAgZGVmIGdldF9yZWNpcGVfYnlfZmlsZW5hbWUoc2VsZiwgX2ZpbGVuYW1lOiBzdHIpIC0+IHJlY2lwZS5yZWNpcGU6DQogICAgICAgICMgTE9BRCBKU09OIENPTlRFTlQgT0YgUkVDSVBFIEZJTEUgDQogICAgICAgIGpzb25fcmVjaXBlOiBkaWN0ID0gc2VsZi5nZXRfcmVjaXBlX2ZpbGVfY29udGVudChfZmlsZW5hbWUpDQoNCiAgICAgICAgIyBDUkVBVEUgUkVDSVBFDQogICAgICAgIHI6IHJlY2lwZS5yZWNpcGUgPSByZWNpcGUucmVjaXBlKCkNCg0KICAgICAgICBpZiBqc29uX3JlY2lwZSBpcyBOb25lIG9yIG5vdCBqc29uX3JlY2lwZTogICAgICAgIA0KICAgICAgICAgICAgcmV0dXJuIHINCiAgICAgICAgDQogICAgICAgICMgUEFSU0UgSlNPTiBUTyBSRUNJUEUNCiAgICAgICAgci5mcm9tX2RpY3QoanNvbl9yZWNpcGUpDQogICAgICAgIHJldHVybiByDQogICAgICAgIA0KDQogICAgDQogICAgDQo=", "recipe_editor.py": "aW1wb3J0IGNvbmZpZwppbXBvcnQgc2V0dGluZ3MKaW1wb3J0IHRpbWUKaW1wb3J0IGhlbHBlcgppbXBvcnQganNvbgppbXBvcnQgcmVjaXBlX2xvYWRlcgoKCnRyeToKICAgIGltcG9ydCBuZXR3b3JrCiAgICBpbXBvcnQgbWljcm9weXNlcnZlcgoKICAgIGNsYXNzIHJlY2lwZV9lZGl0b3I6CiAgICAgICAgCgogICAgICAgIHNlcnZlcjogbWljcm9weXNlcnZlci5NaWNyb1B5U2VydmVyID0gbWljcm9weXNlcnZlci5NaWNyb1B5U2VydmVyKHBvcnQ9Y29uZmlnLkNGR19FRElUT1JfSFRUUF9QT1JUKQogICAgICAgIAogICAgICAgIGRlZiBzZXJ2ZV9pbmRleChzZWxmLCByZXF1ZXN0KToKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIuc2VuZCgiVEhJUyBJUyBJTkRFWCBQQUdFISIpCgogICAgICAgIGRlZiBzZXJ2ZV9yZWNpcGUoc2VsZiwgcmVxdWVzdCk6CiAgICAgICAgICAgIHBhcmFtcyA9IG1pY3JvcHlzZXJ2ZXIuZ2V0X3JlcXVlc3RfcXVlcnlfcGFyYW1zKHJlcXVlc3QpCQogICAgICAgICAgICBqc29uX3JlcHNvbnNlOiBkaWN0ID0ge30KICAgICAgICAgICAgaWYgJ2ZpbGVuYW1lJyBpbiBwYXJhbXM6CiAgICAgICAgICAgICAgICBqc29uX3JlcHNvbnNlID0gcmVjaXBlX2xvYWRlci5yZWNpcGVfbG9hZGVyLmdldF9yZWNpcGVfZmlsZV9jb250ZW50KHBhcmFtc1snZmlsZW5hbWUnXSkKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLnNlcnZlci5zZW5kKCJIVFRQLzEuMCAyMDAgT0tcclxuIikKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIuc2VuZCgiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXHJcblxyXG4iKQogICAgICAgICAgICBzZWxmLnNlcnZlci5zZW5kKGpzb24uZHVtcHMoanNvbl9yZXBzb25zZSkpCgogICAgICAgIGRlZiBzZXJ2ZV9yZWNpcGVzKHNlbGYsIHJlcXVlc3QpOgogICAgICAgICAgICBqc29uX3JlcHNvbnNlOiBkaWN0ID0ge30KICAgICAgICAgICAgCgogICAgICAgICAgICBmb3IgciBpbiByZWNpcGVfbG9hZGVyLnJlY2lwZV9sb2FkZXIoKS5saXN0X3JlY3BpZXMoX2luY2x1ZGVfZGVzY3JpcHRpb249VHJ1ZSk6CiAgICAgICAgICAgICAgICBmaWxlbmFtZSwgbmFtZSwgZGVzY3JpcHRpb24gPSByCiAgICAgICAgICAgICAgICBsaW5rOiBzdHIgPSAiL3JlY2lwZT9maWxlbmFtZT17fSIuZm9ybWF0KGZpbGVuYW1lKQogICAgICAgICAgICAgICAganNvbl9yZXBzb25zZVtmaWxlbmFtZV0gPSB7Im5hbWUiOiBuYW1lLCAiZGVzY3JpcHRpb24iOiBkZXNjcmlwdGlvbiwgImxpbmsiOiBsaW5rfQoKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIuc2VuZCgiSFRUUC8xLjAgMjAwIE9LXHJcbiIpCiAgICAgICAgICAgIHNlbGYuc2VydmVyLnNlbmQoIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxyXG5cclxuIikKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIuc2VuZChqc29uLmR1bXBzKGpzb25fcmVwc29uc2UpKQoKCiAgICAgICAgZGVmIF9faW5pdF9fKCk6CiAgICAgICAgICAgIHBhc3MKICAgICAgICAKCiAgICAgICAgZGVmIGhhc19jYXBhYmlsaXRpZXMoc2VsZikgLT4gYm9vbDoKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAKICAgICAgICBkZWYgZGlzYWJsZV93aWZpKHNlbGYpOgogICAgICAgICAgICB3bGFuID0gbmV0d29yay5XTEFOKG5ldHdvcmsuU1RBX0lGKQogICAgICAgICAgICB3bGFuLmFjdGl2ZShGYWxzZSkKICAgICAgICAKCiAgICAgICAgZGVmIHNldHVwX3dlYnNlcnZlcihzZWxmKToKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQUREIFJPVVRFUwogICAgICAgICAgICBzZWxmLnNlcnZlci5hZGRfcm91dGUoIi8iLCBzZWxmLnNlcnZlX2luZGV4KQogICAgICAgICAgICBzZWxmLnNlcnZlci5hZGRfcm91dGUoIi9pbmRleCIsIHNlbGYuc2VydmVfaW5kZXgpCiAgICAgICAgICAgIHNlbGYuc2VydmVyLm9uX25vdF9mb3VuZChzZWxmLnNlcnZlX2luZGV4KSAjIDQwNAoKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIuYWRkX3JvdXRlKCIvcmVjaXBlIiwgc2VsZi5zZXJ2ZV9yZWNpcGUpCiAgICAgICAgICAgIHNlbGYuc2VydmVyLmFkZF9yb3V0ZSgiL3JlY2lwZXMiLCBzZWxmLnNlcnZlX3JlY2lwZXMpCgoKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIubG9vcF9pbml0KCkKCiAgICAgICAgZGVmIHN0b3Bfd2Vic2VydmVyKHNlbGYpOgogICAgICAgICAgICBzZWxmLnNlcnZlci5zdG9wKCkKCiAgICAgICAgZGVmIGhhbmRsZV9jb25uZWN0aW9uKHNlbGYpOgogICAgICAgICAgICBzZWxmLnNlcnZlci5sb29wKCkKICAgCgogICAgICAgIGRlZiBvcGVuX2FjY2Vzc3BvaW50KHNlbGYsIF9zc2lkOiBzdHIsIF9wc2s6IHN0ciA9IE5vbmUpIC0+IHN0cjoKCiAgICAgICAgICAgIG5ldHdvcmsuY291bnRyeShjb25maWcuQ0ZHX05FVFdPUktfV0lGSUNPVU5UUlkpCiAgICAgICAgICAgIG5ldHdvcmsuaG9zdG5hbWUoY29uZmlnLkNGR19FRElUT1JfV0lGSV9TVEFfSE9TVE5BTUUuZm9ybWF0KCJfIiArIGhlbHBlci5nZXRfc3lzdGVtX2lkKCkpKQoKICAgICAgICAgICAgd2xhbiA9IG5ldHdvcmsuV0xBTihuZXR3b3JrLlNUQV9JRikKICAgICAgICAgICAgd2xhbi5hY3RpdmUoVHJ1ZSkKICAgICAgICAgICAgd2xhbi5jb25maWcoZXNzaWQ9X3NzaWQsIHBhc3N3b3JkPV9wc2spCiAgICAgICAgICAgIAogICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gd2xhbi5pZmNvbmZpZygpCiAgICAgICAgCgoKICAgICAgCiAgICAgICAgCgpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgCiAgICBjbGFzcyByZWNpcGVfZWRpdG9yOgogICAgICAgIAogICAgICAgIGRlZiBfX2luaXRfXygpOgogICAgICAgICAgICBwYXNzCgogICAgICAgIGRlZiBoYXNfY2FwYWJpbGl0aWVzKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICBkZWYgZGlzYWJsZV93aWZpKHNlbGYpOgogICAgICAgICAgICBwYXNzCiAgICAgICAgCiAgICAgICAgZGVmIHNldHVwX3dlYnNlcnZlcihzZWxmKToKICAgICAgICAgICAgcGFzcwogICAgICAgIAogICAgICAgIGRlZiBzdG9wX3dlYnNlcnZlcihzZWxmKToKICAgICAgICAgICAgcGFzcwoKICAgICAgICBkZWYgaGFuZGxlX2Nvbm5lY3Rpb24oc2VsZik6CiAgICAgICAgICAgIHBhc3MKCiAgICAgICAgZGVmIG9wZW5fYWNjZXNzcG9pbnQoc2VsZiwgX3NzaWQ6IHN0ciwgX3Bzazogc3RyID0gTm9uZSkgLT4gc3RyOgogICAgICAgICAgICByZXR1cm4gIiI=", "menu_entry_restore.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSByZWNpcGVfdXBkYXRlciBpbXBvcnQgcmVjaXBlX3VwZGF0ZXIKZnJvbSBtZW51X21hbmFnZXIgaW1wb3J0IG1lbnVfbWFuYWdlcgpjbGFzcyBtZW51X2VudHJ5X3Jlc3RvcmUobWVudV9lbnRyeS5tZW51X2VudHJ5KToKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygiUkVTVE9SRSBGSVJNV0FSRSIsICJSZXN0b3JlIHN5c3RlbSBmaXJtd2FyZSIpCgogICAgZGVmIHByZXZpZXcoc2VsZik6CiAgICAgICAgcHJpbnQoInByZXZpZXcge30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIHVpKCkuc2hvd19yZWNpcGVfaW5mb3JtYXRpb24oc2VsZi5uYW1lLCBzZWxmLmRlc2NyaXB0aW9uKQoKCiAgICBkZWYgYWN0aXZhdGUoc2VsZik6CiAgICAgICAgcHJpbnQoImFjdGl2YXRlIHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLnNob3dfcmVjaXBlX2luZm9ybWF0aW9uKCJTVVJFID8iLCAiUHJlc3Mgb2sgdG8gcmVzZXQgdGhlIGZpcm1ud2FyZS4gQ3VzdG9tIHJlY2lwZXMgd2lsbCBiZSBkZWxldGVkIikKICAgICAgICBsZWRyaW5nKCkuc2V0X25lb3BpeGVsX2Z1bGwoNTAsIDAsIDApCgogICAgZGVmIHRlYXJkb3duKHNlbGYpOgogICAgICAgIHByaW50KCJ0ZWFyZG93biB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCgoKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CiAgICAgICAgaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX05BVklHQVRJT046CiAgICAgICAgICAgIGlmIF9zeXN0ZW1fY29tbWFuZC5hY3Rpb24gPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuTkFWSUdBVElPTl9FTlRFUjoKICAgICAgICAgICAgICAgIGxlZHJpbmcoKS5zZXRfbmVvcGl4ZWxfZnVsbCg1MCwgMCwgNTApCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgaW1wb3J0IG1hY2hpbmUKICAgICAgICAgICAgICAgICAgICBpbXBvcnQgZnNkYXRhcmVjb25zdHJ1Y3RvcgogICAgICAgICAgICAgICAgICAgIGZzZGF0YXJlY29uc3RydWN0b3IucmVzdG9yZShUcnVlKQogICAgICAgICAgICAgICAgICAgIG1hY2hpbmUucmVzZXQoKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgIHByaW50KGUpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBtZW51X21hbmFnZXIoKS5leGl0X2N1cnJlbnRfbWVudSgpCiAgICAgICAgICAg", "menu_entry_hardwaretest.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSBtZW51X21hbmFnZXIgaW1wb3J0IG1lbnVfbWFuYWdlcgpjbGFzcyBtZW51X2VudHJ5X2hhcmR3YXJldGVzdChtZW51X2VudHJ5Lm1lbnVfZW50cnkpOgoKCiAgIAogICAgbGFzdF90aW1lcl9ldmVudDogc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQgPSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCgpCiAgICBsYXN0X3NjYWxlX2V2ZW50OiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCA9IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kKCkKICAgIGxhc3RfdXNlcl9ldmVudDogc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQgPSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCgpCgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oIkhBUkRXQVJFIFRFU1QiLCAiVGVzdHMgdGhlIGludGVybmFsIGhhcmR3YXJlIikKCiAgICBkZWYgcHJldmlldyhzZWxmKToKICAgICAgICBwcmludCgicHJldmlldyBje30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIHVpKCkuc2hvd19yZWNpcGVfaW5mb3JtYXRpb24oc2VsZi5uYW1lLCBzZWxmLmRlc2NyaXB0aW9uKQoKCiAgICBkZWYgYWN0aXZhdGUoc2VsZik6CiAgICAgICAgcHJpbnQoImFjdGl2YXRlIHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLmNsZWFyKCkKICAgICAgICAKCgogICAgZGVmIHRlYXJkb3duKHNlbGYpOgogICAgICAgIHByaW50KCJ0ZWFyZG93biB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCgoKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CiAgICAgICAKICAgICAgICBpZiBfc3lzdGVtX2NvbW1hbmQudHlwZSA9PSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5DT01NQU5EX1RZUEVfVElNRVJfSVJROgogICAgICAgICAgIHNlbGYubGFzdF90aW1lcl9ldmVudCA9IF9zeXN0ZW1fY29tbWFuZAogICAgICAgIGVsaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX1NDQUxFX1ZBTFVFOgogICAgICAgICAgIHNlbGYubGFzdF9zY2FsZV9ldmVudCA9IF9zeXN0ZW1fY29tbWFuZAogICAgICAgIGVsaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX05BVklHQVRJT046CiAgICAgICAgICAgIHNlbGYubGFzdF91c2VyX2V2ZW50ID0gX3N5c3RlbV9jb21tYW5kCiAgICAgICAgICAgIAogICAgICAgIHVpKCkuc2hvd19tc2coInQ6e30gYTp7fSBiOnt9IHQ6e30gczp7fSIuZm9ybWF0KHNlbGYubGFzdF91c2VyX2V2ZW50LnR5cGUsIHNlbGYubGFzdF91c2VyX2V2ZW50LmFjdGlvbiwgc2VsZi5sYXN0X3VzZXJfZXZlbnQudmFsdWUsIHNlbGYubGFzdF90aW1lcl9ldmVudC52YWx1ZSwgc2VsZi5sYXN0X3NjYWxlX2V2ZW50LnZhbHVlKSk=", "menu_manager.py": "aW1wb3J0IG1lbnVfZW50cnkKaW1wb3J0IHN5c3RlbV9jb21tYW5kCmltcG9ydCBsZWRyaW5nCmZyb20gc2luZ2xldG9uIGltcG9ydCBzaW5nbGV0b24KCgpAc2luZ2xldG9uCmNsYXNzIG1lbnVfbWFuYWdlcjoKCgogICAgTUVOVV9TVEFURV9JTkFDVElWRSA9IDAKICAgIE1FTlVfU1RBVEVfQUNUSVZFID0gMQoKICAgIG1lbnVfZW50aXJlczogW21lbnVfZW50cnkubWVudV9lbnRyeV0gPSBbXQoKICAgIGN1cnJlbnRfYWN0aXZlX2VudHJ5X2luZGV4OiBpbnQgPSAtMQogICAgY3VycmVudF9tZW51X3N0YXRlOiBpbnQgPSBNRU5VX1NUQVRFX0lOQUNUSVZFCgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHBhc3MKCiAgICAKICAgIGRlZiBhZGRfc3ViZW50cmllcyhzZWxmLCBfZW50cnk6IG1lbnVfZW50cnkubWVudV9lbnRyeSk6CgogICAgICAgIHNlbGYubWVudV9lbnRpcmVzLmFwcGVuZChfZW50cnkpCgogICAgICAgICMgVEhFIEZJUlNUIEVOVFJZIEFEREVEIElTIFRIRSBTVEFSVElORyBFTlRSWQogICAgICAgIGlmIHNlbGYuY3VycmVudF9hY3RpdmVfZW50cnlfaW5kZXggPCAwOgogICAgICAgICAgICBzZWxmLmN1cnJlbnRfYWN0aXZlX2VudHJ5X2luZGV4ID0gMAogICAgICAgICAgICBzZWxmLmRpc3BsYXlfcHJldmlldygpCiAgICAgICAgICAgIAogICAgCgoKCiAgICBkZWYgZ2V0X21lbnVfZW50cnkoc2VsZikgLT4gbWVudV9lbnRyeS5tZW51X2VudHJ5OgogICAgICAgIGlmIHNlbGYuY3VycmVudF9hY3RpdmVfZW50cnlfaW5kZXggPCAwOgogICAgICAgICAgICBwcmludCgibm8gbWVudV9lbnRyaWVzIGFkZGVkID8iKQogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIGVsaWYgc2VsZi5jdXJyZW50X2FjdGl2ZV9lbnRyeV9pbmRleCA+PSBsZW4oc2VsZi5tZW51X2VudGlyZXMpOgogICAgICAgICAgICBzZWxmLmN1cnJlbnRfYWN0aXZlX2VudHJ5X2luZGV4ID0gMAoKICAgICAgICByZXR1cm4gc2VsZi5tZW51X2VudGlyZXNbc2VsZi5jdXJyZW50X2FjdGl2ZV9lbnRyeV9pbmRleF0KCgogICAgZGVmIGV4aXRfY3VycmVudF9tZW51KHNlbGYpOgogICAgICAgIGlmIHNlbGYuZ2V0X21lbnVfZW50cnkoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5nZXRfbWVudV9lbnRyeSgpLnRlYXJkb3duKCkKICAgICAgICAgICAgc2VsZi5kaXNwbGF5X3ByZXZpZXcoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuY3VycmVudF9hY3RpdmVfZW50cnlfaW5kZXggPSAwCgogICAgICAgIHNlbGYuY3VycmVudF9tZW51X3N0YXRlID0gc2VsZi5NRU5VX1NUQVRFX0lOQUNUSVZFCgoKICAgIGRlZiBkaXNwbGF5X3ByZXZpZXcoc2VsZik6CiAgICAgICAgc2VsZi5nZXRfbWVudV9lbnRyeSgpLnByZXZpZXcoKQogICAgICAgICMgT1BUSU9OQUwgRElTUExBWSBMRUQgU1RBVEUKICAgICAgICBsZWRyaW5nLmxlZHJpbmcoKS5zZXRfbmVvcGl4ZWxfc3Bpbm5lcihzZWxmLmN1cnJlbnRfYWN0aXZlX2VudHJ5X2luZGV4LCBsZW4oc2VsZi5tZW51X2VudGlyZXMpLCBsZWRyaW5nLmxlZHJpbmcoKS5DT0xPUl9QUkVTRVRfSFNWX0hfX1BJTkssIGxlZHJpbmcubGVkcmluZygpLkNPTE9SX1BSRVNFVF9IU1ZfSF9fQkxVRSkKICAgICAgICAKICAgIGRlZiBwcm9jZXNzX3VzZXJfY29tbWFuZHMoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CiAgICAgICAgaWYgc2VsZi5nZXRfbWVudV9lbnRyeSgpIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIAogICAgICAgIAogICAgICAgIGlmIHNlbGYuY3VycmVudF9tZW51X3N0YXRlID09IHNlbGYuTUVOVV9TVEFURV9JTkFDVElWRToKICAgICAgICAgICAgaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX05BVklHQVRJT046CgogICAgICAgICAgICAgICAgIyBTQ1JPTCBUSE9VR0ggTUVOVVMKICAgICAgICAgICAgICAgIGlmIF9zeXN0ZW1fY29tbWFuZC5hY3Rpb24gPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuTkFWSUdBVElPTl9MRUZUOgogICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudF9hY3RpdmVfZW50cnlfaW5kZXggPSAoc2VsZi5jdXJyZW50X2FjdGl2ZV9lbnRyeV9pbmRleCArIDEpICUgbGVuKHNlbGYubWVudV9lbnRpcmVzKQogICAgICAgICAgICAgICAgICAgIHByaW50KHNlbGYuY3VycmVudF9hY3RpdmVfZW50cnlfaW5kZXgpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaXNwbGF5X3ByZXZpZXcoKQogICAgICAgICAgICAgICAgZWxpZiBfc3lzdGVtX2NvbW1hbmQuYWN0aW9uID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLk5BVklHQVRJT05fUklHSFQ6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50X2FjdGl2ZV9lbnRyeV9pbmRleCA9IChzZWxmLmN1cnJlbnRfYWN0aXZlX2VudHJ5X2luZGV4IC0gMSkgJSBsZW4oc2VsZi5tZW51X2VudGlyZXMpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaXNwbGF5X3ByZXZpZXcoKQogICAgICAgICAgICAgICAgIyBFTlRFUiBNRU5VCiAgICAgICAgICAgICAgICBlbGlmIF9zeXN0ZW1fY29tbWFuZC5hY3Rpb24gPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuTkFWSUdBVElPTl9FTlRFUjoKICAgICAgICAgICAgICAgICAgICBzZWxmLmdldF9tZW51X2VudHJ5KCkuYWN0aXZhdGUoKQogICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudF9tZW51X3N0YXRlID0gc2VsZi5NRU5VX1NUQVRFX0FDVElWRQoKICAgICAgICBlbGlmIHNlbGYuY3VycmVudF9tZW51X3N0YXRlID09IHNlbGYuTUVOVV9TVEFURV9BQ1RJVkU6CiAgICAgICAgICAgIGlmIF9zeXN0ZW1fY29tbWFuZC50eXBlID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLkNPTU1BTkRfVFlQRV9OQVZJR0FUSU9OIGFuZCBfc3lzdGVtX2NvbW1hbmQuYWN0aW9uID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLk5BVklHQVRJT05fRVhJVDoKICAgICAgICAgICAgICAgICMgTEVBVkUgTUVOVQogICAgICAgICAgICAgICAgc2VsZi5leGl0X2N1cnJlbnRfbWVudSgpCiAgICAgICAgICAgICMgQUxMIE9USEVSIElOUFVUIFdJTEwgQkUgUEFTU0VEIFRPIFRIRSBNRU5VIEVOVFJZIElUU0VMRgogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5nZXRfbWVudV9lbnRyeSgpLnVwZGF0ZShfc3lzdGVtX2NvbW1hbmQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5leGl0X2N1cnJlbnRfbWVudSgpICAgIAoKCiAgICBkZWYgcHJvY2Vzc19zeXN0ZW1fY29tbWFuZHMoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZCk6CiAgICAgICAgaWYgc2VsZi5jdXJyZW50X21lbnVfc3RhdGUgPT0gc2VsZi5NRU5VX1NUQVRFX0FDVElWRToKICAgICAgICAgICAgc2VsZi5nZXRfbWVudV9lbnRyeSgpLnVwZGF0ZShfc3lzdGVtX2NvbW1hbmQpCg=="}

# FOR DEBUGGING
ALWAYS_HARD_RESTORE: bool = False

RESTORE_IGNORED_FILES_LIST = ['static_modules', 'thridparty_libs', 'boot.py', 'lib', 'fsdatareconstructor']

def restore_filesystem(_basepath: str = "/", _override: bool = False, _erase: bool = False):
    import ubinascii
    import os

    if _erase:
        print("erase enabled")
        for f in os.listdir():
            if f in __file__:
                print("skipping {} to vaoid installer override".format(f))
                continue 
            
            # UGLY REWORK
            for n in RESTORE_IGNORED_FILES_LIST:
                if n in f:
                    print("skipping {} to vaoid installer override".format(f))
                    continue

            os.remove(f)

    for k in FILE_DATA:

        if k in os.listdir() and not _override:
            continue
        
        print(k)
        d = FILE_DATA[k]
        ubinascii.a2b_base64(d)

        with open(_basepath + "/" + k, "w") as file:
            file.write(ubinascii.a2b_base64(d))

    # CLEANUP
    del ubinascii
    del os


def restore(_hard_restore: bool = False):
    import machine
    import time
    RESTORE_BUTTON_PIN: int = 15
    RESTORE_LED_PIN: int = 25

    push_button_restore = machine.Pin(RESTORE_BUTTON_PIN, machine.Pin.IN, machine.Pin.PULL_UP)
    led_onboard = machine.Pin(RESTORE_LED_PIN, machine.Pin.OUT)

    if not push_button_restore.value() or ALWAYS_HARD_RESTORE or _hard_restore:
        led_onboard.on()
        time.sleep(0.2)
        led_onboard.off()
        time.sleep(0.2)
        led_onboard.on()
        time.sleep(0.2)
        led_onboard.on()
        # RESTORE HARD OVERRIDE USER CHANGES
        restore_filesystem(_override=True, _erase=True)
        led_onboard.off()

    else:
        led_onboard.on()
        # RESTORE SOFT ONLY ADD MISSING FILES IN VIRTUAL FS
        restore_filesystem()
        led_onboard.off()

    # RESTORE PIN STATE
    machine.Pin(RESTORE_BUTTON_PIN, machine.Pin.IN, machine.Pin.OPEN_DRAIN)
    machine.Pin(RESTORE_LED_PIN, machine.Pin.IN)
    
    del machine


if __name__ == "__main__":
    restore()

