FILE_DATA = {"example_recipes.py": "RVhBTVBMRV9SRUNJUEVTX0NPTExFQ1RJT046IGRpY3QgPSB7CiAgICAiZXhhbXBsZV9yZWNpcGUucmVjaXBlIjogewogICAgICAgICJuYW1lIjogIkVYQU1QTEVfIFJFQ0lQRSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgbmljZSBFeGFtcGxlIENvY2t0YWlsIiwKICAgICAgICAidmVyc2lvbiI6ICIxLjAuMCIsCiAgICAgICAgImluZ3JlZGllbnRzIjogeyIwIjogIkEiLCAiMSI6ICJCIiwgIjIiOiAiQyJ9LAogICAgICAgICJzdGVwcyI6IFsKICAgICAgICAgICAgeyJhY3Rpb24iOiAic2NhbGUiLCAiaW5ncmVkaWVudCI6ICIwIiwgImFtb3VudCI6IDEwfSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAiY29uZmlybSIsICJ0ZXh0IjogInNoYWtlIGl0In0sCiAgICAgICAgICAgIHsiYWN0aW9uIjogIndhaXQiLCAidGV4dCI6ICJ3YWl0IGZvciBpdCIsICJhbW91bnQiOiAyMH0sCiAgICAgICAgXSwKICAgIH0sCiAgICAiVGVxdWlsYV9TdW5yaXNlLnJlY2lwZSI6IHsKICAgICAgICAibmFtZSI6ICJUZXF1aWxhIFN1bnJpc2UiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIG5pY2UgVGVxdWlsYSBTdW5yaXNlIENvY2t0YWlsIiwKICAgICAgICAidmVyc2lvbiI6ICIxLjAuMCIsCiAgICAgICAgImluZ3JlZGllbnRzIjogeyIwIjogIndlacOfZXIgVGVxdWlsYSIsICIxIjogIk9yYW5nZW5zYWZ0IiwgIjIiOiAiR3JlbmFkaW5lIn0sCiAgICAgICAgInN0ZXBzIjogWwogICAgICAgICAgICB7ImFjdGlvbiI6ICJzY2FsZSIsICJpbmdyZWRpZW50IjogIjAiLCAiYW1vdW50IjogMTB9LAogICAgICAgICAgICB7ImFjdGlvbiI6ICJzY2FsZSIsICJpbmdyZWRpZW50IjogIjEiLCAiYW1vdW50IjogMTIwfSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAiY29uZmlybSIsICJ0ZXh0IjogIkFERCBJQ0UifSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAic2NhbGUiLCAiaW5ncmVkaWVudCI6ICIyIiwgImFtb3VudCI6IDQwfSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAid2FpdCIsICJ0ZXh0IjogIldBSVQgRk9SIFNFVFRMRSBET1dOIiwgImFtb3VudCI6IDEwfSwKICAgICAgICBdLAogICAgfSwKICAgICJTdHJhd2JlcnJ5X0NvbGFkYS5yZWNpcGUiOiB7CiAgICAgICAgIm5hbWUiOiAiU3RyYXdiZXJyeSBDb2xhZGEiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIGZydWl0eSBzdHJhd2JlcnJ5IGNvY2t0YWlsIHdpdGggY29jb251dCIsCiAgICAgICAgInZlcnNpb24iOiAiMS4wLjAiLAogICAgICAgICJpbmdyZWRpZW50cyI6IHsKICAgICAgICAgICAgIjAiOiAiMTAgU3RyYXdiZXJyaWVzIiwKICAgICAgICAgICAgIjEiOiAiQ29jb251dC1KdWljZSIsCiAgICAgICAgICAgICIyIjogIkNyZWFtIiwKICAgICAgICAgICAgIjMiOiAiUGluZWFwcGxlLUp1aWNlIiwKICAgICAgICAgICAgIjQiOiAid2hpdGUgUnVtIiwKICAgICAgICAgICAgIjUiOiAiQ3J1c2hlZCBJY2UiLAogICAgICAgIH0sCiAgICAgICAgInN0ZXBzIjogWwogICAgICAgICAgICB7ImFjdGlvbiI6ICJjb25maXJtIiwgInRleHQiOiAicHVyZWUgc3RyYXdiZXJyaWVzIn0sCiAgICAgICAgICAgIHsiYWN0aW9uIjogImNvbmZpcm0iLCAidGV4dCI6ICJhZGQgMS8yIGNydXNoZWQgaWNlIn0sCiAgICAgICAgICAgIHsiYWN0aW9uIjogInNjYWxlIiwgImluZ3JlZGllbnQiOiAiMSIsICJhbW91bnQiOiA2MH0sCiAgICAgICAgICAgIHsiYWN0aW9uIjogInNjYWxlIiwgImluZ3JlZGllbnQiOiAiMiIsICJhbW91bnQiOiAzMH0sCiAgICAgICAgICAgIHsiYWN0aW9uIjogInNjYWxlIiwgImluZ3JlZGllbnQiOiAiMyIsICJhbW91bnQiOiA4MH0sCiAgICAgICAgICAgIHsiYWN0aW9uIjogInNjYWxlIiwgImluZ3JlZGllbnQiOiAiNCIsICJhbW91bnQiOiA1MH0sCiAgICAgICAgICAgIHsiYWN0aW9uIjogIndhaXQiLCAidGV4dCI6ICJTaGFrZSIsICJhbW91bnQiOiAzMH0sCiAgICAgICAgXSwKICAgIH0sCn0K", "main.py": "", "ui.py": "", "helper.py": "aW1wb3J0IHRpbWUNCmltcG9ydCB1YmluYXNjaWkNCmltcG9ydCBtYWNoaW5lDQppbXBvcnQgY29uZmlnDQppbXBvcnQgbmVvcGl4ZWwNCmltcG9ydCByYW5kb20NCmltcG9ydCBzeXMNCg0KZGVmIG1pbGxpcygpOg0KICAgIHJldHVybiByb3VuZCh0aW1lLnRpbWUoKSAqIDEwMDApDQoNCmRlZiBmbWFwKHMsIGExLCBhMiwgYjEsIGIyKSAtPiBmbG9hdDoNCiAgICByZXR1cm4gYjEgKyAocyAtIGExKSAqIChiMiAtIGIxKSAvIChhMiAtIGExKQ0KDQpkZWYgaW1hcChzLCBhMSwgYTIsIGIxLCBiMikgLT4gaW50Og0KICAgIHJldHVybiBiMSArIChzIC0gYTEpICogKGIyIC0gYjEpIC8gKGEyIC0gYTEpDQoNCmRlZiBnZXRfc3lzdGVtX2lkKCk6DQogICAgcmV0dXJuIHViaW5hc2NpaS5oZXhsaWZ5KG1hY2hpbmUudW5pcXVlX2lkKCkpLmRlY29kZSgndXRmLTgnKQ0KDQpkZWYgc2V0X25lb3BpeGVsX2Z1bGwoX25lb3BpeGVscmluZywgX3IsIF9nLCBfYik6DQogICAgZm9yIGkgaW4gcmFuZ2UoY29uZmlnLkNGR19ORU9QSVhFTF9MRURfQ09VTlQpOg0KICAgICAgICBfbmVvcGl4ZWxyaW5nW2ldID0gKF9yLCBfZywgX2IpDQogICAgX25lb3BpeGVscmluZy53cml0ZSgpDQoNCmRlZiBzZXRfbmVvcGl4ZWxfcmFuZG9tKF9uZW9waXhlbHJpbmcsIF9lcjogYm9vbCA9IEZhbHNlLCBfZWc6IGJvb2wgPSBGYWxzZSwgX2ViOiBib29sID0gVHJ1ZSk6DQogICAgcjogaW50ID0gaW50KDEyOCogcmFuZG9tLnJhbmRvbSgpKSAqIF9lcg0KICAgIGc6IGludCA9IGludCgxMjgqIHJhbmRvbS5yYW5kb20oKSkgKiBfZWcNCiAgICBiOiBpbnQgPSBpbnQoMTI4KiByYW5kb20ucmFuZG9tKCkpICogX2ViDQogICAgc2V0X25lb3BpeGVsX2Z1bGwoX25lb3BpeGVscmluZywgciwgZywgYikNCg0KZGVmIGhhc193aWZpKCk6DQogICAgaWYgJ1Jhc3BiZXJyeSBQaSBQaWNvIFcnIGluIHN0cihzeXMuaW1wbGVtZW50YXRpb24pOg0KICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgIHJldHVybiBGYWxzZQ0K", "config.py": "IyBIQVJEV0FSRSBDT05GSUcgU1RBUlRTIEhFUkUKCgojIHNzZDEzMDYgPSAxMjh4NjQgb2xkZWQgd2l0aCBzc2QxMzA2IGNvbnRyb2xsZXIKIyBzaDExMDYgPSAxMjh4NjQgb2xkZWQgd2l0aCBzc2gxMTA2IGNvbnRyb2xsZXIKQ0ZHX0RJU1BMQVlfVFlQRSA9ICJzaDExMDYiICMgc2gxMTA2IHNoMTEwNiBzc2QxMzA2IGlsaTkzNApDRkdfQ0FMSUJSQVRJT05fV0VJR0hUX1dFSUdIVCA9IDUwCkNGR19TQ0FMRV9HTEFTU19BRERJVElPTl9ORVhUX1NURVBfV0VJR0hUID0gNTAgIyBYZyBtb3JlIG9uIHNjYWxlIHRvIHRyaWdnZXIgbmV4dCBzdGVwIGluIHJlY2lwZSA9PiAxLzMgd2VpZ2h0IG9mIGEgdHlwaWNhbCBnbGFzcwpDRkdfVVNFUl9MT05HX0JVVFRPTl9QUkVTU19USU1FID0gMTAwMCAjIHRpbWUgdG8gcmVnc2l0ZXIgYSBsb25nIGJ1dHRvbiBwcmVzcyBpbiBtcwpDRkdfTkVUV09SS19IT1NUTkFNRSA9ICJtaXhhbmRtZWFzdXJlYmVycnkiICMgeFh4WC5sb2NhbApDRkdfTkVUV09SS19XSUZJQ09VTlRSWSA9ICJERSIgIyBERSBVUwpDRkdfRElTUExBWV9VU0VSX1FSX0NPREUgPSBUcnVlICMgVHJ1ZSBGYWxzZQpDRkdfTkVPUElYRUxfTEVEX0NPVU5UID0gMjYgIzYwCkNGR19ORU9QSVhFTF9MRURfU1RBUlRfT0ZGU0VUID0gKENGR19ORU9QSVhFTF9MRURfQ09VTlQvMikgIyBNQVggQ0ZHX05FT1BJWEVMX0xFRF9DT1VOVCBUTyBST1RBVEUgVEhFIFNUQVJUUE9JTlQKCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjIyMjIyBQSU4gQ09ORklHICMjIyMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBORU9QSVhFTCBSSU5HCkNGR19ORU9QSVhFTF9QSU4gPSAyOAojIEJVVFRPTlMKQ0ZHX0JVVFRPTl9VUF9QSU4gPSAxMgpDRkdfQlVUVE9OX0RPV05fUElOID0gMTMKIyBIWDcxMSBNT0RVTEUKQ0ZHX0hYNzExX0RPVVRfUElOID0gNQpDRkdfSFg3MTFfU0NLX1BJTiA9IDEyCiMgW09QVElPTkFMXSBTRCBDQVJECkNGR19TRENBUkRfU1BJSU5TVEFOQ0UgPSAxCkNGR19TRENBUkRfU0NLX1BJTiA9IDEwCkNGR19TRENBUkRfTU9TSV9QSU4gPSAxMQpDRkdfU0RDQVJEX01JU09fUElOID0gOApDRkdfU0RDQVJEX0NTX1BJTiA9IDkKIyBbT1BUSU9OQUxdIFNTRDEzMDYgb3IgU0gxMTA2CkNGR19PTEVEX0kyQ0lOU1RBTkNFID0gMApDRkdfT0xFRF9TQ0xfUElOID0gMjEKQ0ZHX09MRURfU0RBX1BJTiA9IDIwCkNGR19PTEVEX0FERFIgPSAweDNjCkNGR19ESVNQTEFZX0xJTkVfU1BBQ0lORyA9IDkgIyBwaXhlbCBmb250IHdpZHRoCkNGR19ESVNQTEFZX0NIQVJfV0lEVEggPSA4CgpTQ1JfV0lEVEggPSAxMjgKU0NSX0hFSUdIVCA9IDY0CgoKICAgIAo=", "recipe_loader.py": "", "sdcard.py": "IiIiCk1pY3JvUHl0aG9uIGRyaXZlciBmb3IgU0QgY2FyZHMgdXNpbmcgU1BJIGJ1cy4KClJlcXVpcmVzIGFuIFNQSSBidXMgYW5kIGEgQ1MgcGluLiAgUHJvdmlkZXMgcmVhZGJsb2NrcyBhbmQgd3JpdGVibG9ja3MKbWV0aG9kcyBzbyB0aGUgZGV2aWNlIGNhbiBiZSBtb3VudGVkIGFzIGEgZmlsZXN5c3RlbS4KCkV4YW1wbGUgdXNhZ2Ugb24gcHlib2FyZDoKCiAgICBpbXBvcnQgcHliLCBzZGNhcmQsIG9zCiAgICBzZCA9IHNkY2FyZC5TRENhcmQocHliLlNQSSgxKSwgcHliLlBpbi5ib2FyZC5YNSkKICAgIHB5Yi5tb3VudChzZCwgJy9zZDInKQogICAgb3MubGlzdGRpcignLycpCgpFeGFtcGxlIHVzYWdlIG9uIEVTUDgyNjY6CgogICAgaW1wb3J0IG1hY2hpbmUsIHNkY2FyZCwgb3MKICAgIHNkID0gc2RjYXJkLlNEQ2FyZChtYWNoaW5lLlNQSSgxKSwgbWFjaGluZS5QaW4oMTUpKQogICAgb3MubW91bnQoc2QsICcvc2QnKQogICAgb3MubGlzdGRpcignLycpCgoiIiIKCmZyb20gbWljcm9weXRob24gaW1wb3J0IGNvbnN0CmltcG9ydCB0aW1lCgoKX0NNRF9USU1FT1VUID0gY29uc3QoMTAwKQoKX1IxX0lETEVfU1RBVEUgPSBjb25zdCgxIDw8IDApCiMgUjFfRVJBU0VfUkVTRVQgPSBjb25zdCgxIDw8IDEpCl9SMV9JTExFR0FMX0NPTU1BTkQgPSBjb25zdCgxIDw8IDIpCiMgUjFfQ09NX0NSQ19FUlJPUiA9IGNvbnN0KDEgPDwgMykKIyBSMV9FUkFTRV9TRVFVRU5DRV9FUlJPUiA9IGNvbnN0KDEgPDwgNCkKIyBSMV9BRERSRVNTX0VSUk9SID0gY29uc3QoMSA8PCA1KQojIFIxX1BBUkFNRVRFUl9FUlJPUiA9IGNvbnN0KDEgPDwgNikKX1RPS0VOX0NNRDI1ID0gY29uc3QoMHhGQykKX1RPS0VOX1NUT1BfVFJBTiA9IGNvbnN0KDB4RkQpCl9UT0tFTl9EQVRBID0gY29uc3QoMHhGRSkKCgpjbGFzcyBTRENhcmQ6CiAgICBkZWYgX19pbml0X18oc2VsZiwgc3BpLCBjcywgYmF1ZHJhdGU9MTMyMDAwMCk6CiAgICAgICAgc2VsZi5zcGkgPSBzcGkKICAgICAgICBzZWxmLmNzID0gY3MKCiAgICAgICAgc2VsZi5jbWRidWYgPSBieXRlYXJyYXkoNikKICAgICAgICBzZWxmLmR1bW15YnVmID0gYnl0ZWFycmF5KDUxMikKICAgICAgICBzZWxmLnRva2VuYnVmID0gYnl0ZWFycmF5KDEpCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoNTEyKToKICAgICAgICAgICAgc2VsZi5kdW1teWJ1ZltpXSA9IDB4RkYKICAgICAgICBzZWxmLmR1bW15YnVmX21lbW9yeXZpZXcgPSBtZW1vcnl2aWV3KHNlbGYuZHVtbXlidWYpCgogICAgICAgICMgaW5pdGlhbGlzZSB0aGUgY2FyZAogICAgICAgIHNlbGYuaW5pdF9jYXJkKGJhdWRyYXRlKQoKICAgIGRlZiBpbml0X3NwaShzZWxmLCBiYXVkcmF0ZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBtYXN0ZXIgPSBzZWxmLnNwaS5NQVNURVIKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgICMgb24gRVNQODI2NgogICAgICAgICAgICBzZWxmLnNwaS5pbml0KGJhdWRyYXRlPWJhdWRyYXRlLCBwaGFzZT0wLCBwb2xhcml0eT0wKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgb24gcHlib2FyZAogICAgICAgICAgICBzZWxmLnNwaS5pbml0KG1hc3RlciwgYmF1ZHJhdGU9YmF1ZHJhdGUsIHBoYXNlPTAsIHBvbGFyaXR5PTApCgogICAgZGVmIGluaXRfY2FyZChzZWxmLCBiYXVkcmF0ZSk6CiAgICAgICAgIyBpbml0IENTIHBpbgogICAgICAgIHNlbGYuY3MuaW5pdChzZWxmLmNzLk9VVCwgdmFsdWU9MSkKCiAgICAgICAgIyBpbml0IFNQSSBidXM7IHVzZSBsb3cgZGF0YSByYXRlIGZvciBpbml0aWFsaXNhdGlvbgogICAgICAgIHNlbGYuaW5pdF9zcGkoMTAwMDAwKQoKICAgICAgICAjIGNsb2NrIGNhcmQgYXQgbGVhc3QgMTAwIGN5Y2xlcyB3aXRoIGNzIGhpZ2gKICAgICAgICBmb3IgaSBpbiByYW5nZSgxNik6CiAgICAgICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCgogICAgICAgICMgQ01EMDogaW5pdCBjYXJkOyBzaG91bGQgcmV0dXJuIF9SMV9JRExFX1NUQVRFIChhbGxvdyA1IGF0dGVtcHRzKQogICAgICAgIGZvciBfIGluIHJhbmdlKDUpOgogICAgICAgICAgICBpZiBzZWxmLmNtZCgwLCAwLCAweDk1KSA9PSBfUjFfSURMRV9TVEFURToKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgT1NFcnJvcigibm8gU0QgY2FyZCIpCgogICAgICAgICMgQ01EODogZGV0ZXJtaW5lIGNhcmQgdmVyc2lvbgogICAgICAgIHIgPSBzZWxmLmNtZCg4LCAweDAxQUEsIDB4ODcsIDQpCiAgICAgICAgaWYgciA9PSBfUjFfSURMRV9TVEFURToKICAgICAgICAgICAgc2VsZi5pbml0X2NhcmRfdjIoKQogICAgICAgIGVsaWYgciA9PSAoX1IxX0lETEVfU1RBVEUgfCBfUjFfSUxMRUdBTF9DT01NQU5EKToKICAgICAgICAgICAgc2VsZi5pbml0X2NhcmRfdjEoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJhaXNlIE9TRXJyb3IoImNvdWxkbid0IGRldGVybWluZSBTRCBjYXJkIHZlcnNpb24iKQoKICAgICAgICAjIGdldCB0aGUgbnVtYmVyIG9mIHNlY3RvcnMKICAgICAgICAjIENNRDk6IHJlc3BvbnNlIFIyIChSMSBieXRlICsgMTYtYnl0ZSBibG9jayByZWFkKQogICAgICAgIGlmIHNlbGYuY21kKDksIDAsIDAsIDAsIEZhbHNlKSAhPSAwOgogICAgICAgICAgICByYWlzZSBPU0Vycm9yKCJubyByZXNwb25zZSBmcm9tIFNEIGNhcmQiKQogICAgICAgIGNzZCA9IGJ5dGVhcnJheSgxNikKICAgICAgICBzZWxmLnJlYWRpbnRvKGNzZCkKICAgICAgICBpZiBjc2RbMF0gJiAweEMwID09IDB4NDA6ICAjIENTRCB2ZXJzaW9uIDIuMAogICAgICAgICAgICBzZWxmLnNlY3RvcnMgPSAoKGNzZFs4XSA8PCA4IHwgY3NkWzldKSArIDEpICogMTAyNAogICAgICAgIGVsaWYgY3NkWzBdICYgMHhDMCA9PSAweDAwOiAgIyBDU0QgdmVyc2lvbiAxLjAgKG9sZCwgPD0yR0IpCiAgICAgICAgICAgIGNfc2l6ZSA9IChjc2RbNl0gJiAwYjExKSA8PCAxMCB8IGNzZFs3XSA8PCAyIHwgY3NkWzhdID4+IDYKICAgICAgICAgICAgY19zaXplX211bHQgPSAoY3NkWzldICYgMGIxMSkgPDwgMSB8IGNzZFsxMF0gPj4gNwogICAgICAgICAgICByZWFkX2JsX2xlbiA9IGNzZFs1XSAmIDBiMTExMQogICAgICAgICAgICBjYXBhY2l0eSA9IChjX3NpemUgKyAxKSAqICgyICoqIChjX3NpemVfbXVsdCArIDIpKSAqICgyKipyZWFkX2JsX2xlbikKICAgICAgICAgICAgc2VsZi5zZWN0b3JzID0gY2FwYWNpdHkgLy8gNTEyCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgT1NFcnJvcigiU0QgY2FyZCBDU0QgZm9ybWF0IG5vdCBzdXBwb3J0ZWQiKQogICAgICAgICMgcHJpbnQoJ3NlY3RvcnMnLCBzZWxmLnNlY3RvcnMpCgogICAgICAgICMgQ01EMTY6IHNldCBibG9jayBsZW5ndGggdG8gNTEyIGJ5dGVzCiAgICAgICAgaWYgc2VsZi5jbWQoMTYsIDUxMiwgMCkgIT0gMDoKICAgICAgICAgICAgcmFpc2UgT1NFcnJvcigiY2FuJ3Qgc2V0IDUxMiBibG9jayBzaXplIikKCiAgICAgICAgIyBzZXQgdG8gaGlnaCBkYXRhIHJhdGUgbm93IHRoYXQgaXQncyBpbml0aWFsaXNlZAogICAgICAgIHNlbGYuaW5pdF9zcGkoYmF1ZHJhdGUpCgogICAgZGVmIGluaXRfY2FyZF92MShzZWxmKToKICAgICAgICBmb3IgaSBpbiByYW5nZShfQ01EX1RJTUVPVVQpOgogICAgICAgICAgICB0aW1lLnNsZWVwX21zKDUwKQogICAgICAgICAgICBzZWxmLmNtZCg1NSwgMCwgMCkKICAgICAgICAgICAgaWYgc2VsZi5jbWQoNDEsIDAsIDApID09IDA6CiAgICAgICAgICAgICAgICAjIFNEU0MgY2FyZCwgdXNlcyBieXRlIGFkZHJlc3NpbmcgaW4gcmVhZC93cml0ZS9lcmFzZSBjb21tYW5kcwogICAgICAgICAgICAgICAgc2VsZi5jZHYgPSA1MTIKICAgICAgICAgICAgICAgICMgcHJpbnQoIltTRENhcmRdIHYxIGNhcmQiKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgcmFpc2UgT1NFcnJvcigidGltZW91dCB3YWl0aW5nIGZvciB2MSBjYXJkIikKCiAgICBkZWYgaW5pdF9jYXJkX3YyKHNlbGYpOgogICAgICAgIGZvciBpIGluIHJhbmdlKF9DTURfVElNRU9VVCk6CiAgICAgICAgICAgIHRpbWUuc2xlZXBfbXMoNTApCiAgICAgICAgICAgIHNlbGYuY21kKDU4LCAwLCAwLCA0KQogICAgICAgICAgICBzZWxmLmNtZCg1NSwgMCwgMCkKICAgICAgICAgICAgaWYgc2VsZi5jbWQoNDEsIDB4NDAwMDAwMDAsIDApID09IDA6CiAgICAgICAgICAgICAgICBzZWxmLmNtZCg1OCwgMCwgMCwgLTQpICAjIDQtYnl0ZSByZXNwb25zZSwgbmVnYXRpdmUgbWVhbnMga2VlcCB0aGUgZmlyc3QgYnl0ZQogICAgICAgICAgICAgICAgb2NyID0gc2VsZi50b2tlbmJ1ZlswXSAgIyBnZXQgZmlyc3QgYnl0ZSBvZiByZXNwb25zZSwgd2hpY2ggaXMgT0NSCiAgICAgICAgICAgICAgICBpZiBub3Qgb2NyICYgMHg0MDoKICAgICAgICAgICAgICAgICAgICAjIFNEU0MgY2FyZCwgdXNlcyBieXRlIGFkZHJlc3NpbmcgaW4gcmVhZC93cml0ZS9lcmFzZSBjb21tYW5kcwogICAgICAgICAgICAgICAgICAgIHNlbGYuY2R2ID0gNTEyCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICMgU0RIQy9TRFhDIGNhcmQsIHVzZXMgYmxvY2sgYWRkcmVzc2luZyBpbiByZWFkL3dyaXRlL2VyYXNlIGNvbW1hbmRzCiAgICAgICAgICAgICAgICAgICAgc2VsZi5jZHYgPSAxCiAgICAgICAgICAgICAgICAjIHByaW50KCJbU0RDYXJkXSB2MiBjYXJkIikKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgIHJhaXNlIE9TRXJyb3IoInRpbWVvdXQgd2FpdGluZyBmb3IgdjIgY2FyZCIpCgogICAgZGVmIGNtZChzZWxmLCBjbWQsIGFyZywgY3JjLCBmaW5hbD0wLCByZWxlYXNlPVRydWUsIHNraXAxPUZhbHNlKToKICAgICAgICBzZWxmLmNzKDApCgogICAgICAgICMgY3JlYXRlIGFuZCBzZW5kIHRoZSBjb21tYW5kCiAgICAgICAgYnVmID0gc2VsZi5jbWRidWYKICAgICAgICBidWZbMF0gPSAweDQwIHwgY21kCiAgICAgICAgYnVmWzFdID0gYXJnID4+IDI0CiAgICAgICAgYnVmWzJdID0gYXJnID4+IDE2CiAgICAgICAgYnVmWzNdID0gYXJnID4+IDgKICAgICAgICBidWZbNF0gPSBhcmcKICAgICAgICBidWZbNV0gPSBjcmMKICAgICAgICBzZWxmLnNwaS53cml0ZShidWYpCgogICAgICAgIGlmIHNraXAxOgogICAgICAgICAgICBzZWxmLnNwaS5yZWFkaW50byhzZWxmLnRva2VuYnVmLCAweEZGKQoKICAgICAgICAjIHdhaXQgZm9yIHRoZSByZXNwb25zZSAocmVzcG9uc2VbN10gPT0gMCkKICAgICAgICBmb3IgaSBpbiByYW5nZShfQ01EX1RJTUVPVVQpOgogICAgICAgICAgICBzZWxmLnNwaS5yZWFkaW50byhzZWxmLnRva2VuYnVmLCAweEZGKQogICAgICAgICAgICByZXNwb25zZSA9IHNlbGYudG9rZW5idWZbMF0KICAgICAgICAgICAgaWYgbm90IChyZXNwb25zZSAmIDB4ODApOgogICAgICAgICAgICAgICAgIyB0aGlzIGNvdWxkIGJlIGEgYmlnLWVuZGlhbiBpbnRlZ2VyIHRoYXQgd2UgYXJlIGdldHRpbmcgaGVyZQogICAgICAgICAgICAgICAgIyBpZiBmaW5hbDwwIHRoZW4gc3RvcmUgdGhlIGZpcnN0IGJ5dGUgdG8gdG9rZW5idWYgYW5kIGRpc2NhcmQgdGhlIHJlc3QKICAgICAgICAgICAgICAgIGlmIGZpbmFsIDwgMDoKICAgICAgICAgICAgICAgICAgICBzZWxmLnNwaS5yZWFkaW50byhzZWxmLnRva2VuYnVmLCAweEZGKQogICAgICAgICAgICAgICAgICAgIGZpbmFsID0gLTEgLSBmaW5hbAogICAgICAgICAgICAgICAgZm9yIGogaW4gcmFuZ2UoZmluYWwpOgogICAgICAgICAgICAgICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCiAgICAgICAgICAgICAgICBpZiByZWxlYXNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYuY3MoMSkKICAgICAgICAgICAgICAgICAgICBzZWxmLnNwaS53cml0ZShiIlx4ZmYiKQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlCgogICAgICAgICMgdGltZW91dAogICAgICAgIHNlbGYuY3MoMSkKICAgICAgICBzZWxmLnNwaS53cml0ZShiIlx4ZmYiKQogICAgICAgIHJldHVybiAtMQoKICAgIGRlZiByZWFkaW50byhzZWxmLCBidWYpOgogICAgICAgIHNlbGYuY3MoMCkKCiAgICAgICAgIyByZWFkIHVudGlsIHN0YXJ0IGJ5dGUgKDB4ZmYpCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoX0NNRF9USU1FT1VUKToKICAgICAgICAgICAgc2VsZi5zcGkucmVhZGludG8oc2VsZi50b2tlbmJ1ZiwgMHhGRikKICAgICAgICAgICAgaWYgc2VsZi50b2tlbmJ1ZlswXSA9PSBfVE9LRU5fREFUQToKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIHRpbWUuc2xlZXBfbXMoMSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLmNzKDEpCiAgICAgICAgICAgIHJhaXNlIE9TRXJyb3IoInRpbWVvdXQgd2FpdGluZyBmb3IgcmVzcG9uc2UiKQoKICAgICAgICAjIHJlYWQgZGF0YQogICAgICAgIG12ID0gc2VsZi5kdW1teWJ1Zl9tZW1vcnl2aWV3CiAgICAgICAgaWYgbGVuKGJ1ZikgIT0gbGVuKG12KToKICAgICAgICAgICAgbXYgPSBtdls6IGxlbihidWYpXQogICAgICAgIHNlbGYuc3BpLndyaXRlX3JlYWRpbnRvKG12LCBidWYpCgogICAgICAgICMgcmVhZCBjaGVja3N1bQogICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCiAgICAgICAgc2VsZi5zcGkud3JpdGUoYiJceGZmIikKCiAgICAgICAgc2VsZi5jcygxKQogICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCgogICAgZGVmIHdyaXRlKHNlbGYsIHRva2VuLCBidWYpOgogICAgICAgIHNlbGYuY3MoMCkKCiAgICAgICAgIyBzZW5kOiBzdGFydCBvZiBibG9jaywgZGF0YSwgY2hlY2tzdW0KICAgICAgICBzZWxmLnNwaS5yZWFkKDEsIHRva2VuKQogICAgICAgIHNlbGYuc3BpLndyaXRlKGJ1ZikKICAgICAgICBzZWxmLnNwaS53cml0ZShiIlx4ZmYiKQogICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCgogICAgICAgICMgY2hlY2sgdGhlIHJlc3BvbnNlCiAgICAgICAgaWYgKHNlbGYuc3BpLnJlYWQoMSwgMHhGRilbMF0gJiAweDFGKSAhPSAweDA1OgogICAgICAgICAgICBzZWxmLmNzKDEpCiAgICAgICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCiAgICAgICAgICAgIHJldHVybgoKICAgICAgICAjIHdhaXQgZm9yIHdyaXRlIHRvIGZpbmlzaAogICAgICAgIHdoaWxlIHNlbGYuc3BpLnJlYWQoMSwgMHhGRilbMF0gPT0gMDoKICAgICAgICAgICAgcGFzcwoKICAgICAgICBzZWxmLmNzKDEpCiAgICAgICAgc2VsZi5zcGkud3JpdGUoYiJceGZmIikKCiAgICBkZWYgd3JpdGVfdG9rZW4oc2VsZiwgdG9rZW4pOgogICAgICAgIHNlbGYuY3MoMCkKICAgICAgICBzZWxmLnNwaS5yZWFkKDEsIHRva2VuKQogICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCiAgICAgICAgIyB3YWl0IGZvciB3cml0ZSB0byBmaW5pc2gKICAgICAgICB3aGlsZSBzZWxmLnNwaS5yZWFkKDEsIDB4RkYpWzBdID09IDB4MDA6CiAgICAgICAgICAgIHBhc3MKCiAgICAgICAgc2VsZi5jcygxKQogICAgICAgIHNlbGYuc3BpLndyaXRlKGIiXHhmZiIpCgogICAgZGVmIHJlYWRibG9ja3Moc2VsZiwgYmxvY2tfbnVtLCBidWYpOgogICAgICAgICMgd29ya2Fyb3VuZCBmb3Igc2hhcmVkIGJ1cywgcmVxdWlyZWQgZm9yIChhdCBsZWFzdCkgc29tZSBLaW5nc3RvbgogICAgICAgICMgZGV2aWNlcywgZW5zdXJlIE1PU0kgaXMgaGlnaCBiZWZvcmUgc3RhcnRpbmcgdHJhbnNhY3Rpb24KICAgICAgICBzZWxmLnNwaS53cml0ZShiIlx4ZmYiKQoKICAgICAgICBuYmxvY2tzID0gbGVuKGJ1ZikgLy8gNTEyCiAgICAgICAgYXNzZXJ0IG5ibG9ja3MgYW5kIG5vdCBsZW4oYnVmKSAlIDUxMiwgIkJ1ZmZlciBsZW5ndGggaXMgaW52YWxpZCIKICAgICAgICBpZiBuYmxvY2tzID09IDE6CiAgICAgICAgICAgICMgQ01EMTc6IHNldCByZWFkIGFkZHJlc3MgZm9yIHNpbmdsZSBibG9jawogICAgICAgICAgICBpZiBzZWxmLmNtZCgxNywgYmxvY2tfbnVtICogc2VsZi5jZHYsIDAsIHJlbGVhc2U9RmFsc2UpICE9IDA6CiAgICAgICAgICAgICAgICAjIHJlbGVhc2UgdGhlIGNhcmQKICAgICAgICAgICAgICAgIHNlbGYuY3MoMSkKICAgICAgICAgICAgICAgIHJhaXNlIE9TRXJyb3IoNSkgICMgRUlPCiAgICAgICAgICAgICMgcmVjZWl2ZSB0aGUgZGF0YSBhbmQgcmVsZWFzZSBjYXJkCiAgICAgICAgICAgIHNlbGYucmVhZGludG8oYnVmKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgQ01EMTg6IHNldCByZWFkIGFkZHJlc3MgZm9yIG11bHRpcGxlIGJsb2NrcwogICAgICAgICAgICBpZiBzZWxmLmNtZCgxOCwgYmxvY2tfbnVtICogc2VsZi5jZHYsIDAsIHJlbGVhc2U9RmFsc2UpICE9IDA6CiAgICAgICAgICAgICAgICAjIHJlbGVhc2UgdGhlIGNhcmQKICAgICAgICAgICAgICAgIHNlbGYuY3MoMSkKICAgICAgICAgICAgICAgIHJhaXNlIE9TRXJyb3IoNSkgICMgRUlPCiAgICAgICAgICAgIG9mZnNldCA9IDAKICAgICAgICAgICAgbXYgPSBtZW1vcnl2aWV3KGJ1ZikKICAgICAgICAgICAgd2hpbGUgbmJsb2NrczoKICAgICAgICAgICAgICAgICMgcmVjZWl2ZSB0aGUgZGF0YSBhbmQgcmVsZWFzZSBjYXJkCiAgICAgICAgICAgICAgICBzZWxmLnJlYWRpbnRvKG12W29mZnNldCA6IG9mZnNldCArIDUxMl0pCiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNTEyCiAgICAgICAgICAgICAgICBuYmxvY2tzIC09IDEKICAgICAgICAgICAgaWYgc2VsZi5jbWQoMTIsIDAsIDB4RkYsIHNraXAxPVRydWUpOgogICAgICAgICAgICAgICAgcmFpc2UgT1NFcnJvcig1KSAgIyBFSU8KCiAgICBkZWYgd3JpdGVibG9ja3Moc2VsZiwgYmxvY2tfbnVtLCBidWYpOgogICAgICAgICMgd29ya2Fyb3VuZCBmb3Igc2hhcmVkIGJ1cywgcmVxdWlyZWQgZm9yIChhdCBsZWFzdCkgc29tZSBLaW5nc3RvbgogICAgICAgICMgZGV2aWNlcywgZW5zdXJlIE1PU0kgaXMgaGlnaCBiZWZvcmUgc3RhcnRpbmcgdHJhbnNhY3Rpb24KICAgICAgICBzZWxmLnNwaS53cml0ZShiIlx4ZmYiKQoKICAgICAgICBuYmxvY2tzLCBlcnIgPSBkaXZtb2QobGVuKGJ1ZiksIDUxMikKICAgICAgICBhc3NlcnQgbmJsb2NrcyBhbmQgbm90IGVyciwgIkJ1ZmZlciBsZW5ndGggaXMgaW52YWxpZCIKICAgICAgICBpZiBuYmxvY2tzID09IDE6CiAgICAgICAgICAgICMgQ01EMjQ6IHNldCB3cml0ZSBhZGRyZXNzIGZvciBzaW5nbGUgYmxvY2sKICAgICAgICAgICAgaWYgc2VsZi5jbWQoMjQsIGJsb2NrX251bSAqIHNlbGYuY2R2LCAwKSAhPSAwOgogICAgICAgICAgICAgICAgcmFpc2UgT1NFcnJvcig1KSAgIyBFSU8KCiAgICAgICAgICAgICMgc2VuZCB0aGUgZGF0YQogICAgICAgICAgICBzZWxmLndyaXRlKF9UT0tFTl9EQVRBLCBidWYpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBDTUQyNTogc2V0IHdyaXRlIGFkZHJlc3MgZm9yIGZpcnN0IGJsb2NrCiAgICAgICAgICAgIGlmIHNlbGYuY21kKDI1LCBibG9ja19udW0gKiBzZWxmLmNkdiwgMCkgIT0gMDoKICAgICAgICAgICAgICAgIHJhaXNlIE9TRXJyb3IoNSkgICMgRUlPCiAgICAgICAgICAgICMgc2VuZCB0aGUgZGF0YQogICAgICAgICAgICBvZmZzZXQgPSAwCiAgICAgICAgICAgIG12ID0gbWVtb3J5dmlldyhidWYpCiAgICAgICAgICAgIHdoaWxlIG5ibG9ja3M6CiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKF9UT0tFTl9DTUQyNSwgbXZbb2Zmc2V0IDogb2Zmc2V0ICsgNTEyXSkKICAgICAgICAgICAgICAgIG9mZnNldCArPSA1MTIKICAgICAgICAgICAgICAgIG5ibG9ja3MgLT0gMQogICAgICAgICAgICBzZWxmLndyaXRlX3Rva2VuKF9UT0tFTl9TVE9QX1RSQU4pCgogICAgZGVmIGlvY3RsKHNlbGYsIG9wLCBhcmcpOgogICAgICAgIGlmIG9wID09IDQ6ICAjIGdldCBudW1iZXIgb2YgYmxvY2tzCiAgICAgICAgICAgIHJldHVybiBzZWxmLnNlY3RvcnMKICAgICAgICBpZiBvcCA9PSA1OiAgIyBnZXQgYmxvY2sgc2l6ZSBpbiBieXRlcwogICAgICAgICAgICByZXR1cm4gNTEy", "mmb_display.py": "aW1wb3J0IGNvbmZpZwppbXBvcnQgbWFjaGluZQoKCmNsYXNzIG1tYl9kaXNwbGF5KCk6CgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGRpc3BsYXlfaW5zdGFuY2VfY3JlYXRvcigpOgogICAgICAgICAgICAgICAgICAgCiAgICAgICAgaWYgY29uZmlnLkNGR19ESVNQTEFZX1RZUEUgPT0gInNoMTEwNiI6CiAgICAgICAgICAgIGltcG9ydCBzaDExMDYKICAgICAgICAgICAgaTJjID0gbWFjaGluZS5JMkMoY29uZmlnLkNGR19PTEVEX0kyQ0lOU1RBTkNFLCBzY2w9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NDTF9QSU4pLCBzZGE9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NEQV9QSU4pLCBmcmVxPTQwMDAwMCkKICAgICAgICAgICAgZGlzcCA9IHNoMTEwNi5TSDExMDZfSTJDKGNvbmZpZy5TQ1JfV0lEVEgsIGNvbmZpZy5TQ1JfSEVJR0hULCBpMmMsIE5vbmUsIGNvbmZpZy5DRkdfT0xFRF9BRERSKQogICAgICAgICAgICBkaXNwLnNsZWVwKEZhbHNlKQogICAgICAgICAgICByZXR1cm4gZGlzcAoKICAgICAgICBlbGlmIGNvbmZpZy5DRkdfRElTUExBWV9UWVBFID09ICJzc2QxMzA2IjoKICAgICAgICAgICAgaW1wb3J0IHNzZDEzMDYKICAgICAgICAgICAgaTJjID0gbWFjaGluZS5JMkMoY29uZmlnLkNGR19PTEVEX0kyQ0lOU1RBTkNFLCBzY2w9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NDTF9QSU4pLCBzZGE9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NEQV9QSU4pLCBmcmVxPTQwMDAwMCkKICAgICAgICAgICAgZGlzcCA9IHNzZDEzMDYuU1NEMTMwNl9JMkMoY29uZmlnLlNDUl9XSURUSCwgY29uZmlnLlNDUl9IRUlHSFQsIGkyYywgY29uZmlnLkNGR19PTEVEX0FERFIpCiAgICAgICAgICAgIHJldHVybiBkaXNwCiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICAKCiAgICAKICAgIGRlZiBfX2luaXRfXyhzZWxmKSAtPiBOb25lOgogICAgICAgIHBhc3MKCiAgICBkZWYgcGl4ZWwoc2VsZiwgeCwgeSwgdmFsdWUpOgogICAgICAgIHBhc3MKIAogICAgZGVmIHNob3coKToKICAgICAgICBwYXNzCiAgICAgIAogICAgZGVmIGZpbGxfcmVjdChzZWxmLCB4LCB5LCB3LCBoLCB2KToKICAgICAgICBwYXNzCiAgICAKICAgIGRlZiBwcmludChzZWxmLCBfc3RyKToKICAgICAgICBwYXNzCgogICAgZGVmIHdyaXRlKHNlbGYsIF9zdHIpOgogICAgICAgIHBhc3MKICAgIAogICAgZGVmIGVyYXNlKHNlbGYpOgogICAgICAgIHBhc3MKCiAgICBkZWYgdGV4dChzZWxmLCB0ZXh0LCB4LCB5LCBjb2xvcj0xKToKICAgICAgICBwYXNz", "Scales.py": "aW1wb3J0IHN0YXRpY19tb2R1bGVzLmh4NzExIGFzIGh4NzExDQppbXBvcnQgdGltZQ0KaW1wb3J0IG1hdGgNCg0KY2xhc3MgU2NhbGVzKGh4NzExLkhYNzExKToNCiAgICBkZWYgX19pbml0X18oc2VsZiwgZF9vdXQgPSA1LCBwZF9zY2sgPSAxMik6DQogICAgICAgIHN1cGVyKFNjYWxlcywgc2VsZikuX19pbml0X18oZF9vdXQsIHBkX3NjaykNCiAgICAgICAgc2VsZi5vZmZzZXQgPSAwDQoNCiAgICBkZWYgcmVzZXQoc2VsZik6DQogICAgICAgIHNlbGYucG93ZXJfb2ZmKCkNCiAgICAgICAgc2VsZi5wb3dlcl9vbigpDQoNCiAgICBkZWYgdGFyZShzZWxmKToNCiAgICAgICAgc2VsZi5vZmZzZXQgPSBzZWxmLnJlYWQoKQ0KDQogICAgZGVmIHJhd192YWx1ZShzZWxmKToNCiAgICAgICAgcmV0dXJuIHNlbGYucmVhZCgpIC0gc2VsZi5vZmZzZXQNCg0KICAgIGRlZiBzdGFibGVfcmF3X3ZhbHVlKHNlbGYsIHdpdGhvdXRfb2Zmc2V0OiBib29sID0gRmFsc2UsIHJlYWRzPTEwLCBkZWxheV91cz0xMCk6ICAgICANCiAgICAgICAgc3RhYmxlX3ZhbHVlcyA9IFtdDQogICAgICAgIGZvciBpIGluIHJhbmdlKHJlYWRzKToNCiAgICAgICAgICAgIGlmIHdpdGhvdXRfb2Zmc2V0Og0KICAgICAgICAgICAgICAgIHN0YWJsZV92YWx1ZXMuYXBwZW5kKHNlbGYucmVhZCgpKQ0KICAgICAgICAgICAgZWxzZTogICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBzdGFibGVfdmFsdWVzLmFwcGVuZChzZWxmLnJhd192YWx1ZSgpKQ0KICAgICAgICAgICAgdGltZS5zbGVlcF9tcygxMCkNCiAgICAgICAgDQogICAgICAgIHRhcmVfdmFsdWUgPSAwLjANCiAgICAgICAgZm9yIHYgaW4gc3RhYmxlX3ZhbHVlczoNCiAgICAgICAgICAgIHRhcmVfdmFsdWUgPSB0YXJlX3ZhbHVlICsgdg0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHRhcmVfdmFsdWUgLyByZWFkcw0KICAgIA0KIA0KICAgIGRlZiBzZXRfc2NhbGUoc2VsZiwgX3NjYWxlX2ZhY3RvcjogZmxvYXQpOg0KICAgICAgICBpZiBfc2NhbGVfZmFjdG9yIGlzIE5vbmUgb3IgX3NjYWxlX2ZhY3RvciA9PSAwLjA6DQogICAgICAgICAgICBfc2NhbGVfZmFjdG9yID0gMS4wDQogICAgICAgICAgICBwcmludCgic2V0IF9zY2FsZV9mYWN0b3IgdG8gMS4wIGR1ZSBwYXJhbWV0ZXIgX3NjYWxlX2ZhY3RvciBpcyBOb25lIG9yIFplcm8iKQ0KICAgICAgICBzZWxmLlNDQUxFX0ZBQ1RPUiA9IF9zY2FsZV9mYWN0b3INCiAgICAgICAgDQogICAgZGVmIGdldF91bml0KHNlbGYsIF9zdGFibGU6IGJvb2wgPSBGYWxzZSkgLT4gZmxvYXQ6DQogICAgICAgIGlmIHNlbGYuU0NBTEVfRkFDVE9SID09IDAuMDoNCiAgICAgICAgICAgIHNlbGYuU0NBTEVfRkFDVE9SID0gMS4wDQogICAgICAgICAgICANCiAgICAgICAgaWYgX3N0YWJsZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLnJhd192YWx1ZSgpIC8gc2VsZi5TQ0FMRV9GQUNUT1INCiAgICAgICAgDQogICAgICAgIHJldHVybiBzZWxmLnN0YWJsZV9yYXdfdmFsdWUoKSAvIHNlbGYuU0NBTEVfRkFDVE9SDQogICAgICAgIA0KICAgICAgICANCiAgICAgICAgDQogDQo="}

def restore_filesystem(_basepath: str = "/", _override: bool = False, _erase: bool = False):
    import ubinascii
    import os

    if _erase:
        print("erase enabled")
        for f in os.listdir():
            if f in __file__:
                print("skipping {} to vaoid installer override".format(f))
                continue 
            os.remove(f)

    for k in FILE_DATA:

        if k in os.listdir() and not _override:
            continue
        
        print(k)
        d = FILE_DATA[k]
        ubinascii.a2b_base64(d)

        with open(_basepath + "/" + k, "w") as file:
            file.write(ubinascii.a2b_base64(d))

    # CLEANUP
    del ubinascii
    del os


if __name__ == "__main__":

    import machine
    push_button_restore = machine.Pin(14, machine.Pin.IN, machine.Pin.PULL_UP)
    if push_button_restore:
        restore_filesystem(_override=True, _erase=True)


