FILE_DATA = {"menu_entry_info.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSByZWNpcGVfdXBkYXRlciBpbXBvcnQgcmVjaXBlX3VwZGF0ZXIKZnJvbSBtZW51X21hbmFnZXIgaW1wb3J0IG1lbnVfbWFuYWdlcgpjbGFzcyBtZW51X2VudHJ5X2luZm8obWVudV9lbnRyeS5tZW51X2VudHJ5KToKCgogICAKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygiSU5GTyIsICJIYXZlIGEgbmljZSBkYXkgOikiKQoKICAgIGRlZiBwcmV2aWV3KHNlbGYpOgogICAgICAgIHByaW50KCJwcmV2aWV3IHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLnNob3dfcmVjaXBlX2luZm9ybWF0aW9uKHNlbGYubmFtZSwgc2VsZi5kZXNjcmlwdGlvbikKCgogICAgZGVmIGFjdGl2YXRlKHNlbGYpOgogICAgICAgIHByaW50KCJhY3RpdmF0ZSB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCiAgICAgICAgdWkoKS5zaG93X3RpdGxlc2NyZWVuKCkKCgogICAgZGVmIHRlYXJkb3duKHNlbGYpOgogICAgICAgIHByaW50KCJ0ZWFyZG93biB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCgoKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CiAgICAgICAgaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX05BVklHQVRJT046CiAgICAgICAgICAgICAgICBtZW51X21hbmFnZXIoKS5leGl0X2N1cnJlbnRfbWVudSgpCiAgICAgICAgICAg", "menu_entry_recipe_editor.py": "aW1wb3J0IG1lbnVfZW50cnkKaW1wb3J0IHN5c3RlbV9jb21tYW5kCmZyb20gdWkgaW1wb3J0IHVpCmZyb20gbGVkcmluZyBpbXBvcnQgbGVkcmluZwpmcm9tIHJlY2lwZV91cGRhdGVyIGltcG9ydCByZWNpcGVfdXBkYXRlcgpmcm9tIG1lbnVfbWFuYWdlciBpbXBvcnQgbWVudV9tYW5hZ2VyCmZyb20gcmVjaXBlX2VkaXRvciBpbXBvcnQgcmVjaXBlX2VkaXRvcgppbXBvcnQgaGVscGVyCmltcG9ydCBjb25maWcKCgpjbGFzcyBtZW51X2VudHJ5X3JlY2lwZV9lZGl0b3IobWVudV9lbnRyeS5tZW51X2VudHJ5KToKCiAgICBlZGl0b3I6IHJlY2lwZV9lZGl0b3IgPSBOb25lCiAgICBpbml0X3N1Y2Nlc3M6IGJvb2wgPSBGYWxzZQogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oIlJFQ0lQRSBFRElUT1IiLCAiRW5hYmxlIFdpZmkgYmFzZWQgb25saW5lIHJlY2lwZSBlZGl0b3IiKQoKICAgIGRlZiBwcmV2aWV3KHNlbGYpOgogICAgICAgIHByaW50KCJwcmV2aWV3IHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLnNob3dfcmVjaXBlX2luZm9ybWF0aW9uKHNlbGYubmFtZSwgc2VsZi5kZXNjcmlwdGlvbikKCgogICAgZGVmIGFjdGl2YXRlKHNlbGYpOgogICAgICAgIHByaW50KCJhY3RpdmF0ZSB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCiAgICAgICAgaWYgc2VsZi5lZGl0b3IgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYudGVhcmRvd24oKQoKICAgICAgICBzZWxmLmVkaXRvciA9IHJlY2lwZV9lZGl0b3IoKQoKICAgICAgICBpZiBub3Qgc2VsZi5lZGl0b3IuaGFzX2NhcGFiaWxpdGllcygpOgogICAgICAgICAgICBzZWxmLmluaXRfc3VjY2VzcyA9IFRydWUKICAgICAgICAgICAgdWkoKS5zaG93X21zZygiV2lmaSBhY2Nlc3MgcG9pbnQgaXMgbm90IHN1cHBvcnRlZCIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIAogICAgICAgICMgIENGR19FRElUT1JfV0lGSV9TVEFfU1NJRCBDRkdfRURJVE9SX1dJRklfU1RBX1BTSwogICAgICAgIHNzaWQ6IHN0ciA9IGNvbmZpZy5DRkdfRURJVE9SX1dJRklfU1RBX1NTSUQuZm9ybWF0KGhlbHBlci5nZXRfc3lzdGVtX2lkKCkpCiAgICAgICAgcHNrOiBzdHIgPSAgY29uZmlnLkNGR19FRElUT1JfV0lGSV9TVEFfUFNLLmZvcm1hdChoZWxwZXIuZ2V0X3N5c3RlbV9pZCgpKQoKICAgICAgICBpcDogc3RyPSBzZWxmLmVkaXRvci5vcGVuX2FjY2Vzc3BvaW50KHNzaWQsIHBzaykgICAgCiAgICAgICAgdWkoKS5zaG93X3JlY2lwZV9pbmZvcm1hdGlvbigiUGxlYXNlIGNvbm5lY3QgdXNpbmcgOiIsICJJUDp7fVxuU1NJRDp7fVxuUFNLOnt9Ii5mb3JtYXQoaXAsIHNzaWQsIHBzaykpCgogICAgICAgIHNlbGYuZWRpdG9yLnNldHVwX3dlYnNlcnZlcigpCgogICAgICAgIHNlbGYuaW5pdF9zdWNjZXNzID0gVHJ1ZQoKCiAgICBkZWYgdGVhcmRvd24oc2VsZik6CiAgICAgICAgcHJpbnQoInRlYXJkb3duIHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICBzZWxmLmVkaXRvci5zdG9wX3dlYnNlcnZlcigpCiAgICAgICAgc2VsZi5lZGl0b3IuZGlzYWJsZV93aWZpKCkKICAgICAgICBkZWwgZWRpdG9yCgoKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CiAgICAgICAgaWYgc2VsZi5pbml0X3N1Y2Nlc3M6CiAgICAgICAgICAgIHNlbGYuZWRpdG9yLmhhbmRsZV9jb25uZWN0aW9uKCk=", "recipe_updater.py": "aW1wb3J0IGNvbmZpZwppbXBvcnQgc2V0dGluZ3MKaW1wb3J0IHRpbWUKaW1wb3J0IGhlbHBlcgoKCmNsYXNzIHJlY2lwZV91cGRhdGVfaGVscGVyOgoKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgaGFzX25ldHdvcmtfY2FwYWJpbGl0aWVzKCkgLT4gYm9vbDoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGltcG9ydCBuZXR3b3JrCiAgICAgICAgICAgIGltcG9ydCBzb2NrZXQKICAgICAgICAgICAgaW1wb3J0IHVyZXF1ZXN0cwogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGdldF9hcGlfdXJsKCkgLT4gc3RyOgogICAgICAgIGFwaV9lbmRwb2ludDogc3RyID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5nZXRfc2V0dGluZ3NfZW50cnkoc2V0dGluZ3MuU0VUVElOR1NfRU5UUklFUy5ORVRXT1JLX0FQSV9FTlBPSU5UKQogICAgICAgIGlmIGFwaV9lbmRwb2ludCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gTm9uZQoKCiAgICAgICAgaWYgbm90IGFwaV9lbmRwb2ludC5zdGFydHN3aXRoKCdodHRwOi8vJyk6CiAgICAgICAgICAgIGFwaV9lbmRwb2ludCA9ICdodHRwOi8vJyArIGFwaV9lbmRwb2ludAogICAgICAgIHByaW50KCJjaGVja191cGRhdGVfdXJsOiBzZXQgYXBpIGVuZHBvaW50IHVybCB7fSIuZm9ybWF0KGFwaV9lbmRwb2ludCkpCiAgICAgICAgCiAgICAgICAgIyBSRU1PVkUgVEFJTElORyAvIFRPIE1BS0UgRk9XTExJTkcgVVJMIENBTExTIFZBTElECiAgICAgICAgaWYgYXBpX2VuZHBvaW50LmVuZHN3aXRoKCcvJykgYW5kIGxlbihhcGlfZW5kcG9pbnQpID4gMDoKICAgICAgICAgICAgYXBpX2VuZHBvaW50ID0gYXBpX2VuZHBvaW50WzotMV0KCiAgICAgICAgCiAgICAgICAgZmluYWxfYXBpX3VybDogc3RyID0gInt9L3t9Ii5mb3JtYXQoYXBpX2VuZHBvaW50LCBzdHIoaGVscGVyLmdldF9zeXN0ZW1faWQoKSkpCiAgICAgICAgcmV0dXJuIGZpbmFsX2FwaV91cmwKCnRyeToKICAgIGltcG9ydCBuZXR3b3JrCiAgICBpbXBvcnQgc29ja2V0CiAgICBpbXBvcnQgdXJlcXVlc3RzCgogICAgY2xhc3MgcmVjaXBlX3VwZGF0ZXI6CiAgICAgICAgCiAgICAgICAgQHN0YXRpY21ldGhvZAogICAgICAgIGRlZiBkaXNhYmxlX3dpZmkoKToKICAgICAgICAgICAgd2xhbiA9IG5ldHdvcmsuV0xBTihuZXR3b3JrLlNUQV9JRikKICAgICAgICAgICAgd2xhbi5hY3RpdmUoRmFsc2UpCiAgICAgICAgCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgZ2V0X2FwaV91cmwoKSAtPiBzdHI6CiAgICAgICAgICAgIHJldHVybiByZWNpcGVfdXBkYXRlX2hlbHBlci5nZXRfYXBpX3VybCgpCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgY29ubmVjdF93aWZpKCkgLT4gYm9vbDoKICAgICAgICAgICAgbmV0d29yay5jb3VudHJ5KGNvbmZpZy5DRkdfTkVUV09SS19XSUZJQ09VTlRSWSkKICAgICAgICAgICAgbmV0d29yay5ob3N0bmFtZShjb25maWcuQ0ZHX05FVFdPUktfSE9TVE5BTUUuZm9ybWF0KGhlbHBlci5nZXRfc3lzdGVtX2lkKCkpKQoKICAgICAgICAgICAgd2xhbiA9IG5ldHdvcmsuV0xBTihuZXR3b3JrLlNUQV9JRikKICAgICAgICAgICAgd2xhbi5hY3RpdmUoVHJ1ZSkKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICBzc2lkID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5nZXRfc2V0dGluZ3NfZW50cnkoc2V0dGluZ3MuU0VUVElOR1NfRU5UUklFUy5ORVRXT1JLX1dJRklfU1NJRCkKICAgICAgICAgICAgcHNrID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5nZXRfc2V0dGluZ3NfZW50cnkoc2V0dGluZ3MuU0VUVElOR1NfRU5UUklFUy5ORVRXT1JLX1dJRklfUFNLKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgc3NpZCBpcyBOb25lIG9yIHBzayBpcyBOb25lOgogICAgICAgICAgICAgICAgcHJpbnQoIlNTSUQgT1IgUFNLIEZPUiBXSUZJIENPTk5FQ1RJT04gTk9UIFNFVCIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCgogICAgICAgICAgICBwcmludCgiQ09OTkVDVElORyBUTzoge30iLmZvcm1hdChzc2lkKSkKICAgICAgICAgICAgd2xhbi5jb25uZWN0KHNzaWQsIHBzaykKICAgICAgICAgICAgdGltZXIgPSAwCiAgICAgICAgICAgIHdoaWxlIHdsYW4uaXNjb25uZWN0ZWQoKSA9PSBGYWxzZToKICAgICAgICAgICAgICAgIHByaW50KCdXYWl0aW5nIGZvciBjb25uZWN0aW9uLi4uJykKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICAgICAgICAgIHRpbWVyID0gdGltZXIgKyAxCgogICAgICAgICAgICAgICAgaWYgdGltZXIgPiAxMDoKICAgICAgICAgICAgICAgICAgICB3bGFuLmFjdGl2ZShGYWxzZSkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHdsYW4uaXNjb25uZWN0ZWQoKToKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAoKICAgICAgICBAc3RhdGljbWV0aG9kCiAgICAgICAgZGVmIGNoZWNrX3VwZGF0ZV91cmwoKSAtPiBib29sOgogICAgICAgICAgICBpZiBub3QgcmVjaXBlX3VwZGF0ZXIuY29ubmVjdF93aWZpKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgIyBHRVQgTElTVCBPRiBSRUNJUEVTCiAgICAgICAgICAgICAgICByID0gdXJlcXVlc3RzLmdldChyZWNpcGVfdXBkYXRlX2hlbHBlci5nZXRfYXBpX3VybCgpKQogICAgICAgICAgICAgICAgci5jbG9zZSgpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZSAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KHN0cihlKSkKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAgICAgCiAgICAgICAgQHN0YXRpY21ldGhvZCAgIAogICAgICAgIGRlZiB1cGRhdGVfcmVjaXBlcygpIC0+IGJvb2w6CiAgICAgICAgICAgIGlmIG5vdCByZWNpcGVfdXBkYXRlci5jaGVja191cGRhdGVfdXJsKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgICAgIGFwaV9lbmRwb2ludDogc3RyID0gcmVjaXBlX3VwZGF0ZV9oZWxwZXIuZ2V0X2FwaV91cmwoKQogICAgICAgIAogICAgICAgICAgICBwcmludCgiQVBJOiB7fSIuZm9ybWF0KGFwaV9lbmRwb2ludCkpCgogICAgICAgICAgICB0aW1lLnNsZWVwKDIpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICMgR0VUIExJU1QgT0YgUkVDSVBFUwogICAgICAgICAgICAgICAgaGVhZGVyczogZGljdCA9IHt9CiAgICAgICAgICAgICAgICByID0gdXJlcXVlc3RzLmdldCgie30vcmVjaXBlcyIuZm9ybWF0KGFwaV9lbmRwb2ludCksICBoZWFkZXJzPWhlYWRlcnMpCiAgICAgICAgICAgICAgICByZWNpcGVfbGlzdCA9IHIuanNvbigpICMgWyJyZXNpcGVfZmlsZV91cmlfcmVsYXRpdmUiXQogICAgICAgICAgICAgICAgci5jbG9zZSgpCiAgICAgICAgICAgICAgICBpZiByZWNpcGVfbGlzdCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICAjIERPTldMT0FEIEVBQ0ggUkVDSVBFCiAgICAgICAgICAgICAgICAgICAgZm9yIHJlY2lwZSBpbiByZWNpcGVfbGlzdDoKICAgICAgICAgICAgICAgICAgICAgICAgciA9IHVyZXF1ZXN0cy5nZXQoInt9L3JlY2lwZS97fSIuZm9ybWF0KGFwaV9lbmRwb2ludCwgcmVjaXBlKSwgIGhlYWRlcnM9aGVhZGVycykKICAgICAgICAgICAgICAgICAgICAgICAgZGxfcmVjaXBlID0gci5qc29uKCkgIyBbe2ZpbGVuYW1lX3dpdGhvdXRfZW5kaW5nLCByZWNpcGV9XQogICAgICAgICAgICAgICAgICAgICAgICByLmNsb3NlKCkKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdyZWNpcGUnIGluIGRsX3JlY2lwZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnNldHRpbmdzLmluc3RhbmNlKCkud3JpdGVfanNvbl9maWxlKGRsX3JlY2lwZVsnbmFtZSddICsgIi5yZWNpcGUiLCBkbF9yZWNpcGVbJ3JlY2lwZSddKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoImNhbnQgc3RvcmUgcmVjaXBlZCBkYXRhIGJsb2NrIGR1ZSB0byBtaXNzaW5nIHJlY2lwZSBkaWN0IGJsb2NrIikKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KHN0cihlKSkKICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHJlY2lwZV91cGRhdGVyLmRpc2FibGVfd2lmaSgpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgCgpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgCiAgICBjbGFzcyByZWNpcGVfdXBkYXRlcjoKICAgICAgICAKICAgICAgICBAc3RhdGljbWV0aG9kCiAgICAgICAgZGVmIGdldF9hcGlfdXJsKCkgLT4gc3RyOgogICAgICAgICAgICByZXR1cm4gcmVjaXBlX3VwZGF0ZV9oZWxwZXIuZ2V0X2FwaV91cmwoKQoKICAgICAgICBAc3RhdGljbWV0aG9kCiAgICAgICAgZGVmIGRpc2FibGVfd2lmaSgpOgogICAgICAgICAgICBwYXNzCiAgICAgICAgCiAgICAgICAgQHN0YXRpY21ldGhvZAogICAgICAgIGRlZiBjaGVja191cGRhdGVfdXJsKCkgLT4gYm9vbDoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgY29ubmVjdF93aWZpKCkgLT4gYm9vbDoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICBkZWYgdXBkYXRlX3JlY2lwZXMoKSAtPiBib29sOgogICAgICAgICAgICByZXR1cm4gRmFsc2U=", "example_recipes.py": "aW1wb3J0IHJlY2lwZQoKZGVmIEVYQU1QTEVfUkVDSVBFU19DT0xMRUNUSU9OX1RFUVVJTEFfU1VOUklTRSgpIC0+IHJlY2lwZS5yZWNpcGU6CiAgICB0czogcmVjaXBlLnJlY2lwZSA9IHJlY2lwZS5yZWNpcGUoIlRlcXVpbGEgU3VucmlzZSIsICJBIG5pY2UgVGVxdWlsYSBTdW5yaXNlIENvY2t0YWlsIiwgIjEuMC4wIiwgWyJUZXF1aWxhIl0pCiAgICB0cy5hZGRfc3RlcChyZWNpcGUucmVjaXBlX3N0ZXAoX2FjdGlvbj1yZWNpcGUuVVNFUl9JTlRFUkFDVElPTl9NT0RFLlNDQUxFLCBfaW5ncmVkaWVudF9uYW1lPSJXaGl0ZSBUZXF1aWxhIiwgX2N1cnJlbnRfc3RlcF90ZXh0PSIiLCBfdGFyZ2V0X3ZhbHVlID0gMTApKQogICAgdHMuYWRkX3N0ZXAocmVjaXBlLnJlY2lwZV9zdGVwKF9hY3Rpb249cmVjaXBlLlVTRVJfSU5URVJBQ1RJT05fTU9ERS5TQ0FMRSwgX2luZ3JlZGllbnRfbmFtZT0iT3JhbmdlIEp1aWNlIiwgX2N1cnJlbnRfc3RlcF90ZXh0PSIiLCBfdGFyZ2V0X3ZhbHVlID0gMTIwKSkKICAgIHRzLmFkZF9zdGVwKHJlY2lwZS5yZWNpcGVfc3RlcChfYWN0aW9uPXJlY2lwZS5VU0VSX0lOVEVSQUNUSU9OX01PREUuQ09ORklSTSwgX2luZ3JlZGllbnRfbmFtZT0iSWNlIiwgX2N1cnJlbnRfc3RlcF90ZXh0PSJBZGQgSWNlIiwgX3RhcmdldF92YWx1ZSA9IC0xKSkKICAgIHRzLmFkZF9zdGVwKHJlY2lwZS5yZWNpcGVfc3RlcChfYWN0aW9uPXJlY2lwZS5VU0VSX0lOVEVSQUNUSU9OX01PREUuU0NBTEUsIF9pbmdyZWRpZW50X25hbWU9IkdyZW5hZGluZSIsIF9jdXJyZW50X3N0ZXBfdGV4dD0iIiwgX3RhcmdldF92YWx1ZSA9IDQwKSkKICAgIHRzLmFkZF9zdGVwKHJlY2lwZS5yZWNpcGVfc3RlcChfYWN0aW9uPXJlY2lwZS5VU0VSX0lOVEVSQUNUSU9OX01PREUuV0FJVCwgX2luZ3JlZGllbnRfbmFtZT0iIiwgX2N1cnJlbnRfc3RlcF90ZXh0PSJXYWl0IGZvciBzZXR0bGUgZG93biIsIF90YXJnZXRfdmFsdWUgPSAxMCkpCiAgICB0cy52YWxpZCA9IFRydWUKICAgIHJldHVybiB0cwoKZGVmIEVYQU1QTEVfUkVDSVBFU19DT0xMRUNUSU9OX1NUUkFXQkVSUllfQ09MQURBKCkgLT4gcmVjaXBlLnJlY2lwZToKICAgIHNjOiByZWNpcGUucmVjaXBlID0gcmVjaXBlLnJlY2lwZSgiU3RyYXdiZXJyeSBDb2xhZGEiLCAiRnJ1aXR5IHN0cmF3YmVycmllcywgY29jb251dCBhbmQgY3JlYW0iLCAiMS4wLjAiLCBbIkNyZWFtIiwgIlJ1bSJdKQoKICAgIHNjLmFkZF9zdGVwKHJlY2lwZS5yZWNpcGVfc3RlcChfYWN0aW9uPXJlY2lwZS5VU0VSX0lOVEVSQUNUSU9OX01PREUuQ09ORklSTSwgX2luZ3JlZGllbnRfbmFtZT0iU3RyYXdiZXJyaWVzIiwgX2N1cnJlbnRfc3RlcF90ZXh0PSJQdXJlZSBhbmQgYWRkIiwgX3RhcmdldF92YWx1ZSA9IDEwKSkKICAgIHNjLmFkZF9zdGVwKHJlY2lwZS5yZWNpcGVfc3RlcChfYWN0aW9uPXJlY2lwZS5VU0VSX0lOVEVSQUNUSU9OX01PREUuU0NBTEUsIF9pbmdyZWRpZW50X25hbWU9IkNvY29udXQgSnVpY2UiLCBfY3VycmVudF9zdGVwX3RleHQ9IkFkZCIsIF90YXJnZXRfdmFsdWUgPSA4MCkpCiAgICBzYy5hZGRfc3RlcChyZWNpcGUucmVjaXBlX3N0ZXAoX2FjdGlvbj1yZWNpcGUuVVNFUl9JTlRFUkFDVElPTl9NT0RFLlNDQUxFLCBfaW5ncmVkaWVudF9uYW1lPSJDcmVhbSIsIF9jdXJyZW50X3N0ZXBfdGV4dD0iQWRkIiwgX3RhcmdldF92YWx1ZSA9IDYwKSkKICAgIHNjLmFkZF9zdGVwKHJlY2lwZS5yZWNpcGVfc3RlcChfYWN0aW9uPXJlY2lwZS5VU0VSX0lOVEVSQUNUSU9OX01PREUuU0NBTEUsIF9pbmdyZWRpZW50X25hbWU9IldoaXRlIFJ1bSIsIF9jdXJyZW50X3N0ZXBfdGV4dD0iQWRkIiwgX3RhcmdldF92YWx1ZSA9IDUwKSkKICAgIHNjLmFkZF9zdGVwKHJlY2lwZS5yZWNpcGVfc3RlcChfYWN0aW9uPXJlY2lwZS5VU0VSX0lOVEVSQUNUSU9OX01PREUuU0NBTEUsIF9pbmdyZWRpZW50X25hbWU9IlBpbmVhcHBsZSBKdWljZSIsIF9jdXJyZW50X3N0ZXBfdGV4dD0iQWRkIiwgX3RhcmdldF92YWx1ZSA9IDgwKSkKICAgIHNjLmFkZF9zdGVwKHJlY2lwZS5yZWNpcGVfc3RlcChfYWN0aW9uPXJlY2lwZS5VU0VSX0lOVEVSQUNUSU9OX01PREUuV0FJVCwgX2luZ3JlZGllbnRfbmFtZT0iIiwgX2N1cnJlbnRfc3RlcF90ZXh0PSJTaGFrZSIsIF90YXJnZXRfdmFsdWUgPSAyMCkpCiAgICBzYy52YWxpZCA9IFRydWUKICAgIHJldHVybiBzYwoKZGVmIEdFVF9FWEFNUExFX1JFQ0lQRVNfQ09MTEVDVElPTigpIC0+IGxpc3RbcmVjaXBlLnJlY2lwZV06CiAgICByZXR1cm4gW0VYQU1QTEVfUkVDSVBFU19DT0xMRUNUSU9OX1RFUVVJTEFfU1VOUklTRSgpLCBFWEFNUExFX1JFQ0lQRVNfQ09MTEVDVElPTl9TVFJBV0JFUlJZX0NPTEFEQSgpXQo=", "menu_entry.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCB1aQppbXBvcnQgc3lzdGVtX2NvbW1hbmQKCmNsYXNzIG1lbnVfZW50cnkoKToKCiAgICBuYW1lOiBzdHIgPSAiIgogICAgZGVzY3JpcHRpb246IHN0ciA9ICIiCiAgICBkZWYgX19pbml0X18oc2VsZiwgX25hbWU6IHN0ciwgX2Rlc2NyaXB0aW9uOiBzdHIgPSAiIik6CiAgICAgICAgc2VsZi5uYW1lID0gX25hbWUKICAgICAgICBzZWxmLmRlc2NyaXB0aW9uID0gX2Rlc2NyaXB0aW9uCiAgICAKCgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgcHJldmlldyhzZWxmKToKICAgICAgICBwcmludCgicHJldmlldyB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgYWN0aXZhdGUoc2VsZik6CiAgICAgICAgcHJpbnQoImFjdGl2YXRlIHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiB0ZWFyZG93bihzZWxmKToKICAgICAgICBwcmludCgidGVhcmRvd24ge30iLmZvcm1hdChzZWxmLm5hbWUpKQoKICAgIEBhYnN0cmFjdG1ldGhvZAogICAgZGVmIHVwZGF0ZShzZWxmLCBfc3lzdGVtX2NvbW1hbmQ6IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kKToKICAgICAgICBwYXNz", "system_command.py": "ZnJvbSBtaWNyb3B5dGhvbiBpbXBvcnQgY29uc3QKCmNsYXNzIHN5c3RlbV9jb21tYW5kOgogICAgVU5LTk9XTjogaW50ID0gY29uc3QoLTEpCiAgICBDT01NQU5EX1RZUEVfTkFWSUdBVElPTjogaW50ID0gY29uc3QoMCkKICAgIENPTU1BTkRfVFlQRV9TQ0FMRV9WQUxVRTogaW50ID0gY29uc3QoMSkKICAgIENPTU1BTkRfVFlQRV9USU1FUl9JUlE6IGludCA9IGNvbnN0KDIpCgogICAgTkFWSUdBVElPTl9MRUZUOiBpbnQgPSBjb25zdCgwKQogICAgTkFWSUdBVElPTl9SSUdIVDogaW50ID0gY29uc3QoMSkKICAgIE5BVklHQVRJT05fRU5URVI6IGludCA9IGNvbnN0KDIpCiAgICBOQVZJR0FUSU9OX0VYSVQ6IGludCA9IGNvbnN0KDMpCgogICAgU0NBTEVfQ1VSUkVOVF9WQUxVRTogaW50ID0gY29uc3QoMTApCgogICAgVElNRVJfVElDSyA9IGludCA9IGNvbnN0KDExKQoKICAgIHR5cGU6IGludCA9IFVOS05PV04KICAgIGFjdGlvbjogaW50ID0gVU5LTk9XTgogICAgdmFsdWU6IGFueSA9IE5vbmUKCiAgICBkZWYgX19pbml0X18oc2VsZiwgX3R5cGU6IGludCA9IFVOS05PV04sIF9hY3Rpb246IGludCA9IFVOS05PV04sIF92YWx1ZTogYW55ID0gTm9uZSk6CiAgICAgICAgc2VsZi50eXBlID0gX3R5cGUKICAgICAgICBzZWxmLmFjdGlvbiA9IF9hY3Rpb24KICAgICAgICBzZWxmLnZhbHVlID0gX3ZhbHVl", "main.py": "", "menu_entry_recipe_update.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSByZWNpcGVfdXBkYXRlciBpbXBvcnQgcmVjaXBlX3VwZGF0ZXIKZnJvbSBtZW51X21hbmFnZXIgaW1wb3J0IG1lbnVfbWFuYWdlcgoKY2xhc3MgbWVudV9lbnRyeV9yZWNpcGVfdXBkYXRlKG1lbnVfZW50cnkubWVudV9lbnRyeSk6CgoKICAgIHVwZGF0ZV9vazogYm9vbCA9IEZhbHNlCgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oIlJFQ0lQRSBVUERBVEUiLCAiVXBkYXRlIHJlY2lwZXMgb3ZlciBNaXhNZWFzdXJlQnVkZHkgQVBJIikKCiAgICBkZWYgcHJldmlldyhzZWxmKToKICAgICAgICBwcmludCgicHJldmlldyB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCiAgICAgICAgdWkoKS5zaG93X3JlY2lwZV9pbmZvcm1hdGlvbihzZWxmLm5hbWUsIHNlbGYuZGVzY3JpcHRpb24pCgoKICAgIGRlZiBhY3RpdmF0ZShzZWxmKToKICAgICAgICBzZWxmLnVwZGF0ZV9vayA9IEZhbHNlCiAgICAgICAgCiAgICAgICAgcHJpbnQoImFjdGl2YXRlIHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLnNob3dfbXNnKCJDSEVDSyBGT1IgV0lGSSBDT05ORUNUSU9OIikKICAgICAgICBpZiByZWNpcGVfdXBkYXRlci5jaGVja191cGRhdGVfdXJsKCk6CiAgICAgICAgICAgIHVpKCkuc2hvd19tc2coIldJRkkgU1VDQ0VTUyIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgdWkoKS5zaG93X21zZygiRVJST1I6IENIRUNLIENSRURFTlRJQUxTIikKICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIHVpKCkuc2hvd19tc2coIlJFQ0lQRSBGRVRDSElORyBTVEFSVEVEIikKICAgICAgICBzZWxmLnVwZGF0ZV9vayA9IHJlY2lwZV91cGRhdGVyLnVwZGF0ZV9yZWNpcGVzKCkKICAgICAgICBpZiBzZWxmLnVwZGF0ZV9vazoKICAgICAgICAgICAgdWkoKS5zaG93X3JlY2lwZV9pbmZvcm1hdGlvbigiUExFQVNFIFBPV0VSQ1lDTEUgVEhFIERFVklDRSIsICJQcmVzcyBORVhUL1BSRVYgdG8gc2hvdyBRUiBDb2RlIG9yIFVSTCIpCiAgICAgICAgZWxzZToKICAgICAgICAgICB1aSgpLnNob3dfcmVjaXBlX2luZm9ybWF0aW9uKCJVUERBVEUgRkFJTEVEIiwgIlByZXNzIE5FWFQvUFJFViB0byBzaG93IFFSIENvZGUgb3IgVVJMIikKCgogICAgICAgIAoKICAgIGRlZiB0ZWFyZG93bihzZWxmKToKICAgICAgICBwcmludCgidGVhcmRvd24ge30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIHJlY2lwZV91cGRhdGVyLmRpc2FibGVfd2lmaSgpCgoKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CiAgICAgICAgaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX05BVklHQVRJT046CiAgICAgICAgICAgICMgVVBEQVRFIERPRVMgTk9USElORyBFWENFUFQgR09JTkcgQkFDSyBUTyBNQUlOIE1FTlUKICAgICAgICAgICAgaWYgbm90IHNlbGYudXBkYXRlX29rOgogICAgICAgICAgICAgICAgbWVudV9tYW5hZ2VyKCkuZXhpdF9jdXJyZW50X21lbnUoKQogICAgICAgIGlmIF9zeXN0ZW1fY29tbWFuZC50eXBlID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLkNPTU1BTkRfVFlQRV9OQVZJR0FUSU9OOgogICAgICAgICAgICBpZiBfc3lzdGVtX2NvbW1hbmQuYWN0aW9uID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLk5BVklHQVRJT05fRU5URVI6CiAgICAgICAgICAgICAgICBtZW51X21hbmFnZXIoKS5leGl0X2N1cnJlbnRfbWVudSgpCiAgICAgICAgICAgIGVsaWYgX3N5c3RlbV9jb21tYW5kLmFjdGlvbiA9PSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5OQVZJR0FUSU9OX0xFRlQ6CiAgICAgICAgICAgICAgICB1aSgpLnNob3dfZGV2aWNlX3FyX2NvZGUocmVjaXBlX3VwZGF0ZXIuZ2V0X2FwaV91cmwoKSkKICAgICAgICAgICAgZWxpZiBfc3lzdGVtX2NvbW1hbmQuYWN0aW9uID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLk5BVklHQVRJT05fUklHSFQ6CiAgICAgICAgICAgICAgICB1aSgpLnNob3dfdXJsKHJlY2lwZV91cGRhdGVyLmdldF9hcGlfdXJsKCkp", "menu_entry_scale.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSBTY2FsZXMgaW1wb3J0IFNjYWxlSW50ZXJmYWNlCgpjbGFzcyBtZW51X2VudHJ5X3NjYWxlKG1lbnVfZW50cnkubWVudV9lbnRyeSk6CgoKICAgIFdJR0hUX0NIQU5HRV9ESVNQTEFZX1VQREFURTogZmxvYXQgPSAxLjAgIyBVUERBVCBESVNQTEFZIEFGVEVSTEVBU1QgWGcgQ0hBTkdFUwogICAgbGFzdF9zY2FsZV92YWx1ZTogZmxvYXQgPSAwLjAKICAgIG1heF9zY2FsZV92YWx1ZTogZmxvYXQgPSAwLjAKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygiU0NBTEUiLCAiQSBub3JtYWwga2l0Y2hlbiBzY2FsZSIpCgogICAgZGVmIHByZXZpZXcoc2VsZik6CiAgICAgICAgcHJpbnQoInByZXZpZXcge30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIHVpKCkuc2hvd19yZWNpcGVfaW5mb3JtYXRpb24oc2VsZi5uYW1lLCBzZWxmLmRlc2NyaXB0aW9uKQoKCiAgICBkZWYgYWN0aXZhdGUoc2VsZik6CiAgICAgICAgcHJpbnQoImFjdGl2YXRlIHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICBTY2FsZUludGVyZmFjZSgpLnRhcmUoKQogICAgICAgIHVpKCkuc2hvd19zY2FsZShTY2FsZUludGVyZmFjZSgpLmdldF9jdXJyZW50X3dlaWdodCgpKQogICAgICAgIHNlbGYubGFzdF9zY2FsZV92YWx1ZSA9IDAuMAogICAgICAgIHNlbGYubWF4X3NjYWxlX3ZhbHVlID0gMTAuMAogICAgICAgIGxlZHJpbmcoKS5zZXRfbmVvcGl4ZWxfZnVsbCgxMCwgMTAsIDEwKQoKCgogICAgZGVmIHRlYXJkb3duKHNlbGYpOgogICAgICAgIHByaW50KCJ0ZWFyZG93biB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCgoKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CgogICAgICAgICMgVVBEQVRFIFNDQUxFIFZBTFVFCiAgICAgICAgaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX1NDQUxFX1ZBTFVFOgogICAgICAgICAgICBpZiBhYnMoX3N5c3RlbV9jb21tYW5kLnZhbHVlIC0gc2VsZi5sYXN0X3NjYWxlX3ZhbHVlKToKICAgICAgICAgICAgICAgIHNlbGYubGFzdF9zY2FsZV92YWx1ZSA9IF9zeXN0ZW1fY29tbWFuZC52YWx1ZQogICAgICAgICAgICAgICAgdWkoKS5zaG93X3NjYWxlKHNlbGYubGFzdF9zY2FsZV92YWx1ZSkgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQUREIFNPTUUgTkVPUElYRUwgTElHSFROSU5HCiAgICAgICAgICAgICAgICBsZWRyaW5nKCkuc2V0X25lb3BpeGVsX3BlcmNlbnRhZ2UobWluKDEuMCwgYWJzKHNlbGYubWF4X3NjYWxlX3ZhbHVlIC8gc2VsZi5sYXN0X3NjYWxlX3ZhbHVlKSkpCgogICAgICAgICMgVEFSRSBTQ0FMRSBPTiBPSyBCVVRUT04KICAgICAgICBlbGlmIF9zeXN0ZW1fY29tbWFuZC50eXBlID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLkNPTU1BTkRfVFlQRV9OQVZJR0FUSU9OOgogICAgICAgICAgICBpZiBfc3lzdGVtX2NvbW1hbmQuYWN0aW9uID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLk5BVklHQVRJT05fRU5URVI6CiAgICAgICAgICAgICAgICBTY2FsZUludGVyZmFjZSgpLnRhcmUoKQogICAgICAgICAgICAgICAgc2VsZi5tYXhfc2NhbGVfdmFsdWUgPSAxMC4w", "ui.py": "", "menu_entry_calibration.py": "", "menu_entry_recipe.py": "", "config.py": "IyBIQVJEV0FSRSBDT05GSUcgU1RBUlRTIEhFUkUKIyBzc2QxMzA2ID0gMTI4eDY0IG9sZGVkIHdpdGggc3NkMTMwNiBjb250cm9sbGVyCiMgc2gxMTA2ID0gMTI4eDY0IG9sZGVkIHdpdGggc3NoMTEwNiBjb250cm9sbGVyCkNGR19ESVNQTEFZX1RZUEU6IHN0ciA9ICJzaDExMDYiICMgc2gxMTA2IHNzZDEzMDYKQ0ZHX0NBTElCUkFUSU9OX1dFSUdIVF9XRUlHSFQ6ZmxvYXQgPSA1MC4wCkNGR19TQ0FMRV9JTlZFUlRfV0VJR0hUX01FQVNVUkVEX1ZBTFVFOiBmbG9hdCA9IC0xLjAgIyBpZiB0aGUgc2NhbGUgbWVhc3VyZW1lbnQgaXMgbmVnYXRpdmUgc2V0IHRoaXMgdG8gMS4wIG9yIC0xLjAKQ0ZHX1NDQUxFX0dMQVNTX0FERElUSU9OX05FWFRfU1RFUF9XRUlHSFQ6ZmxvYXQgPSA1MC4wICMgWGcgbW9yZSBvbiBzY2FsZSB0byB0cmlnZ2VyIG5leHQgc3RlcCBpbiByZWNpcGUgPT4gMS8zIHdlaWdodCBvZiBhIHR5cGljYWwgZ2xhc3MKQ0ZHX1VTRVJfTE9OR19CVVRUT05fUFJFU1NfVElNRTogaW50ID0gNzAwICMgdGltZSB0byByZWdzaXRlciBhIGxvbmcgYnV0dG9uIHByZXNzIGluIG1zCgpDRkdfTkVPUElYRUxfTEVEX0NPVU5UOiBpbnQgPSAzMiAjNjAgaG93IG1hbnkgbGVkcyBmb3IgdGhlIHJpbmcgYXJlIHVzZWQKQ0ZHX05FT1BJWEVMX0xFRF9TVEFSVF9PRkZTRVQ6IGludCA9IChDRkdfTkVPUElYRUxfTEVEX0NPVU5ULzIpICMgTUFYIENGR19ORU9QSVhFTF9MRURfQ09VTlQgVE8gUk9UQVRFIFRIRSBTVEFSVFBPSU5UCkNGR19ORU9QSVhFTF9NQVhfQlJJR0hUTkVTUzogZmxvYXQgPSAwLjggIyBtYXggbGVkIGJyaWdobmVzcyBtb2RpZmllciAwLjAgLSAxLjAKCiMgREVGQVVMVCBXSUZJIFNFVFRJTkdTCiMgQ0FOIExBVEVSIEJFIENBTkdFRCBJTiBUSEUgU0RDQVJEL1NFVFRJTkdTLkpTT04gRklMRQpDRkdfTkVUV09SS19IT1NUTkFNRTogc3RyID0gIm1peGFuZG1lYXN1cmVidWRkeXt9IiAjIHhYeFgubG9jYWwge30gd2lsbCBiZSByZXBsYWNkIHdpdGggZGV2aWNlIGlkOiAgXzxpZD4KQ0ZHX05FVFdPUktfV0lGSUNPVU5UUlk6IHN0ciA9ICJERSIgIyBERSBVUwpDRkdfTkVUV09SS19XSUZJX1NTSUQ6IHN0ciA9ICJNYWtlcnNwYWNlIgpDRkdfTkVUV09SS19XSUZJX1BTSzogc3RyID0gIk1TOGNDdnBFIgpDRkdfTkVUV09SS19BUElfRU5EUE9JTlQ6IHN0ciA9ICJtaXhtZWFzdXJlYnVkZHkuY29tL2FwaS9tbWIiCgoKIyBTRVRUSU5HUyBGT1IgQUNDRVNTIFBPSU5UICsgTE9DQUwgV0VCRURJVE9SCkNGR19FRElUT1JfV0lGSV9TVEFfSE9TVE5BTUU6IHN0ciA9ICJtaXhhbmRtZWFzdXJlYnVkZHkiCkNGR19FRElUT1JfV0lGSV9TVEFfU1NJRDogc3RyID0gIm1peGFuZG1lYXN1cmVidWRkeXt9IiAjIHt9IHdpbGwgYmUgcmVwbGFjZCB3aXRoIGRldmljZSBpZDogIF88aWQ+CkNGR19FRElUT1JfV0lGSV9TVEFfUFNLOiBzdHIgPSAie30iICAjIHt9IHdpbGwgYmUgcmVwbGFjZCB3aXRoIGRldmljZSBpZDogIF88aWQ+CkNGR19FRElUT1JfSFRUUF9QT1JUOiBpbnQgPSA4MCAjIFdFQlNFUlZFUiBQT1JUIEZPUiBUSEUgT05MSU5FIEVESVRPUgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyMjIyMjIFBJTiBDT05GSUcgIyMjIyMjIyMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIE5FT1BJWEVMIFJJTkcKQ0ZHX05FT1BJWEVMX1BJTjogaW50ID0gMjgKIyBCVVRUT05TCkNGR19CVVRUT05fTEVGVF9QSU46IGludCA9IDYgIzIyCkNGR19CVVRUT05fUklHSFRfUElOOiBpbnQgPSAyCiMgSFg3MTEgTU9EVUxFCkNGR19IWDcxMV9ET1VUX1BJTjogaW50ID0gNQpDRkdfSFg3MTFfU0NLX1BJTjogaW50ID0gNAojIFtPUFRJT05BTF0gU0QgQ0FSRApDRkdfU0RDQVJEX1NQSUlOU1RBTkNFOiBpbnQgPSAxICMgT04gUlAyMDQwIDAgb3IgMSBERVBFTkRJTkcgVEhFIEZPTExPV0lORyBVU0VEIFNQSSBQSU5TCkNGR19TRENBUkRfU0NLX1BJTjogaW50ID0gMTAKQ0ZHX1NEQ0FSRF9NT1NJX1BJTjogaW50ID0gMTEKQ0ZHX1NEQ0FSRF9NSVNPX1BJTjogaW50ID0gOApDRkdfU0RDQVJEX0NTX1BJTjogaW50ID0gOQojIFtPUFRJT05BTF0gU1NEMTMwNiBvciBTSDExMDYKQ0ZHX09MRURfSTJDSU5TVEFOQ0U6IGludCA9IDAgIyBPTiBSUDIwNDAgMCBvciAxIERFUEVORElORyBUSEUgRk9MTE9XSU5HIFVTRUQgSTJDIFBJTlMKQ0ZHX09MRURfU0NMX1BJTjogaW50ID0gMTcKQ0ZHX09MRURfU0RBX1BJTjogaW50ID0gMTYKQ0ZHX09MRURfQUREUjogaW50ID0gMHgzYwpDRkdfRElTUExBWV9DSEFSX1dJRFRIOiBpbnQgPSA4ICMgY2hhciB3aWR0aCBpbiBwaXhlbHMgc2VlIHZnYTJ4OHggYXMgdXNlZCBmb250ZmlsZQpDRkdfRElTUExBWV9MSU5FX1NQQUNJTkc6IGludCA9IChDRkdfRElTUExBWV9DSEFSX1dJRFRIICsgMSkgIyBwaXhlbCBmb250IGhlaWdodCArICBhIGJpdCBleHRyYSBzcGFjZSB0byBtYWtlIGxhcmdlIHRleHQgbW9yZSByZWFkYWJsZQoKIyBESVNQTEFZIFJFU09MVVRJT04KU0NSX1dJRFRIOiBpbnQgPSAxMjgKU0NSX0hFSUdIVDogaW50ID0gNjQKCgogICAgCg==", "ledring.py": "aW1wb3J0IG5lb3BpeGVsCmltcG9ydCBtYWNoaW5lCmltcG9ydCBjb25maWcKaW1wb3J0IG5lb3BpeGVsCmltcG9ydCByYW5kb20KaW1wb3J0IGhlbHBlcgppbXBvcnQgbWF0aAppbXBvcnQgdGltZQpmcm9tIHNpbmdsZXRvbiBpbXBvcnQgc2luZ2xldG9uCgpAc2luZ2xldG9uCmNsYXNzIGxlZHJpbmc6CgogICAgQ09MT1JfUFJFU0VUX0hTVl9IX19CTFVFOiBmbG9hdCA9IDAuNjYKICAgIENPTE9SX1BSRVNFVF9IU1ZfSF9fUElOSzogZmxvYXQgPSAwLjg4CiAgICBDT0xPUl9QUkVTRVRfSFNWX0hfX0dSRUVOOiBmbG9hdCA9IDAuMzYKICAgIENPTE9SX1BSRVNFVF9IU1ZfSF9fQkxBQ0s6IGZsb2F0ID0gLTEuMAoKICAgIGRlZiBoc3ZfdG9fcmdiKHNlbGYsIGhzdl9jb2xvcik6CiAgICAgICAgIyBodHRwczovL2dpdGh1Yi5jb20vV2FycmluZ2VyL21pY3JvcHl0aG9uLXJnYmxlZC9ibG9iL21hc3Rlci9yZ2JsZWQucHkKICAgICAgICAoaCwgcywgdikgPSBoc3ZfY29sb3IKCiAgICAgICAgaWYgaCA8IDAuMDoKICAgICAgICAgICAgcmV0dXJuIDAsIDAsIDAKICAgICAgICBpID0gbWF0aC5mbG9vcihoKjYpCiAgICAgICAgZiA9IGgqNiAtIGkKICAgICAgICBwID0gdiAqICgxLXMpCiAgICAgICAgcSA9IHYgKiAoMS1mKnMpCiAgICAgICAgdCA9IHYgKiAoMS0oMS1mKSpzKQoKICAgICAgICByLCBnLCBiID0gWwogICAgICAgICAgICAodiwgdCwgcCksCiAgICAgICAgICAgIChxLCB2LCBwKSwKICAgICAgICAgICAgKHAsIHYsIHQpLAogICAgICAgICAgICAocCwgcSwgdiksCiAgICAgICAgICAgICh0LCBwLCB2KSwKICAgICAgICAgICAgKHYsIHAsIHEpLAogICAgICAgIF1baW50KGklNildCiAgICAgICAgciA9IGludCgyNTUgKiByKQogICAgICAgIGcgPSBpbnQoMjU1ICogZykKICAgICAgICBiID0gaW50KDI1NSAqIGIpCiAgICAgICAgcmV0dXJuIHIsIGcsIGIKCiAgICBkZWYgcmdiX3RvX2hzdihzZWxmLCByZ2JfY29sb3IpOgogICAgICAgIChyLCBnLCBiKSA9IHJnYl9jb2xvcgogICAgICAgIHIgPSBmbG9hdCgxIC8gMjU1ICogcikKICAgICAgICBnID0gZmxvYXQoMSAvIDI1NSAqIGcpCiAgICAgICAgYiA9IGZsb2F0KDEgLyAyNTUgKiBiKQogICAgICAgIGhpZ2ggPSBtYXgociwgZywgYikKICAgICAgICBsb3cgPSBtaW4ociwgZywgYikKICAgICAgICBoLCBzLCB2ID0gaGlnaCwgaGlnaCwgaGlnaAoKICAgICAgICBkID0gaGlnaCAtIGxvdwogICAgICAgIHMgPSAwIGlmIGhpZ2ggPT0gMCBlbHNlIGQvaGlnaAoKICAgICAgICBpZiBoaWdoID09IGxvdzoKICAgICAgICAgICAgaCA9IDAuMAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGggPSB7CiAgICAgICAgICAgICAgICByOiAoZyAtIGIpIC8gZCArICg2IGlmIGcgPCBiIGVsc2UgMCksCiAgICAgICAgICAgICAgICBnOiAoYiAtIHIpIC8gZCArIDIsCiAgICAgICAgICAgICAgICBiOiAociAtIGcpIC8gZCArIDQsCiAgICAgICAgICAgIH1baGlnaF0KICAgICAgICAgICAgaCAvPSA2CgogICAgICAgIHJldHVybiBoLCBzLCB2CgogICAgbmVvcGl4ZWxyaW5nOiBuZW9waXhlbC5OZW9QaXhlbCA9IE5vbmUKICAgCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5uZW9waXhlbHJpbmcgPSBuZW9waXhlbC5OZW9QaXhlbChtYWNoaW5lLlBpbihjb25maWcuQ0ZHX05FT1BJWEVMX1BJTiksIGNvbmZpZy5DRkdfTkVPUElYRUxfTEVEX0NPVU5UKQogICAKICAgIGRlZiBjbGVhcihzZWxmKToKICAgICAgICBzZWxmLnNldF9uZW9waXhlbF9mdWxsKAogICAgICAgICAgICAwLCAwLCAwKQoKCiAgICBkZWYgc2V0X25lb3BpeGVsX3NwaW5uZXIoc2VsZiwgX2N1cnJlbnRfc2VnbWVudDogaW50LCBfbm9fc2VnbWVudDogaW50LCBfb25fY29sb3I6IGZsb2F0ID0gMC4wLCBfb2ZmX2NvbG9yOiBmbG9hdCA9IDAuNik6CiAgICAgICAgaWYgX2N1cnJlbnRfc2VnbWVudCA8IDA6CiAgICAgICAgICAgIF9jdXJyZW50X3NlZ21lbnQgPSAwCiAgICAgICAgCiAgICAgICAgaWYgX25vX3NlZ21lbnQgPD0gMDoKICAgICAgICAgICAgX25vX3NlZ21lbnQgPSBjb25maWcuQ0ZHX05FT1BJWEVMX0xFRF9DT1VOVCAvIDYKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgbGVkc19wZXJfc2VnbWVudDogaW50ID0gY29uZmlnLkNGR19ORU9QSVhFTF9MRURfQ09VTlQgLyBfbm9fc2VnbWVudAogICAgICAgIAogICAgICAgIG9uX2NvbG9yID0gc2VsZi5oc3ZfdG9fcmdiKFtfb25fY29sb3IsIGNvbmZpZy5DRkdfTkVPUElYRUxfTUFYX0JSSUdIVE5FU1MsIGNvbmZpZy5DRkdfTkVPUElYRUxfTUFYX0JSSUdIVE5FU1NdKQogICAgICAgIG9mZl9jb2xvciA9IHNlbGYuaHN2X3RvX3JnYihbX29mZl9jb2xvciwgY29uZmlnLkNGR19ORU9QSVhFTF9NQVhfQlJJR0hUTkVTUywgY29uZmlnLkNGR19ORU9QSVhFTF9NQVhfQlJJR0hUTkVTU10pCgogICAgICAgIGZvciBpIGluIHJhbmdlKGNvbmZpZy5DRkdfTkVPUElYRUxfTEVEX0NPVU5UKToKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGkgPiBfY3VycmVudF9zZWdtZW50KmxlZHNfcGVyX3NlZ21lbnQgYW5kIGkgPCAoX2N1cnJlbnRfc2VnbWVudCsxKSpsZWRzX3Blcl9zZWdtZW50OgogICAgICAgICAgICAgICAgc2VsZi5uZW9waXhlbHJpbmdbaV0gPSAob25fY29sb3JbMF0sIG9uX2NvbG9yWzFdLCBvbl9jb2xvclsyXSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYubmVvcGl4ZWxyaW5nW2ldID0gKG9mZl9jb2xvclswXSwgb2ZmX2NvbG9yWzFdLCBvZmZfY29sb3JbMl0pCiAgICAgICAgICAgIAogICAgICAgIHNlbGYubmVvcGl4ZWxyaW5nLndyaXRlKCkKCgoKICAgIGRlZiBzZXRfbmVvcGl4ZWxfcGVyY2VudGFnZShzZWxmLCBfcGVyY2VudGFnZTogZmxvYXQsIF9zdGFydF9jb2xvcjogZmxvYXQgPSAwLjAsIF90YXJnZXRfY29sb3I6IGZsb2F0ID0gMC40LCBfb2ZmX2NvbG9yOiBmbG9hdCA9IDAuNiwgX2luZGVwZW5kZW50X2NvbG9yaW5nOiBib29sID0gRmFsc2UpOgogICAgICAgIF9wZXJjZW50YWdlID0gbWluKF9wZXJjZW50YWdlLCAxLjApCiAgICAgICAgCiAgICAgICAgZGlzcF92YWx1ZTogaW50ID0gaW50KG1pbihbaGVscGVyLmltYXAoX3BlcmNlbnRhZ2UgKiAxMDAsIDAsIDEwMCwgMCAsIGNvbmZpZy5DRkdfTkVPUElYRUxfTEVEX0NPVU5UKSwgY29uZmlnLkNGR19ORU9QSVhFTF9MRURfQ09VTlRdKSkKICAgICAgICAjcHJpbnQoZGlzcF92YWx1ZSkKICAgICAgICAKCiAgICAgICAgY29sb3JfdmFsdWU6IGZsb2F0ID0gaGVscGVyLmZtYXAoZGlzcF92YWx1ZSwgMCwgY29uZmlnLkNGR19ORU9QSVhFTF9MRURfQ09VTlQsIF9zdGFydF9jb2xvciAsIF90YXJnZXRfY29sb3IpCiAgICAgICAgCiAgICAgICAgb2ZmX2NvbG9yID0gc2VsZi5oc3ZfdG9fcmdiKFtfb2ZmX2NvbG9yLCBjb25maWcuQ0ZHX05FT1BJWEVMX01BWF9CUklHSFRORVNTLCBjb25maWcuQ0ZHX05FT1BJWEVMX01BWF9CUklHSFRORVNTXSkKICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoY29uZmlnLkNGR19ORU9QSVhFTF9MRURfQ09VTlQpOgogICAgICAgICAgICAKICAgICAgICAgICAgaWYgX2luZGVwZW5kZW50X2NvbG9yaW5nOgogICAgICAgICAgICAgICAgY29sb3JfdmFsdWUgPSBoZWxwZXIuZm1hcChpLCAwLCBjb25maWcuQ0ZHX05FT1BJWEVMX0xFRF9DT1VOVCwgX3N0YXJ0X2NvbG9yICwgX3RhcmdldF9jb2xvcikKICAgICAgICAjICAgICMgQVBQTFkgU1RBUlQgSU5ERVggT0ZGU0VUCiAgICAgICAgICAgIGxlZF9pbmRleCA9IGludCgoaStjb25maWcuQ0ZHX05FT1BJWEVMX0xFRF9TVEFSVF9PRkZTRVQpICUgY29uZmlnLkNGR19ORU9QSVhFTF9MRURfQ09VTlQpCiAgICAgICAgIyAgICAjIEFCT1ZFIFRBUkdFVCBQRVJDRU5UQUdFIFNFVCBPRkYgT1IgT04gTE9XIENPTE9SCiAgICAgICAgICAgIGlmIGkgPiBkaXNwX3ZhbHVlOgogICAgICAgICAgICAgICAgc2VsZi5uZW9waXhlbHJpbmdbbGVkX2luZGV4XSA9IChvZmZfY29sb3JbMF0sIG9mZl9jb2xvclsxXSwgb2ZmX2NvbG9yWzJdKQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgCiAgICAgICAgICAgIHJnYiA9IHNlbGYuaHN2X3RvX3JnYihbY29sb3JfdmFsdWUsIDEuMCwgY29uZmlnLkNGR19ORU9QSVhFTF9NQVhfQlJJR0hUTkVTU10pCiAgICAgICAgICAgIHNlbGYubmVvcGl4ZWxyaW5nW2xlZF9pbmRleF0gPSAocmdiWzBdLCByZ2JbMV0sIHJnYlsyXSkKICAgICAgICAKICAgICAgICAKICAgICAgICBzZWxmLm5lb3BpeGVscmluZy53cml0ZSgpCgoKICAgIGRlZiBzZXRfbmVvcGl4ZWxfZnVsbF9oc3Yoc2VsZiwgX2hzdl9jb2xvcjogZmxvYXQgPSAwLjApOgogICAgICAgIHNlbGYuc2V0X25lb3BpeGVsX3BlcmNlbnRhZ2UoMS4wLCBfaHN2X2NvbG9yLCBfaHN2X2NvbG9yLCBfaHN2X2NvbG9yKQoKICAgIGRlZiBzZXRfbmVvcGl4ZWxfcmFuZG9tKHNlbGYsIF9lcjogYm9vbCA9IEZhbHNlLCBfZWc6IGJvb2wgPSBGYWxzZSwgX2ViOiBib29sID0gVHJ1ZSk6CiAgICAgICAgcjogaW50ID0gaW50KDEyOCogcmFuZG9tLnJhbmRvbSgpKSAqIF9lcgogICAgICAgIGc6IGludCA9IGludCgxMjgqIHJhbmRvbS5yYW5kb20oKSkgKiBfZWcKICAgICAgICBiOiBpbnQgPSBpbnQoMTI4KiByYW5kb20ucmFuZG9tKCkpICogX2ViCiAgICAgICAgc2VsZi5zZXRfbmVvcGl4ZWxfZnVsbChyLCBnLCBiKQoKCiAgICBkZWYgc2V0X25lb3BpeGVsX2Z1bGwoc2VsZiwgX3I6IGludCwgX2c6IGludCwgX2I6IGludCk6CiAgICAgICAgaCwgXywgXyA9IHNlbGYucmdiX3RvX2hzdihbX3IsIF9nLCBfYl0pCiAgICAgICAgc2VsZi5zZXRfbmVvcGl4ZWxfZnVsbF9oc3YoaCkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICB3aGlsZSBUcnVlOgogICAgICAgIHNlZ21lbnRzOiBpbnQgPSBjb25maWcuQ0ZHX05FT1BJWEVMX0xFRF9DT1VOVCAvIDUKICAgICAgICBmb3IgaSBpbiByYW5nZShzZWdtZW50cyk6CiAgICAgICAgICAgIGxlZHJpbmcoKS5zZXRfbmVvcGl4ZWxfc3Bpbm5lcihpLCBzZWdtZW50cywgbGVkcmluZygpLkNPTE9SX1BSRVNFVF9IU1ZfSF9fQkxVRSwgbGVkcmluZygpLkNPTE9SX1BSRVNFVF9IU1ZfSF9fUElOSykKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjEpCgoK", "recipe.py": "", "settings.py": "", "recipe_loader.py": "aW1wb3J0IG1hY2hpbmUNCmltcG9ydCBvcw0KaW1wb3J0IHRpbWUNCmltcG9ydCBqc29uDQoNCmZyb20gdWkgaW1wb3J0IHVpDQppbXBvcnQgY29uZmlnDQppbXBvcnQgaGVscGVyDQppbXBvcnQgZXhhbXBsZV9yZWNpcGVzDQppbXBvcnQgc2V0dGluZ3MNCmltcG9ydCByZWNpcGUNCmZyb20gc2luZ2xldG9uIGltcG9ydCBzaW5nbGV0b24NCg0KDQoNCkBzaW5nbGV0b24NCmNsYXNzIHJlY2lwZV9sb2FkZXI6DQogICAgDQogIA0KICAgDQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBwcmludCgicmVjaXBlX2xvYWRlcjogX19pbml0X18iKQ0KDQogICAgICAgIHNlbGYuY3JlYXRlX2luaXRpYWxfcmVjaXBlKCkNCiAgICAgICAgDQogICANCiAgICAgDQogICAgZGVmIGNyZWF0ZV9pbml0aWFsX3JlY2lwZShzZWxmKToNCiAgICAgICAgcjogcmVjaXBlLnJlY2lwZQ0KICAgICAgICBmb3IgciBpbiBleGFtcGxlX3JlY2lwZXMuR0VUX0VYQU1QTEVfUkVDSVBFU19DT0xMRUNUSU9OKCk6DQogICAgICAgICAgICBzZXR0aW5ncy5zZXR0aW5ncygpLndyaXRlX2pzb25fZmlsZShyLmZpbGVuYW1lLCByLnRvX2RpY3QoKSkNCiAgICAgICAgICAgIA0KDQogICAgZGVmIGxpc3RfcmVjcGllcyhzZWxmLCBfaW5jbHVkZV9kZXNjcmlwdGlvbjogYm9vbCA9IEZhbHNlKSAtPiB0dXBsZVtzdHIsIHN0ciwgc3RyXToNCiAgICAgICAgcmVzID0gW10NCiAgICAgICAgZm9yIGYgaW4gc2V0dGluZ3Muc2V0dGluZ3MoKS5saXN0X2ZpbGVzKCk6DQogICAgICAgICAgICBpZiBmLmVuZHN3aXRoKCcucmVjaXBlJyk6DQogICAgICAgICAgICAgICAgIyBmID0gdGVxdWlsYV9zdW5yaXNlLnJlY2lwZQ0KICAgICAgICAgICAgICAgIG5hbWU6IHN0ciA9IGYucmVwbGFjZSgnLnJlY2lwZScsICcnKS5yZXBsYWNlKCdfJywgJyAnKQ0KDQogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHN0ciA9ICIiDQoNCiAgICAgICAgICAgICAgICBpZiBfaW5jbHVkZV9kZXNjcmlwdGlvbjoNCiAgICAgICAgICAgICAgICAgICAgcjogcmVjaXBlLnJlY2lwZSA9IHNlbGYuZ2V0X3JlY2lwZV9ieV9maWxlbmFtZShmKQ0KICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA9IHIuZ2V0X2Rlc2NyaXB0aW9uKCkNCiAgICAgICAgICAgICAgICAgICAgZGVsIHINCg0KICAgICAgICAgICAgICAgIHJlcy5hcHBlbmQoKGYsbmFtZSwgZGVzY3JpcHRpb24pKQ0KICAgICAgICByZXR1cm4gcmVzDQogICAgDQoNCiAgICBkZWYgZ2V0X3JlY2lwZV9maWxlX2NvbnRlbnQoc2VsZiwgX2ZpbGVuYW1lOiBzdHIpIC0+IGRpY3Q6DQogICAgICAgICMgQ0hFQ0sgRk9SIEVYVEVOVElPTg0KICAgICAgICBpZiBub3QgX2ZpbGVuYW1lLmVuZHN3aXRoKCcucmVjaXBlJyk6DQogICAgICAgICAgICBfZmlsZW5hbWUgPSBfZmlsZW5hbWUgKyAiLnJlY2lwZSINCiAgICAgICAgIyBDSEVDSyBGSUxFIEVYSVNUUw0KICAgICAgICBpZiBfZmlsZW5hbWUgbm90IGluIHNldHRpbmdzLnNldHRpbmdzKCkubGlzdF9maWxlcygpOg0KICAgICAgICAgICAgcmV0dXJuIHJlY2lwZS5yZWNpcGUoKQ0KICAgICAgICAjIExPQUQgQ09OVEVOVCBBUyBKU09ODQogICAgICAgIGpzb25fcmVjaXBlID0gc2V0dGluZ3Muc2V0dGluZ3MoKS5sb2FkX2pzb25fZmlsZShfZmlsZW5hbWUpDQogICAgICAgIHJldHVybiBqc29uX3JlY2lwZQ0KICAgIA0KDQogICAgZGVmIGdldF9yZWNpcGVfYnlfZmlsZW5hbWUoc2VsZiwgX2ZpbGVuYW1lOiBzdHIpIC0+IHJlY2lwZS5yZWNpcGU6DQogICAgICAgICMgTE9BRCBKU09OIENPTlRFTlQgT0YgUkVDSVBFIEZJTEUgDQogICAgICAgIGpzb25fcmVjaXBlOiBkaWN0ID0gc2VsZi5nZXRfcmVjaXBlX2ZpbGVfY29udGVudChfZmlsZW5hbWUpDQoNCiAgICAgICAgIyBDUkVBVEUgUkVDSVBFDQogICAgICAgIHI6IHJlY2lwZS5yZWNpcGUgPSByZWNpcGUucmVjaXBlKCkNCg0KICAgICAgICBpZiBqc29uX3JlY2lwZSBpcyBOb25lIG9yIG5vdCBqc29uX3JlY2lwZTogICAgICAgIA0KICAgICAgICAgICAgcmV0dXJuIHINCiAgICAgICAgDQogICAgICAgICMgUEFSU0UgSlNPTiBUTyBSRUNJUEUNCiAgICAgICAgci5mcm9tX2RpY3QoanNvbl9yZWNpcGUpDQogICAgICAgIHJldHVybiByDQogICAgICAgIA0KDQogICAgDQogICAgDQo=", "sdcard.py": "", "recipe_editor.py": "aW1wb3J0IGNvbmZpZwppbXBvcnQgc2V0dGluZ3MKaW1wb3J0IHRpbWUKaW1wb3J0IGhlbHBlcgppbXBvcnQganNvbgppbXBvcnQgcmVjaXBlX2xvYWRlcgoKCnRyeToKICAgIGltcG9ydCBuZXR3b3JrCiAgICBpbXBvcnQgbWljcm9weXNlcnZlcgoKICAgIGNsYXNzIHJlY2lwZV9lZGl0b3I6CiAgICAgICAgCgogICAgICAgIHNlcnZlcjogbWljcm9weXNlcnZlci5NaWNyb1B5U2VydmVyID0gbWljcm9weXNlcnZlci5NaWNyb1B5U2VydmVyKHBvcnQ9Y29uZmlnLkNGR19FRElUT1JfSFRUUF9QT1JUKQogICAgICAgIAogICAgICAgIGRlZiBzZXJ2ZV9pbmRleChzZWxmLCByZXF1ZXN0KToKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIuc2VuZCgiVEhJUyBJUyBJTkRFWCBQQUdFISIpCgogICAgICAgIGRlZiBzZXJ2ZV9yZWNpcGUoc2VsZiwgcmVxdWVzdCk6CiAgICAgICAgICAgIHBhcmFtcyA9IG1pY3JvcHlzZXJ2ZXIuZ2V0X3JlcXVlc3RfcXVlcnlfcGFyYW1zKHJlcXVlc3QpCQogICAgICAgICAgICBqc29uX3JlcHNvbnNlOiBkaWN0ID0ge30KICAgICAgICAgICAgaWYgJ2ZpbGVuYW1lJyBpbiBwYXJhbXM6CiAgICAgICAgICAgICAgICBqc29uX3JlcHNvbnNlID0gcmVjaXBlX2xvYWRlci5yZWNpcGVfbG9hZGVyLmdldF9yZWNpcGVfZmlsZV9jb250ZW50KHBhcmFtc1snZmlsZW5hbWUnXSkKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLnNlcnZlci5zZW5kKCJIVFRQLzEuMCAyMDAgT0tcclxuIikKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIuc2VuZCgiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXHJcblxyXG4iKQogICAgICAgICAgICBzZWxmLnNlcnZlci5zZW5kKGpzb24uZHVtcHMoanNvbl9yZXBzb25zZSkpCgogICAgICAgIGRlZiBzZXJ2ZV9yZWNpcGVzKHNlbGYsIHJlcXVlc3QpOgogICAgICAgICAgICBqc29uX3JlcHNvbnNlOiBkaWN0ID0ge30KICAgICAgICAgICAgCgogICAgICAgICAgICBmb3IgciBpbiByZWNpcGVfbG9hZGVyLnJlY2lwZV9sb2FkZXIoKS5saXN0X3JlY3BpZXMoX2luY2x1ZGVfZGVzY3JpcHRpb249VHJ1ZSk6CiAgICAgICAgICAgICAgICBmaWxlbmFtZSwgbmFtZSwgZGVzY3JpcHRpb24gPSByCiAgICAgICAgICAgICAgICBsaW5rOiBzdHIgPSAiL3JlY2lwZT9maWxlbmFtZT17fSIuZm9ybWF0KGZpbGVuYW1lKQogICAgICAgICAgICAgICAganNvbl9yZXBzb25zZVtmaWxlbmFtZV0gPSB7Im5hbWUiOiBuYW1lLCAiZGVzY3JpcHRpb24iOiBkZXNjcmlwdGlvbiwgImxpbmsiOiBsaW5rfQoKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIuc2VuZCgiSFRUUC8xLjAgMjAwIE9LXHJcbiIpCiAgICAgICAgICAgIHNlbGYuc2VydmVyLnNlbmQoIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxyXG5cclxuIikKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIuc2VuZChqc29uLmR1bXBzKGpzb25fcmVwc29uc2UpKQoKCiAgICAgICAgZGVmIF9faW5pdF9fKCk6CiAgICAgICAgICAgIHBhc3MKICAgICAgICAKCiAgICAgICAgZGVmIGhhc19jYXBhYmlsaXRpZXMoc2VsZikgLT4gYm9vbDoKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAKICAgICAgICBkZWYgZGlzYWJsZV93aWZpKHNlbGYpOgogICAgICAgICAgICB3bGFuID0gbmV0d29yay5XTEFOKG5ldHdvcmsuU1RBX0lGKQogICAgICAgICAgICB3bGFuLmFjdGl2ZShGYWxzZSkKICAgICAgICAKCiAgICAgICAgZGVmIHNldHVwX3dlYnNlcnZlcihzZWxmKToKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQUREIFJPVVRFUwogICAgICAgICAgICBzZWxmLnNlcnZlci5hZGRfcm91dGUoIi8iLCBzZWxmLnNlcnZlX2luZGV4KQogICAgICAgICAgICBzZWxmLnNlcnZlci5hZGRfcm91dGUoIi9pbmRleCIsIHNlbGYuc2VydmVfaW5kZXgpCiAgICAgICAgICAgIHNlbGYuc2VydmVyLm9uX25vdF9mb3VuZChzZWxmLnNlcnZlX2luZGV4KSAjIDQwNAoKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIuYWRkX3JvdXRlKCIvcmVjaXBlIiwgc2VsZi5zZXJ2ZV9yZWNpcGUpCiAgICAgICAgICAgIHNlbGYuc2VydmVyLmFkZF9yb3V0ZSgiL3JlY2lwZXMiLCBzZWxmLnNlcnZlX3JlY2lwZXMpCgoKICAgICAgICAgICAgc2VsZi5zZXJ2ZXIubG9vcF9pbml0KCkKCiAgICAgICAgZGVmIHN0b3Bfd2Vic2VydmVyKHNlbGYpOgogICAgICAgICAgICBzZWxmLnNlcnZlci5zdG9wKCkKCiAgICAgICAgZGVmIGhhbmRsZV9jb25uZWN0aW9uKHNlbGYpOgogICAgICAgICAgICBzZWxmLnNlcnZlci5sb29wKCkKICAgCgogICAgICAgIGRlZiBvcGVuX2FjY2Vzc3BvaW50KHNlbGYsIF9zc2lkOiBzdHIsIF9wc2s6IHN0ciA9IE5vbmUpIC0+IHN0cjoKCiAgICAgICAgICAgIG5ldHdvcmsuY291bnRyeShjb25maWcuQ0ZHX05FVFdPUktfV0lGSUNPVU5UUlkpCiAgICAgICAgICAgIG5ldHdvcmsuaG9zdG5hbWUoY29uZmlnLkNGR19FRElUT1JfV0lGSV9TVEFfSE9TVE5BTUUuZm9ybWF0KCJfIiArIGhlbHBlci5nZXRfc3lzdGVtX2lkKCkpKQoKICAgICAgICAgICAgd2xhbiA9IG5ldHdvcmsuV0xBTihuZXR3b3JrLlNUQV9JRikKICAgICAgICAgICAgd2xhbi5hY3RpdmUoVHJ1ZSkKICAgICAgICAgICAgd2xhbi5jb25maWcoZXNzaWQ9X3NzaWQsIHBhc3N3b3JkPV9wc2spCiAgICAgICAgICAgIAogICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gd2xhbi5pZmNvbmZpZygpCiAgICAgICAgCgoKICAgICAgCiAgICAgICAgCgpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgCiAgICBjbGFzcyByZWNpcGVfZWRpdG9yOgogICAgICAgIAogICAgICAgIGRlZiBfX2luaXRfXygpOgogICAgICAgICAgICBwYXNzCgogICAgICAgIGRlZiBoYXNfY2FwYWJpbGl0aWVzKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICBkZWYgZGlzYWJsZV93aWZpKHNlbGYpOgogICAgICAgICAgICBwYXNzCiAgICAgICAgCiAgICAgICAgZGVmIHNldHVwX3dlYnNlcnZlcihzZWxmKToKICAgICAgICAgICAgcGFzcwogICAgICAgIAogICAgICAgIGRlZiBzdG9wX3dlYnNlcnZlcihzZWxmKToKICAgICAgICAgICAgcGFzcwoKICAgICAgICBkZWYgaGFuZGxlX2Nvbm5lY3Rpb24oc2VsZik6CiAgICAgICAgICAgIHBhc3MKCiAgICAgICAgZGVmIG9wZW5fYWNjZXNzcG9pbnQoc2VsZiwgX3NzaWQ6IHN0ciwgX3Bzazogc3RyID0gTm9uZSkgLT4gc3RyOgogICAgICAgICAgICByZXR1cm4gIiI=", "menu_entry_restore.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSByZWNpcGVfdXBkYXRlciBpbXBvcnQgcmVjaXBlX3VwZGF0ZXIKZnJvbSBtZW51X21hbmFnZXIgaW1wb3J0IG1lbnVfbWFuYWdlcgpjbGFzcyBtZW51X2VudHJ5X3Jlc3RvcmUobWVudV9lbnRyeS5tZW51X2VudHJ5KToKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygiUkVTVE9SRSBGSVJNV0FSRSIsICJSZXN0b3JlIHN5c3RlbSBmaXJtd2FyZSIpCgogICAgZGVmIHByZXZpZXcoc2VsZik6CiAgICAgICAgcHJpbnQoInByZXZpZXcge30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIHVpKCkuc2hvd19yZWNpcGVfaW5mb3JtYXRpb24oc2VsZi5uYW1lLCBzZWxmLmRlc2NyaXB0aW9uKQoKCiAgICBkZWYgYWN0aXZhdGUoc2VsZik6CiAgICAgICAgcHJpbnQoImFjdGl2YXRlIHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLnNob3dfcmVjaXBlX2luZm9ybWF0aW9uKCJTVVJFID8iLCAiUHJlc3Mgb2sgdG8gcmVzZXQgdGhlIGZpcm1ud2FyZS4gQ3VzdG9tIHJlY2lwZXMgd2lsbCBiZSBkZWxldGVkIikKICAgICAgICBsZWRyaW5nKCkuc2V0X25lb3BpeGVsX2Z1bGwoNTAsIDAsIDApCgogICAgZGVmIHRlYXJkb3duKHNlbGYpOgogICAgICAgIHByaW50KCJ0ZWFyZG93biB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCgoKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CiAgICAgICAgaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX05BVklHQVRJT046CiAgICAgICAgICAgIGlmIF9zeXN0ZW1fY29tbWFuZC5hY3Rpb24gPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuTkFWSUdBVElPTl9FTlRFUjoKICAgICAgICAgICAgICAgIGxlZHJpbmcoKS5zZXRfbmVvcGl4ZWxfZnVsbCg1MCwgMCwgNTApCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgaW1wb3J0IG1hY2hpbmUKICAgICAgICAgICAgICAgICAgICBpbXBvcnQgZnNkYXRhcmVjb25zdHJ1Y3RvcgogICAgICAgICAgICAgICAgICAgIGZzZGF0YXJlY29uc3RydWN0b3IucmVzdG9yZShUcnVlKQogICAgICAgICAgICAgICAgICAgIG1hY2hpbmUucmVzZXQoKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgIHByaW50KGUpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBtZW51X21hbmFnZXIoKS5leGl0X2N1cnJlbnRfbWVudSgpCiAgICAgICAgICAg", "mmb_display.py": "aW1wb3J0IGNvbmZpZwppbXBvcnQgbWFjaGluZQoKCmNsYXNzIG1tYl9kaXNwbGF5KCk6CgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGRpc3BsYXlfaW5zdGFuY2VfY3JlYXRvcigpOgogICAgICAgICAgICAgICAgICAgCiAgICAgICAgaWYgY29uZmlnLkNGR19ESVNQTEFZX1RZUEUgPT0gInNoMTEwNiI6CiAgICAgICAgICAgIGltcG9ydCBzaDExMDYKICAgICAgICAgICAgaTJjID0gbWFjaGluZS5JMkMoY29uZmlnLkNGR19PTEVEX0kyQ0lOU1RBTkNFLCBzY2w9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NDTF9QSU4pLCBzZGE9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NEQV9QSU4pLCBmcmVxPTQwMDAwMCkKICAgICAgICAgICAgZGlzcCA9IHNoMTEwNi5TSDExMDZfSTJDKGNvbmZpZy5TQ1JfV0lEVEgsIGNvbmZpZy5TQ1JfSEVJR0hULCBpMmMsIE5vbmUsIGNvbmZpZy5DRkdfT0xFRF9BRERSKQogICAgICAgICAgICBkaXNwLnNsZWVwKEZhbHNlKQogICAgICAgICAgICByZXR1cm4gZGlzcAoKICAgICAgICBlbGlmIGNvbmZpZy5DRkdfRElTUExBWV9UWVBFID09ICJzc2QxMzA2IjoKICAgICAgICAgICAgaW1wb3J0IHNzZDEzMDYKICAgICAgICAgICAgaTJjID0gbWFjaGluZS5JMkMoY29uZmlnLkNGR19PTEVEX0kyQ0lOU1RBTkNFLCBzY2w9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NDTF9QSU4pLCBzZGE9bWFjaGluZS5QaW4oY29uZmlnLkNGR19PTEVEX1NEQV9QSU4pLCBmcmVxPTQwMDAwMCkKICAgICAgICAgICAgZGlzcCA9IHNzZDEzMDYuU1NEMTMwNl9JMkMoY29uZmlnLlNDUl9XSURUSCwgY29uZmlnLlNDUl9IRUlHSFQsIGkyYywgY29uZmlnLkNGR19PTEVEX0FERFIpCiAgICAgICAgICAgIHJldHVybiBkaXNwCiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICAKCiAgICAKICAgIGRlZiBfX2luaXRfXyhzZWxmKSAtPiBOb25lOgogICAgICAgIHBhc3MKCiAgICBkZWYgcGl4ZWwoc2VsZiwgeCwgeSwgdmFsdWUpOgogICAgICAgIHBhc3MKIAogICAgZGVmIHNob3coKToKICAgICAgICBwYXNzCiAgICAgIAogICAgZGVmIGZpbGxfcmVjdChzZWxmLCB4LCB5LCB3LCBoLCB2KToKICAgICAgICBwYXNzCiAgICAKICAgIGRlZiBwcmludChzZWxmLCBfc3RyKToKICAgICAgICBwYXNzCgogICAgZGVmIHdyaXRlKHNlbGYsIF9zdHIpOgogICAgICAgIHBhc3MKICAgIAogICAgZGVmIGVyYXNlKHNlbGYpOgogICAgICAgIHBhc3MKCiAgICBkZWYgdGV4dChzZWxmLCB0ZXh0LCB4LCB5LCBjb2xvcj0xKToKICAgICAgICBwYXNz", "menu_entry_hardwaretest.py": "ZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmltcG9ydCBtZW51X2VudHJ5CmltcG9ydCBzeXN0ZW1fY29tbWFuZApmcm9tIHVpIGltcG9ydCB1aQpmcm9tIGxlZHJpbmcgaW1wb3J0IGxlZHJpbmcKZnJvbSBtZW51X21hbmFnZXIgaW1wb3J0IG1lbnVfbWFuYWdlcgpjbGFzcyBtZW51X2VudHJ5X2hhcmR3YXJldGVzdChtZW51X2VudHJ5Lm1lbnVfZW50cnkpOgoKCiAgIAogICAgbGFzdF90aW1lcl9ldmVudDogc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQgPSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCgpCiAgICBsYXN0X3NjYWxlX2V2ZW50OiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCA9IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kKCkKICAgIGxhc3RfdXNlcl9ldmVudDogc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQgPSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCgpCgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oIkhBUkRXQVJFIFRFU1QiLCAiVGVzdHMgdGhlIGludGVybmFsIGhhcmR3YXJlIikKCiAgICBkZWYgcHJldmlldyhzZWxmKToKICAgICAgICBwcmludCgicHJldmlldyBje30iLmZvcm1hdChzZWxmLm5hbWUpKQogICAgICAgIHVpKCkuc2hvd19yZWNpcGVfaW5mb3JtYXRpb24oc2VsZi5uYW1lLCBzZWxmLmRlc2NyaXB0aW9uKQoKCiAgICBkZWYgYWN0aXZhdGUoc2VsZik6CiAgICAgICAgcHJpbnQoImFjdGl2YXRlIHt9Ii5mb3JtYXQoc2VsZi5uYW1lKSkKICAgICAgICB1aSgpLmNsZWFyKCkKICAgICAgICAKCgogICAgZGVmIHRlYXJkb3duKHNlbGYpOgogICAgICAgIHByaW50KCJ0ZWFyZG93biB7fSIuZm9ybWF0KHNlbGYubmFtZSkpCgoKICAgIGRlZiB1cGRhdGUoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CiAgICAgICAKICAgICAgICBpZiBfc3lzdGVtX2NvbW1hbmQudHlwZSA9PSBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZC5DT01NQU5EX1RZUEVfVElNRVJfSVJROgogICAgICAgICAgIHNlbGYubGFzdF90aW1lcl9ldmVudCA9IF9zeXN0ZW1fY29tbWFuZAogICAgICAgIGVsaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX1NDQUxFX1ZBTFVFOgogICAgICAgICAgIHNlbGYubGFzdF9zY2FsZV9ldmVudCA9IF9zeXN0ZW1fY29tbWFuZAogICAgICAgIGVsaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX05BVklHQVRJT046CiAgICAgICAgICAgIHNlbGYubGFzdF91c2VyX2V2ZW50ID0gX3N5c3RlbV9jb21tYW5kCiAgICAgICAgICAgIAogICAgICAgIHVpKCkuc2hvd19tc2coInQ6e30gYTp7fSBiOnt9IHQ6e30gczp7fSIuZm9ybWF0KHNlbGYubGFzdF91c2VyX2V2ZW50LnR5cGUsIHNlbGYubGFzdF91c2VyX2V2ZW50LmFjdGlvbiwgc2VsZi5sYXN0X3VzZXJfZXZlbnQudmFsdWUsIHNlbGYubGFzdF90aW1lcl9ldmVudC52YWx1ZSwgc2VsZi5sYXN0X3NjYWxlX2V2ZW50LnZhbHVlKSk=", "menu_manager.py": "aW1wb3J0IG1lbnVfZW50cnkKaW1wb3J0IHN5c3RlbV9jb21tYW5kCmltcG9ydCBsZWRyaW5nCmZyb20gc2luZ2xldG9uIGltcG9ydCBzaW5nbGV0b24KCgpAc2luZ2xldG9uCmNsYXNzIG1lbnVfbWFuYWdlcjoKCgogICAgTUVOVV9TVEFURV9JTkFDVElWRSA9IDAKICAgIE1FTlVfU1RBVEVfQUNUSVZFID0gMQoKICAgIG1lbnVfZW50aXJlczogW21lbnVfZW50cnkubWVudV9lbnRyeV0gPSBbXQoKICAgIGN1cnJlbnRfYWN0aXZlX2VudHJ5X2luZGV4OiBpbnQgPSAtMQogICAgY3VycmVudF9tZW51X3N0YXRlOiBpbnQgPSBNRU5VX1NUQVRFX0lOQUNUSVZFCgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHBhc3MKCiAgICAKICAgIGRlZiBhZGRfc3ViZW50cmllcyhzZWxmLCBfZW50cnk6IG1lbnVfZW50cnkubWVudV9lbnRyeSk6CgogICAgICAgIHNlbGYubWVudV9lbnRpcmVzLmFwcGVuZChfZW50cnkpCgogICAgICAgICMgVEhFIEZJUlNUIEVOVFJZIEFEREVEIElTIFRIRSBTVEFSVElORyBFTlRSWQogICAgICAgIGlmIHNlbGYuY3VycmVudF9hY3RpdmVfZW50cnlfaW5kZXggPCAwOgogICAgICAgICAgICBzZWxmLmN1cnJlbnRfYWN0aXZlX2VudHJ5X2luZGV4ID0gMAogICAgICAgICAgICBzZWxmLmRpc3BsYXlfcHJldmlldygpCiAgICAgICAgICAgIAogICAgCgoKCiAgICBkZWYgZ2V0X21lbnVfZW50cnkoc2VsZikgLT4gbWVudV9lbnRyeS5tZW51X2VudHJ5OgogICAgICAgIGlmIHNlbGYuY3VycmVudF9hY3RpdmVfZW50cnlfaW5kZXggPCAwOgogICAgICAgICAgICBwcmludCgibm8gbWVudV9lbnRyaWVzIGFkZGVkID8iKQogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIGVsaWYgc2VsZi5jdXJyZW50X2FjdGl2ZV9lbnRyeV9pbmRleCA+PSBsZW4oc2VsZi5tZW51X2VudGlyZXMpOgogICAgICAgICAgICBzZWxmLmN1cnJlbnRfYWN0aXZlX2VudHJ5X2luZGV4ID0gMAoKICAgICAgICByZXR1cm4gc2VsZi5tZW51X2VudGlyZXNbc2VsZi5jdXJyZW50X2FjdGl2ZV9lbnRyeV9pbmRleF0KCgogICAgZGVmIGV4aXRfY3VycmVudF9tZW51KHNlbGYpOgogICAgICAgIGlmIHNlbGYuZ2V0X21lbnVfZW50cnkoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5nZXRfbWVudV9lbnRyeSgpLnRlYXJkb3duKCkKICAgICAgICAgICAgc2VsZi5kaXNwbGF5X3ByZXZpZXcoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuY3VycmVudF9hY3RpdmVfZW50cnlfaW5kZXggPSAwCgogICAgICAgIHNlbGYuY3VycmVudF9tZW51X3N0YXRlID0gc2VsZi5NRU5VX1NUQVRFX0lOQUNUSVZFCgoKICAgIGRlZiBkaXNwbGF5X3ByZXZpZXcoc2VsZik6CiAgICAgICAgc2VsZi5nZXRfbWVudV9lbnRyeSgpLnByZXZpZXcoKQogICAgICAgICMgT1BUSU9OQUwgRElTUExBWSBMRUQgU1RBVEUKICAgICAgICBsZWRyaW5nLmxlZHJpbmcoKS5zZXRfbmVvcGl4ZWxfc3Bpbm5lcihzZWxmLmN1cnJlbnRfYWN0aXZlX2VudHJ5X2luZGV4LCBsZW4oc2VsZi5tZW51X2VudGlyZXMpLCBsZWRyaW5nLmxlZHJpbmcoKS5DT0xPUl9QUkVTRVRfSFNWX0hfX1BJTkssIGxlZHJpbmcubGVkcmluZygpLkNPTE9SX1BSRVNFVF9IU1ZfSF9fQkxVRSkKICAgICAgICAKICAgIGRlZiBwcm9jZXNzX3VzZXJfY29tbWFuZHMoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZC5zeXN0ZW1fY29tbWFuZCk6CiAgICAgICAgaWYgc2VsZi5nZXRfbWVudV9lbnRyeSgpIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIAogICAgICAgIAogICAgICAgIGlmIHNlbGYuY3VycmVudF9tZW51X3N0YXRlID09IHNlbGYuTUVOVV9TVEFURV9JTkFDVElWRToKICAgICAgICAgICAgaWYgX3N5c3RlbV9jb21tYW5kLnR5cGUgPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuQ09NTUFORF9UWVBFX05BVklHQVRJT046CgogICAgICAgICAgICAgICAgIyBTQ1JPTCBUSE9VR0ggTUVOVVMKICAgICAgICAgICAgICAgIGlmIF9zeXN0ZW1fY29tbWFuZC5hY3Rpb24gPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuTkFWSUdBVElPTl9MRUZUOgogICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudF9hY3RpdmVfZW50cnlfaW5kZXggPSAoc2VsZi5jdXJyZW50X2FjdGl2ZV9lbnRyeV9pbmRleCArIDEpICUgbGVuKHNlbGYubWVudV9lbnRpcmVzKQogICAgICAgICAgICAgICAgICAgIHByaW50KHNlbGYuY3VycmVudF9hY3RpdmVfZW50cnlfaW5kZXgpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaXNwbGF5X3ByZXZpZXcoKQogICAgICAgICAgICAgICAgZWxpZiBfc3lzdGVtX2NvbW1hbmQuYWN0aW9uID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLk5BVklHQVRJT05fUklHSFQ6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50X2FjdGl2ZV9lbnRyeV9pbmRleCA9IChzZWxmLmN1cnJlbnRfYWN0aXZlX2VudHJ5X2luZGV4IC0gMSkgJSBsZW4oc2VsZi5tZW51X2VudGlyZXMpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaXNwbGF5X3ByZXZpZXcoKQogICAgICAgICAgICAgICAgIyBFTlRFUiBNRU5VCiAgICAgICAgICAgICAgICBlbGlmIF9zeXN0ZW1fY29tbWFuZC5hY3Rpb24gPT0gc3lzdGVtX2NvbW1hbmQuc3lzdGVtX2NvbW1hbmQuTkFWSUdBVElPTl9FTlRFUjoKICAgICAgICAgICAgICAgICAgICBzZWxmLmdldF9tZW51X2VudHJ5KCkuYWN0aXZhdGUoKQogICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudF9tZW51X3N0YXRlID0gc2VsZi5NRU5VX1NUQVRFX0FDVElWRQoKICAgICAgICBlbGlmIHNlbGYuY3VycmVudF9tZW51X3N0YXRlID09IHNlbGYuTUVOVV9TVEFURV9BQ1RJVkU6CiAgICAgICAgICAgIGlmIF9zeXN0ZW1fY29tbWFuZC50eXBlID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLkNPTU1BTkRfVFlQRV9OQVZJR0FUSU9OIGFuZCBfc3lzdGVtX2NvbW1hbmQuYWN0aW9uID09IHN5c3RlbV9jb21tYW5kLnN5c3RlbV9jb21tYW5kLk5BVklHQVRJT05fRVhJVDoKICAgICAgICAgICAgICAgICMgTEVBVkUgTUVOVQogICAgICAgICAgICAgICAgc2VsZi5leGl0X2N1cnJlbnRfbWVudSgpCiAgICAgICAgICAgICMgQUxMIE9USEVSIElOUFVUIFdJTEwgQkUgUEFTU0VEIFRPIFRIRSBNRU5VIEVOVFJZIElUU0VMRgogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5nZXRfbWVudV9lbnRyeSgpLnVwZGF0ZShfc3lzdGVtX2NvbW1hbmQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5leGl0X2N1cnJlbnRfbWVudSgpICAgIAoKCiAgICBkZWYgcHJvY2Vzc19zeXN0ZW1fY29tbWFuZHMoc2VsZiwgX3N5c3RlbV9jb21tYW5kOiBzeXN0ZW1fY29tbWFuZCk6CiAgICAgICAgaWYgc2VsZi5jdXJyZW50X21lbnVfc3RhdGUgPT0gc2VsZi5NRU5VX1NUQVRFX0FDVElWRToKICAgICAgICAgICAgc2VsZi5nZXRfbWVudV9lbnRyeSgpLnVwZGF0ZShfc3lzdGVtX2NvbW1hbmQpCg==", "Scales.py": "ZnJvbSBzaW5nbGV0b24gaW1wb3J0IHNpbmdsZXRvbg0KaW1wb3J0IHRpbWUNCmltcG9ydCBtYXRoDQoNCmltcG9ydCBoeDcxMQ0KaW1wb3J0IGNvbmZpZw0KaW1wb3J0IHNldHRpbmdzDQoNCg0KY2xhc3MgU2NhbGVzKGh4NzExLkhYNzExKToNCg0KICAgIFNDQUxFX0ZBQ1RPUjogZmxvYXQgPSAxLjANCiAgICBvZmZzZXQ6IGZsb2F0ID0gMC4wDQoNCiAgICBkZWYgX19pbml0X18oc2VsZiwgZF9vdXQgPSA1LCBwZF9zY2sgPSAxMik6DQogICAgICAgIHN1cGVyKFNjYWxlcywgc2VsZikuX19pbml0X18oZF9vdXQsIHBkX3NjaykNCiAgICAgICAgc2VsZi5vZmZzZXQgPSAwLjANCg0KICAgIGRlZiByZXNldChzZWxmKToNCiAgICAgICAgc2VsZi5wb3dlcl9vZmYoKQ0KICAgICAgICBzZWxmLnBvd2VyX29uKCkNCg0KICAgIGRlZiBzZXRfdGFyZV92YWx1ZShzZWxmLCBfb2Zmc2V0OiBmbG9hdCA9IDAuMCk6DQogICAgICAgIHNlbGYub2Zmc2V0ID0gX29mZnNldA0KDQogICAgZGVmIHRhcmUoc2VsZik6DQogICAgICAgIHNlbGYub2Zmc2V0ID0gKHNlbGYucmVhZCgpICogMS4wKQ0KDQogICAgZGVmIHJhd192YWx1ZShzZWxmKSAtPiBmbG9hdDoNCiAgICAgICAgcmV0dXJuIChzZWxmLnJlYWQoKSAqIDEuMCkgLSBzZWxmLm9mZnNldA0KDQogICAgZGVmIHN0YWJsZV9yYXdfdmFsdWUoc2VsZiwgd2l0aG91dF9vZmZzZXQ6IGJvb2wgPSBGYWxzZSwgcmVhZHM9MTAsIGRlbGF5X3VzPTEwKSAtPiBmbG9hdDogICAgIA0KICAgICAgICBzdGFibGVfdmFsdWVzOiBsaXN0W2Zsb2F0XSA9IFtdDQogICAgICAgIGZvciBpIGluIHJhbmdlKHJlYWRzKToNCiAgICAgICAgICAgIGlmIHdpdGhvdXRfb2Zmc2V0Og0KICAgICAgICAgICAgICAgIHN0YWJsZV92YWx1ZXMuYXBwZW5kKChzZWxmLnJlYWQoKSAqIDEuMCkpDQogICAgICAgICAgICBlbHNlOiAgICANCiAgICAgICAgICAgICAgICBzdGFibGVfdmFsdWVzLmFwcGVuZChzZWxmLnJhd192YWx1ZSgpKQ0KICAgICAgICAgICAgdGltZS5zbGVlcF9tcyhkZWxheV91cy8xMDAuMCkNCiAgICAgICAgDQogICAgICAgIHRhcmVfdmFsdWUgPSAwLjANCiAgICAgICAgZm9yIHYgaW4gc3RhYmxlX3ZhbHVlczoNCiAgICAgICAgICAgIHRhcmVfdmFsdWUgPSB0YXJlX3ZhbHVlICsgdg0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHRhcmVfdmFsdWUgLyAocmVhZHMgKiAxLjApDQogICAgDQogDQogICAgZGVmIHNldF9zY2FsZShzZWxmLCBfc2NhbGVfZmFjdG9yOiBmbG9hdCk6DQogICAgICAgIGlmIF9zY2FsZV9mYWN0b3IgaXMgTm9uZSBvciBfc2NhbGVfZmFjdG9yID09IDAuMDoNCiAgICAgICAgICAgIF9zY2FsZV9mYWN0b3IgPSAxLjANCiAgICAgICAgICAgIHByaW50KCJzZXQgX3NjYWxlX2ZhY3RvciB0byAxLjAgZHVlIHBhcmFtZXRlciBfc2NhbGVfZmFjdG9yIGlzIE5vbmUgb3IgWmVybyIpDQogICAgICAgIHNlbGYuU0NBTEVfRkFDVE9SID0gX3NjYWxlX2ZhY3Rvcg0KICAgICAgICANCiAgICBkZWYgZ2V0X3VuaXQoc2VsZiwgX3N0YWJsZTogYm9vbCA9IEZhbHNlKSAtPiBmbG9hdDoNCiAgICAgICAgaWYgc2VsZi5TQ0FMRV9GQUNUT1IgPT0gMC4wOg0KICAgICAgICAgICAgc2VsZi5TQ0FMRV9GQUNUT1IgPSAxLjANCiAgICAgICAgICAgIA0KICAgICAgICBpZiBfc3RhYmxlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYucmF3X3ZhbHVlKCkgLyBzZWxmLlNDQUxFX0ZBQ1RPUg0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHNlbGYuc3RhYmxlX3Jhd192YWx1ZSgpIC8gc2VsZi5TQ0FMRV9GQUNUT1INCiAgICAgICAgDQoNCkBzaW5nbGV0b24gICAgICAgIA0KY2xhc3MgU2NhbGVJbnRlcmZhY2U6DQoNCiAgICBzY2FsZTogU2NhbGVzID0gTm9uZQ0KICAgIGNhbGlicmF0aW9uX2ZhY3RvcjogZmxvYXQgPSAxLjANCiAgICBjdXJyZW50X3RhcmVfdmFsdWU6IGZsb2F0ID0gMA0KICAgIGRlZiBfX2luaXRfXyhzZWxmKToNCiAgICAgICAgc2VsZi5zY2FsZSA9IFNjYWxlcyhkX291dD1jb25maWcuQ0ZHX0hYNzExX0RPVVRfUElOLCBwZF9zY2s9Y29uZmlnLkNGR19IWDcxMV9TQ0tfUElOKQ0KDQogICAgICAgIHNlbGYuY3VycmVudF90YXJlX3ZhbHVlID0gMC4wDQogICAgICAgIHNlbGYucmVsb2FkX2NhbGlicmF0aW9uKCkNCiAgICAgICAgc2VsZi5zY2FsZS50YXJlKCkgIyBIQVJEV0FSRSBUQVJFDQogICAgICAgIHNlbGYudGFyZSgpDQogICAgDQogICAgZGVmIHRhcmUoc2VsZik6DQogICAgICAgIHNlbGYuY3VycmVudF90YXJlX3ZhbHVlID0gc2VsZi5nZXRfdW50YXJlZF93ZWlnaHQoKQ0KDQogICAgZGVmIHJlc2V0X2NhbGlicmF0aW9uKHNlbGYpOg0KICAgICAgICBzZWxmLnNjYWxlLnNldF9zY2FsZSgxLjApDQogICAgICAgIHNlbGYuc2NhbGUuc2V0X3RhcmVfdmFsdWUoMC4wKQ0KDQogICAgZGVmIHJlbG9hZF9jYWxpYnJhdGlvbihzZWxmKToNCiAgICAgICAgc2VsZi5jYWxpYnJhdGlvbl9mYWN0b3IgPSBzZXR0aW5ncy5zZXR0aW5ncygpLmdldF9zY2FsZV9jYWxpYnJhdGlvbl9mYWN0b3IoKQ0KICAgICAgICBwcmludCgiY2FsaWJyYXRpb25fZmFjdG9yIHt9Ii5mb3JtYXQoc2VsZi5jYWxpYnJhdGlvbl9mYWN0b3IpKQ0KICAgICAgICBzZWxmLnNjYWxlLnNldF9zY2FsZShzZWxmLmNhbGlicmF0aW9uX2ZhY3RvcikNCg0KICAgIGRlZiBnZXRfdW50YXJlZF93ZWlnaHQoc2VsZikgLT4gZmxvYXQ6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLnNjYWxlLmdldF91bml0KFRydWUpICogY29uZmlnLkNGR19TQ0FMRV9JTlZFUlRfV0VJR0hUX01FQVNVUkVEX1ZBTFVFDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIHJldHVybiAwLjANCg0KICAgIGRlZiBnZXRfY3VycmVudF93ZWlnaHQoc2VsZik6DQogICAgICAgIHJldHVybiBzZWxmLmdldF91bnRhcmVkX3dlaWdodCgpIC0gc2VsZi5jdXJyZW50X3RhcmVfdmFsdWUNCg0KDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgIFNjYWxlSW50ZXJmYWNlKCkudGFyZSgpDQogICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgDQogICAgICAgIHByaW50KFNjYWxlSW50ZXJmYWNlKCkuZ2V0X2N1cnJlbnRfd2VpZ2h0KCkp"}

# FOR DEBUGGING
ALWAYS_HARD_RESTORE: bool = False

RESTORE_IGNORED_FILES_LIST = ['static_modules', 'thridparty_libs', 'boot.py', 'lib']

def restore_filesystem(_basepath: str = "/", _override: bool = False, _erase: bool = False):
    import ubinascii
    import os

    if _erase:
        print("erase enabled")
        for f in os.listdir():
            if f in __file__:
                print("skipping {} to vaoid installer override".format(f))
                continue 
            
            # UGLY REWORK
            for n in RESTORE_IGNORED_FILES_LIST:
                if n in f:
                    print("skipping {} to vaoid installer override".format(f))
                    continue

            os.remove(f)

    for k in FILE_DATA:

        if k in os.listdir() and not _override:
            continue
        
        print(k)
        d = FILE_DATA[k]
        ubinascii.a2b_base64(d)

        with open(_basepath + "/" + k, "w") as file:
            file.write(ubinascii.a2b_base64(d))

    # CLEANUP
    del ubinascii
    del os


def restore(_hard_restore: bool = False):
    import machine
    import time
    RESTORE_BUTTON_PIN: int = 15
    RESTORE_LED_PIN: int = 25

    push_button_restore = machine.Pin(RESTORE_BUTTON_PIN, machine.Pin.IN, machine.Pin.PULL_UP)
    led_onboard = machine.Pin(RESTORE_LED_PIN, machine.Pin.OUT)

    if not push_button_restore.value() or ALWAYS_HARD_RESTORE or _hard_restore:
        led_onboard.on()
        time.sleep(0.2)
        led_onboard.off()
        time.sleep(0.2)
        led_onboard.on()
        time.sleep(0.2)
        led_onboard.on()
        # RESTORE HARD OVERRIDE USER CHANGES
        restore_filesystem(_override=True, _erase=True)
        led_onboard.off()

    else:
        led_onboard.on()
        # RESTORE SOFT ONLY ADD MISSING FILES IN VIRTUAL FS
        restore_filesystem()
        led_onboard.off()

    # RESTORE PIN STATE
    machine.Pin(RESTORE_BUTTON_PIN, machine.Pin.IN, machine.Pin.OPEN_DRAIN)
    machine.Pin(RESTORE_LED_PIN, machine.Pin.IN)
    
    del machine


if __name__ == "__main__":
    restore()

