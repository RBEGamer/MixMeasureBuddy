FILE_DATA = {"recipe_loader.py": "", "ssd1306.py": "IyBNaWNyb1B5dGhvbiBTU0QxMzA2IE9MRUQgZHJpdmVyLCBJMkMgYW5kIFNQSSBpbnRlcmZhY2VzCgpmcm9tIG1pY3JvcHl0aG9uIGltcG9ydCBjb25zdAppbXBvcnQgZnJhbWVidWYKCgojIHJlZ2lzdGVyIGRlZmluaXRpb25zClNFVF9DT05UUkFTVCA9IGNvbnN0KDB4ODEpClNFVF9FTlRJUkVfT04gPSBjb25zdCgweEE0KQpTRVRfTk9STV9JTlYgPSBjb25zdCgweEE2KQpTRVRfRElTUCA9IGNvbnN0KDB4QUUpClNFVF9NRU1fQUREUiA9IGNvbnN0KDB4MjApClNFVF9DT0xfQUREUiA9IGNvbnN0KDB4MjEpClNFVF9QQUdFX0FERFIgPSBjb25zdCgweDIyKQpTRVRfRElTUF9TVEFSVF9MSU5FID0gY29uc3QoMHg0MCkKU0VUX1NFR19SRU1BUCA9IGNvbnN0KDB4QTApClNFVF9NVVhfUkFUSU8gPSBjb25zdCgweEE4KQpTRVRfSVJFRl9TRUxFQ1QgPSBjb25zdCgweEFEKQpTRVRfQ09NX09VVF9ESVIgPSBjb25zdCgweEMwKQpTRVRfRElTUF9PRkZTRVQgPSBjb25zdCgweEQzKQpTRVRfQ09NX1BJTl9DRkcgPSBjb25zdCgweERBKQpTRVRfRElTUF9DTEtfRElWID0gY29uc3QoMHhENSkKU0VUX1BSRUNIQVJHRSA9IGNvbnN0KDB4RDkpClNFVF9WQ09NX0RFU0VMID0gY29uc3QoMHhEQikKU0VUX0NIQVJHRV9QVU1QID0gY29uc3QoMHg4RCkKCiMgU3ViY2xhc3NpbmcgRnJhbWVCdWZmZXIgcHJvdmlkZXMgc3VwcG9ydCBmb3IgZ3JhcGhpY3MgcHJpbWl0aXZlcwojIGh0dHA6Ly9kb2NzLm1pY3JvcHl0aG9uLm9yZy9lbi9sYXRlc3QvcHlib2FyZC9saWJyYXJ5L2ZyYW1lYnVmLmh0bWwKY2xhc3MgU1NEMTMwNihmcmFtZWJ1Zi5GcmFtZUJ1ZmZlcik6CiAgICBkZWYgX19pbml0X18oc2VsZiwgd2lkdGgsIGhlaWdodCwgZXh0ZXJuYWxfdmNjKToKICAgICAgICBzZWxmLndpZHRoID0gd2lkdGgKICAgICAgICBzZWxmLmhlaWdodCA9IGhlaWdodAogICAgICAgIHNlbGYuZXh0ZXJuYWxfdmNjID0gZXh0ZXJuYWxfdmNjCiAgICAgICAgc2VsZi5wYWdlcyA9IHNlbGYuaGVpZ2h0IC8vIDgKICAgICAgICBzZWxmLmJ1ZmZlciA9IGJ5dGVhcnJheShzZWxmLnBhZ2VzICogc2VsZi53aWR0aCkKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHNlbGYuYnVmZmVyLCBzZWxmLndpZHRoLCBzZWxmLmhlaWdodCwgZnJhbWVidWYuTU9OT19WTFNCKQogICAgICAgIHNlbGYuaW5pdF9kaXNwbGF5KCkKCiAgICBkZWYgaW5pdF9kaXNwbGF5KHNlbGYpOgogICAgICAgIGZvciBjbWQgaW4gKAogICAgICAgICAgICBTRVRfRElTUCwgICMgZGlzcGxheSBvZmYKICAgICAgICAgICAgIyBhZGRyZXNzIHNldHRpbmcKICAgICAgICAgICAgU0VUX01FTV9BRERSLAogICAgICAgICAgICAweDAwLCAgIyBob3Jpem9udGFsCiAgICAgICAgICAgICMgcmVzb2x1dGlvbiBhbmQgbGF5b3V0CiAgICAgICAgICAgIFNFVF9ESVNQX1NUQVJUX0xJTkUsICAjIHN0YXJ0IGF0IGxpbmUgMAogICAgICAgICAgICBTRVRfU0VHX1JFTUFQIHwgMHgwMSwgICMgY29sdW1uIGFkZHIgMTI3IG1hcHBlZCB0byBTRUcwCiAgICAgICAgICAgIFNFVF9NVVhfUkFUSU8sCiAgICAgICAgICAgIHNlbGYuaGVpZ2h0IC0gMSwKICAgICAgICAgICAgU0VUX0NPTV9PVVRfRElSIHwgMHgwOCwgICMgc2NhbiBmcm9tIENPTVtOXSB0byBDT00wCiAgICAgICAgICAgIFNFVF9ESVNQX09GRlNFVCwKICAgICAgICAgICAgMHgwMCwKICAgICAgICAgICAgU0VUX0NPTV9QSU5fQ0ZHLAogICAgICAgICAgICAweDAyIGlmIHNlbGYud2lkdGggPiAyICogc2VsZi5oZWlnaHQgZWxzZSAweDEyLAogICAgICAgICAgICAjIHRpbWluZyBhbmQgZHJpdmluZyBzY2hlbWUKICAgICAgICAgICAgU0VUX0RJU1BfQ0xLX0RJViwKICAgICAgICAgICAgMHg4MCwKICAgICAgICAgICAgU0VUX1BSRUNIQVJHRSwKICAgICAgICAgICAgMHgyMiBpZiBzZWxmLmV4dGVybmFsX3ZjYyBlbHNlIDB4RjEsCiAgICAgICAgICAgIFNFVF9WQ09NX0RFU0VMLAogICAgICAgICAgICAweDMwLCAgIyAwLjgzKlZjYwogICAgICAgICAgICAjIGRpc3BsYXkKICAgICAgICAgICAgU0VUX0NPTlRSQVNULAogICAgICAgICAgICAweEZGLCAgIyBtYXhpbXVtCiAgICAgICAgICAgIFNFVF9FTlRJUkVfT04sICAjIG91dHB1dCBmb2xsb3dzIFJBTSBjb250ZW50cwogICAgICAgICAgICBTRVRfTk9STV9JTlYsICAjIG5vdCBpbnZlcnRlZAogICAgICAgICAgICBTRVRfSVJFRl9TRUxFQ1QsCiAgICAgICAgICAgIDB4MzAsICAjIGVuYWJsZSBpbnRlcm5hbCBJUkVGIGR1cmluZyBkaXNwbGF5IG9uCiAgICAgICAgICAgICMgY2hhcmdlIHB1bXAKICAgICAgICAgICAgU0VUX0NIQVJHRV9QVU1QLAogICAgICAgICAgICAweDEwIGlmIHNlbGYuZXh0ZXJuYWxfdmNjIGVsc2UgMHgxNCwKICAgICAgICAgICAgU0VUX0RJU1AgfCAweDAxLCAgIyBkaXNwbGF5IG9uCiAgICAgICAgKTogICMgb24KICAgICAgICAgICAgc2VsZi53cml0ZV9jbWQoY21kKQogICAgICAgIHNlbGYuZmlsbCgwKQogICAgICAgIHNlbGYuc2hvdygpCgogICAgZGVmIGVyYXNlKHNlbGYpOgogICAgICAgIHNlbGYuZmlsbCgwKQogICAgICAgIHNlbGYuc2hvdygpCiAgICAgICAgCiAgICBkZWYgcG93ZXJvZmYoc2VsZik6CiAgICAgICAgc2VsZi53cml0ZV9jbWQoU0VUX0RJU1ApCgogICAgZGVmIHBvd2Vyb24oc2VsZik6CiAgICAgICAgc2VsZi53cml0ZV9jbWQoU0VUX0RJU1AgfCAweDAxKQoKICAgIGRlZiBjb250cmFzdChzZWxmLCBjb250cmFzdCk6CiAgICAgICAgc2VsZi53cml0ZV9jbWQoU0VUX0NPTlRSQVNUKQogICAgICAgIHNlbGYud3JpdGVfY21kKGNvbnRyYXN0KQoKICAgIGRlZiBpbnZlcnQoc2VsZiwgaW52ZXJ0KToKICAgICAgICBzZWxmLndyaXRlX2NtZChTRVRfTk9STV9JTlYgfCAoaW52ZXJ0ICYgMSkpCgogICAgZGVmIHJvdGF0ZShzZWxmLCByb3RhdGUpOgogICAgICAgIHNlbGYud3JpdGVfY21kKFNFVF9DT01fT1VUX0RJUiB8ICgocm90YXRlICYgMSkgPDwgMykpCiAgICAgICAgc2VsZi53cml0ZV9jbWQoU0VUX1NFR19SRU1BUCB8IChyb3RhdGUgJiAxKSkKCiAgICBkZWYgc2hvdyhzZWxmKToKICAgICAgICB4MCA9IDAKICAgICAgICB4MSA9IHNlbGYud2lkdGggLSAxCiAgICAgICAgaWYgc2VsZi53aWR0aCAhPSAxMjg6CiAgICAgICAgICAgICMgbmFycm93IGRpc3BsYXlzIHVzZSBjZW50cmVkIGNvbHVtbnMKICAgICAgICAgICAgY29sX29mZnNldCA9ICgxMjggLSBzZWxmLndpZHRoKSAvLyAyCiAgICAgICAgICAgIHgwICs9IGNvbF9vZmZzZXQKICAgICAgICAgICAgeDEgKz0gY29sX29mZnNldAogICAgICAgIHNlbGYud3JpdGVfY21kKFNFVF9DT0xfQUREUikKICAgICAgICBzZWxmLndyaXRlX2NtZCh4MCkKICAgICAgICBzZWxmLndyaXRlX2NtZCh4MSkKICAgICAgICBzZWxmLndyaXRlX2NtZChTRVRfUEFHRV9BRERSKQogICAgICAgIHNlbGYud3JpdGVfY21kKDApCiAgICAgICAgc2VsZi53cml0ZV9jbWQoc2VsZi5wYWdlcyAtIDEpCiAgICAgICAgc2VsZi53cml0ZV9kYXRhKHNlbGYuYnVmZmVyKQoKCmNsYXNzIFNTRDEzMDZfSTJDKFNTRDEzMDYpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHdpZHRoLCBoZWlnaHQsIGkyYywgYWRkcj0weDNDLCBleHRlcm5hbF92Y2M9RmFsc2UpOgogICAgICAgIHNlbGYuaTJjID0gaTJjCiAgICAgICAgc2VsZi5hZGRyID0gYWRkcgogICAgICAgIHNlbGYudGVtcCA9IGJ5dGVhcnJheSgyKQogICAgICAgIHNlbGYud3JpdGVfbGlzdCA9IFtiIlx4NDAiLCBOb25lXSAgIyBDbz0wLCBEL0MjPTEKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHdpZHRoLCBoZWlnaHQsIGV4dGVybmFsX3ZjYykKCiAgICBkZWYgd3JpdGVfY21kKHNlbGYsIGNtZCk6CiAgICAgICAgc2VsZi50ZW1wWzBdID0gMHg4MCAgIyBDbz0xLCBEL0MjPTAKICAgICAgICBzZWxmLnRlbXBbMV0gPSBjbWQKICAgICAgICBzZWxmLmkyYy53cml0ZXRvKHNlbGYuYWRkciwgc2VsZi50ZW1wKQoKICAgIGRlZiB3cml0ZV9kYXRhKHNlbGYsIGJ1Zik6CiAgICAgICAgc2VsZi53cml0ZV9saXN0WzFdID0gYnVmCiAgICAgICAgc2VsZi5pMmMud3JpdGV2dG8oc2VsZi5hZGRyLCBzZWxmLndyaXRlX2xpc3QpCgoKY2xhc3MgU1NEMTMwNl9TUEkoU1NEMTMwNik6CiAgICBkZWYgX19pbml0X18oc2VsZiwgd2lkdGgsIGhlaWdodCwgc3BpLCBkYywgcmVzLCBjcywgZXh0ZXJuYWxfdmNjPUZhbHNlKToKICAgICAgICBzZWxmLnJhdGUgPSAxMCAqIDEwMjQgKiAxMDI0CiAgICAgICAgZGMuaW5pdChkYy5PVVQsIHZhbHVlPTApCiAgICAgICAgcmVzLmluaXQocmVzLk9VVCwgdmFsdWU9MCkKICAgICAgICBjcy5pbml0KGNzLk9VVCwgdmFsdWU9MSkKICAgICAgICBzZWxmLnNwaSA9IHNwaQogICAgICAgIHNlbGYuZGMgPSBkYwogICAgICAgIHNlbGYucmVzID0gcmVzCiAgICAgICAgc2VsZi5jcyA9IGNzCiAgICAgICAgaW1wb3J0IHRpbWUKCiAgICAgICAgc2VsZi5yZXMoMSkKICAgICAgICB0aW1lLnNsZWVwX21zKDEpCiAgICAgICAgc2VsZi5yZXMoMCkKICAgICAgICB0aW1lLnNsZWVwX21zKDEwKQogICAgICAgIHNlbGYucmVzKDEpCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyh3aWR0aCwgaGVpZ2h0LCBleHRlcm5hbF92Y2MpCgogICAgZGVmIHdyaXRlX2NtZChzZWxmLCBjbWQpOgogICAgICAgIHNlbGYuc3BpLmluaXQoYmF1ZHJhdGU9c2VsZi5yYXRlLCBwb2xhcml0eT0wLCBwaGFzZT0wKQogICAgICAgIHNlbGYuY3MoMSkKICAgICAgICBzZWxmLmRjKDApCiAgICAgICAgc2VsZi5jcygwKQogICAgICAgIHNlbGYuc3BpLndyaXRlKGJ5dGVhcnJheShbY21kXSkpCiAgICAgICAgc2VsZi5jcygxKQoKICAgIGRlZiB3cml0ZV9kYXRhKHNlbGYsIGJ1Zik6CiAgICAgICAgc2VsZi5zcGkuaW5pdChiYXVkcmF0ZT1zZWxmLnJhdGUsIHBvbGFyaXR5PTAsIHBoYXNlPTApCiAgICAgICAgc2VsZi5jcygxKQogICAgICAgIHNlbGYuZGMoMSkKICAgICAgICBzZWxmLmNzKDApCiAgICAgICAgc2VsZi5zcGkud3JpdGUoYnVmKQogICAgICAgIHNlbGYuY3MoMSk=", "mmb_display.py": "aW1wb3J0IGNvbmZpZwppbXBvcnQgbWFjaGluZQoKCmNsYXNzIG1tYl9kaXNwbGF5KCk6CgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGRpc3BsYXlfaW5zdGFuY2VfY3JlYXRvcigpOgogICAgICAgIAogICAgICAgIGlmIGNvbmZpZy5DRkdfRElTUExBWV9UWVBFID09ICJpbGk5MzQiOgogICAgICAgICAgICBpbXBvcnQgaWxpOTM0eG5ldywgdHQyNAogICAgICAgICAgICBTQ1JfUk9UID0gNwogICAgICAgICAgICBfc3BpID0gbWFjaGluZS5TUEkoY29uZmlnLkNGR19JTEk5MzQxX1NQSUlOU1RBTkNFLCBiYXVkcmF0ZT0xNTYyNTAwMCwgc2NrPW1hY2hpbmUuUGluKGNvbmZpZy5DRkdfSUxJOTM0MV9TQ0tfUElOKSwgbW9zaT1tYWNoaW5lLlBpbihjb25maWcuQ0ZHX0lMSTkzNDFfTU9TSV9QSU4pLCBtaXNvPW1hY2hpbmUuUGluKGNvbmZpZy5DRkdfSUxJOTM0MV9NSVNPX1BJTikpCiAgICAgICAgICAgIGRpc3AgPSBpbGk5MzR4bmV3LklMSTkzNDEoX3NwaSwgY3M9bWFjaGluZS5QaW4oY29uZmlnLkNGR19JTEk5MzQxX0NTX1BJTiksIGRjPW1hY2hpbmUuUGluKGNvbmZpZy5DRkdfSUxJOTM0MV9EQ19QSU4pLCByc3Q9bWFjaGluZS5QaW4oY29uZmlnLkNGR19JTEk5MzQxX1JTVF9QSU4pLCB3PWNvbmZpZy5TQ1JfV0lEVEgsIGg9Y29uZmlnLlNDUl9IRUlHSFQsIHI9U0NSX1JPVCkKICAgICAgICAgICAgZGlzcC5zZXRfY29sb3IoaWxpOTM0eG5ldy5JTEk5MzQxLmNvbG9yNTY1KDI1NSwgMjU1LCAyNTUpLCBpbGk5MzR4bmV3LklMSTkzNDEuY29sb3I1NjUoMCwgMCwgMCkpCiAgICAgICAgICAgIGRpc3AuZGlzcGxheS5zZXRfZm9udCh0dDI0KQogICAgICAgICAgICByZXR1cm4gZGlzcAoKICAgICAgICBlbGlmIGNvbmZpZy5DRkdfRElTUExBWV9UWVBFID09ICJzdDc3ODkiOgogICAgICAgICAgICBpbXBvcnQgc3Q3Nzg5CiAgICAgICAgICAgIFNDUl9ST1QgPSA3CiAgICAgICAgICAgIF9zcGkgPSBtYWNoaW5lLlNQSShjb25maWcuQ0ZHX1NUNzc4OV9TUElJTlNUQU5DRSwgYmF1ZHJhdGU9NjAwMDAwMDAsIHNjaz1tYWNoaW5lLlBpbihjb25maWcuQ0ZHX1NUNzc4OV9TQ0tfUElOKSwgbW9zaT1tYWNoaW5lLlBpbihjb25maWcuQ0ZHX1NUNzc4OV9NT1NJX1BJTiksIG1pc289bWFjaGluZS5QaW4oY29uZmlnLkNGR19TVDc3ODlfTUlTT19QSU4pKQogICAgICAgICAgICBkaXNwID0gc3Q3Nzg5LlNUNzc4OShfc3BpLCBjb25maWcuU0NSX1dJRFRILCBjb25maWcuU0NSX0hFSUdIVCwgcmVzZXQ9bWFjaGluZS5QaW4oY29uZmlnLkNGR19TVDc3ODlfUlNUX1BJTiksIGRjPW1hY2hpbmUuUGluKGNvbmZpZy5DRkdfU1Q3Nzg5X0RDX1BJTiksIHJvdGF0aW9uPVNDUl9ST1QsIGNzPW1hY2hpbmUuUGluKGNvbmZpZy5DRkdfU1Q3Nzg5X0NTX1BJTikpCiAgICAgICAgICAgIHJldHVybiBkaXNwCiAgICAgICAgICAgIG1hY2hpbmUuUGluKGNvbmZpZy5DRkdfU1Q3Nzg5X1JTVF9QSU4pCiAgICAgICAgICAgIG1hY2hpbmUuUGluKGNvbmZpZy5DRkdfU1Q3Nzg5X0RDX1BJTikKCiAgICAgICAgZWxpZiBjb25maWcuQ0ZHX0RJU1BMQVlfVFlQRSA9PSAic2gxMTA2IjoKICAgICAgICAgICAgaW1wb3J0IHNoMTEwNgogICAgICAgICAgICBpMmMgPSBtYWNoaW5lLkkyQyhjb25maWcuQ0ZHX09MRURfSTJDSU5TVEFOQ0UsIHNjbD1tYWNoaW5lLlBpbihjb25maWcuQ0ZHX09MRURfU0NMX1BJTiksIHNkYT1tYWNoaW5lLlBpbihjb25maWcuQ0ZHX09MRURfU0RBX1BJTiksIGZyZXE9NDAwMDAwKQogICAgICAgICAgICBkaXNwID0gc2gxMTA2LlNIMTEwNl9JMkMoY29uZmlnLlNDUl9XSURUSCwgY29uZmlnLlNDUl9IRUlHSFQsIGkyYywgTm9uZSwgY29uZmlnLkNGR19PTEVEX0FERFIpCiAgICAgICAgICAgIGRpc3Auc2xlZXAoRmFsc2UpCiAgICAgICAgICAgIHJldHVybiBkaXNwCgogICAgICAgIGVsaWYgY29uZmlnLkNGR19ESVNQTEFZX1RZUEUgPT0gInNzZDEzMDYiOgogICAgICAgICAgICBpbXBvcnQgc3NkMTMwNgogICAgICAgICAgICBpMmMgPSBtYWNoaW5lLkkyQyhjb25maWcuQ0ZHX09MRURfSTJDSU5TVEFOQ0UsIHNjbD1tYWNoaW5lLlBpbihjb25maWcuQ0ZHX09MRURfU0NMX1BJTiksIHNkYT1tYWNoaW5lLlBpbihjb25maWcuQ0ZHX09MRURfU0RBX1BJTiksIGZyZXE9NDAwMDAwKQogICAgICAgICAgICBkaXNwID0gc3NkMTMwNi5TU0QxMzA2X0kyQyhjb25maWcuU0NSX1dJRFRILCBjb25maWcuU0NSX0hFSUdIVCwgaTJjLCBjb25maWcuQ0ZHX09MRURfQUREUikKICAgICAgICAgICAgcmV0dXJuIGRpc3AKCiAgICAKCiAgICAKICAgIGRlZiBfX2luaXRfXyhzZWxmKSAtPiBOb25lOgogICAgICAgIHBhc3MKCiAgICBkZWYgcGl4ZWwoc2VsZiwgeCwgeSwgdmFsdWUpOgogICAgICAgIHBhc3MKIAogICAgZGVmIHNob3coKToKICAgICAgICBwYXNzCiAgICAgIAogICAgZGVmIGZpbGxfcmVjdChzZWxmLCB4LCB5LCB3LCBoLCB2KToKICAgICAgICBwYXNzCiAgICAKICAgIGRlZiBwcmludChzZWxmLCBfc3RyKToKICAgICAgICBwYXNzCgogICAgZGVmIHdyaXRlKHNlbGYsIF9zdHIpOgogICAgICAgIHBhc3MKICAgIAogICAgZGVmIGVyYXNlKHNlbGYpOgogICAgICAgIHBhc3MKCiAgICBkZWYgdGV4dChzZWxmLCB0ZXh0LCB4LCB5LCBjb2xvcj0xKToKICAgICAgICBwYXNz", "config.py": "IyBET05UIENIQU5HRQpTQ1JfV0lEVEggPSAwClNDUl9IRUlHSFQgPSAwCgoKCiMgSEFSRFdBUkUgQ09ORklHIFNUQVJUUyBIRVJFCgoKIyBzc2QxMzA2ID0gMTI4eDY0IG9sZGVkIHdpdGggc3NkMTMwNiBjb250cm9sbGVyCiMgc2gxMTA2ID0gMTI4eDY0IG9sZGVkIHdpdGggc3NoMTEwNiBjb250cm9sbGVyCiMgaWxpOTM0ID0gVEZUIDMsMiBJTkNIIDI0MHgzMjAgd2l0aCBJTEk5MzQgY29udHJvbGxlcgojIHN0Nzc4OSA9IFRGVCAxLjMgSU5DSCAyNDB4MjQwIHdpdGggc3Q3Nzg5IGNvbnRyb2xsZXIKQ0ZHX0RJU1BMQVlfVFlQRSA9ICJzaDExMDYiICMgc2gxMTA2IHNoMTEwNiBzc2QxMzA2IGlsaTkzNApDRkdfQ0FMSUJSQVRJT05fV0VJR0hUX1dFSUdIVCA9IDUwCkNGR19TQ0FMRV9HTEFTU19BRERJVElPTl9ORVhUX1NURVBfV0VJR0hUID0gNTAgIyBYZyBtb3JlIG9uIHNjYWxlIHRvIHRyaWdnZXIgbmV4dCBzdGVwIGluIHJlY2lwZSA9PiAxLzMgd2VpZ2h0IG9mIGEgdHlwaWNhbCBnbGFzcwpDRkdfVVNFUl9MT05HX0JVVFRPTl9QUkVTU19USU1FID0gMTAwMCAjIHRpbWUgdG8gcmVnc2l0ZXIgYSBsb25nIGJ1dHRvbiBwcmVzcyBpbiBtcwpDRkdfTkVUV09SS19IT1NUTkFNRSA9ICJtaXhhbmRtZWFzdXJlYmVycnkiICMgeFh4WC5sb2NhbApDRkdfTkVUV09SS19XSUZJQ09VTlRSWSA9ICJERSIgIyBERSBVUwpDRkdfRElTUExBWV9VU0VSX1FSX0NPREUgPSBUcnVlICMgVHJ1ZSBGYWxzZQpDRkdfTkVPUElYRUxfTEVEX0NPVU5UID0gMjYgIzYwCkNGR19ORU9QSVhFTF9MRURfU1RBUlRfT0ZGU0VUID0gKENGR19ORU9QSVhFTF9MRURfQ09VTlQvMikgIyBNQVggQ0ZHX05FT1BJWEVMX0xFRF9DT1VOVCBUTyBST1RBVEUgVEhFIFNUQVJUUE9JTlQKCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjIyMjIyBQSU4gQ09ORklHICMjIyMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBORU9QSVhFTCBSSU5HCkNGR19ORU9QSVhFTF9QSU4gPSAyOAojIEJVVFRPTlMKQ0ZHX0JVVFRPTl9VUF9QSU4gPSAxNCAgIzIyCkNGR19CVVRUT05fRE9XTl9QSU4gPSAxNSAjMgojIEhYNzExIE1PRFVMRQpDRkdfSFg3MTFfRE9VVF9QSU4gPSA1CkNGR19IWDcxMV9TQ0tfUElOID0gMTIKIyBbT1BUSU9OQUxdIFNEIENBUkQKQ0ZHX1NEQ0FSRF9TUElJTlNUQU5DRSA9IDEKQ0ZHX1NEQ0FSRF9TQ0tfUElOID0gMTAKQ0ZHX1NEQ0FSRF9NT1NJX1BJTiA9IDExCkNGR19TRENBUkRfTUlTT19QSU4gPSA4CkNGR19TRENBUkRfQ1NfUElOID0gOQojIFtPUFRJT05BTF0gSUxJOTM0MSBESVNQTEFZCkNGR19JTEk5MzQxX1NQSUlOU1RBTkNFID0gMApDRkdfSUxJOTM0MV9TQ0tfUElOID0gNgpDRkdfSUxJOTM0MV9NT1NJX1BJTiA9IDcKQ0ZHX0lMSTkzNDFfTUlTT19QSU4gPSA0CkNGR19JTEk5MzQxX0NTX1BJTiA9IDEzCkNGR19JTEk5MzQxX1JTVF9QSU4gPSAxNApDRkdfSUxJOTM0MV9EQ19QSU4gPSAxNQppZiBDRkdfRElTUExBWV9UWVBFID09ICJpbGk5MzQiOgogICAgU0NSX1dJRFRIID0gMTYwCiAgICBTQ1JfSEVJR0hUID0gMTI4CiMgW09QVElPTkFMIFNUNzc4OV0gRElTUExBWQpDRkdfU1Q3Nzg5X1NQSUlOU1RBTkNFID0gMApDRkdfU1Q3Nzg5X1NDS19QSU4gPSAxOApDRkdfU1Q3Nzg5X01PU0lfUElOID0gMTkKQ0ZHX1NUNzc4OV9NSVNPX1BJTiA9IDE2CkNGR19TVDc3ODlfQ1NfUElOID0gMTcKQ0ZHX1NUNzc4OV9SU1RfUElOID0gMTQKQ0ZHX1NUNzc4OV9EQ19QSU4gPSAxNQppZiBDRkdfRElTUExBWV9UWVBFID09ICJzdDc3ODkiOgogICAgU0NSX1dJRFRIID0gMjQwCiAgICBTQ1JfSEVJR0hUID0gMjQwCiMgW09QVElPTkFMXSBTU0QxMzA2IG9yIFNIMTEwNgpDRkdfT0xFRF9JMkNJTlNUQU5DRSA9IDAKQ0ZHX09MRURfU0NMX1BJTiA9IDE3CkNGR19PTEVEX1NEQV9QSU4gPSAxNgpDRkdfT0xFRF9BRERSID0gMHgzYwpDRkdfRElTUExBWV9MSU5FX1NQQUNJTkcgPSA5ICMgcGl4ZWwgZm9udCB3aWR0aApDRkdfRElTUExBWV9DSEFSX1dJRFRIID0gOAppZiBDRkdfRElTUExBWV9UWVBFID09ICJzc2QxMzA2IiBvciBDRkdfRElTUExBWV9UWVBFID09ICJzaDExMDYiOgogICAgU0NSX1dJRFRIID0gMTI4CiAgICBTQ1JfSEVJR0hUID0gNjQKCgogICAg", "sh1106.py": "IwojIE1pY3JvUHl0aG9uIFNIMTEwNiBPTEVEIGRyaXZlciwgSTJDIGFuZCBTUEkgaW50ZXJmYWNlcwojCiMgVGhlIE1JVCBMaWNlbnNlIChNSVQpCiMKIyBDb3B5cmlnaHQgKGMpIDIwMTYgUmFkb21pciBEb3BpZXJhbHNraSAoQGRlc2hpcHUpLAojICAgICAgICAgICAgICAgMjAxNy0yMDIxIFJvYmVydCBIYW1tZWxyYXRoIChAcm9iZXJ0LWhoKQojICAgICAgICAgICAgICAgMjAyMSBUaW0gV2ViZXIgKEBzY3kpCiMKIyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5CiMgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKIyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzCiMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbAojIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwojIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CiMKIyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgojIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgojCiMgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKIyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKIyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKIyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCiMgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKIyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOCiMgVEhFIFNPRlRXQVJFLgojCiMgU2FtcGxlIGNvZGUgc2VjdGlvbnMgZm9yIEVTUDgyNjYgcGluIGFzc2lnbm1lbnRzCiMgLS0tLS0tLS0tLS0tIFNQSSAtLS0tLS0tLS0tLS0tLS0tLS0KIyBQaW4gTWFwIFNQSQojICAgLSAzdiAtIHh4eHh4eCAgIC0gVmNjCiMgICAtIEcgIC0geHh4eHh4ICAgLSBHbmQKIyAgIC0gRDcgLSBHUElPIDEzICAtIERpbiAvIE1PU0kgZml4ZWQKIyAgIC0gRDUgLSBHUElPIDE0ICAtIENsayAvIFNjayBmaXhlZAojICAgLSBEOCAtIEdQSU8gNCAgIC0gQ1MgKG9wdGlvbmFsLCBpZiB0aGUgb25seSBjb25uZWN0ZWQgZGV2aWNlKQojICAgLSBEMiAtIEdQSU8gNSAgIC0gRC9DCiMgICAtIEQxIC0gR1BJTyAyICAgLSBSZXMKIwojIGZvciBDUywgRC9DIGFuZCBSZXMgb3RoZXIgcG9ydHMgbWF5IGJlIGNob3Nlbi4KIwojIGZyb20gbWFjaGluZSBpbXBvcnQgUGluLCBTUEkKIyBpbXBvcnQgc2gxMTA2CgojIHNwaSA9IFNQSSgxLCBiYXVkcmF0ZT0xMDAwMDAwKQojIGRpc3BsYXkgPSBzaDExMDYuU0gxMTA2X1NQSSgxMjgsIDY0LCBzcGksIFBpbig1KSwgUGluKDIpLCBQaW4oNCkpCiMgZGlzcGxheS5zbGVlcChGYWxzZSkKIyBkaXNwbGF5LmZpbGwoMCkKIyBkaXNwbGF5LnRleHQoJ1Rlc3RpbmcgMScsIDAsIDAsIDEpCiMgZGlzcGxheS5zaG93KCkKIwojIC0tLS0tLS0tLS0tLS0tLSBJMkMgLS0tLS0tLS0tLS0tLS0tLS0tCiMKIyBQaW4gTWFwIEkyQwojICAgLSAzdiAtIHh4eHh4eCAgIC0gVmNjCiMgICAtIEcgIC0geHh4eHh4ICAgLSBHbmQKIyAgIC0gRDIgLSBHUElPIDUgICAtIFNDSyAvIFNDTAojICAgLSBEMSAtIEdQSU8gNCAgIC0gRElOIC8gU0RBCiMgICAtIEQwIC0gR1BJTyAxNiAgLSBSZXMKIyAgIC0gRyAgLSB4eHh4eHggICAgIENTCiMgICAtIEcgIC0geHh4eHh4ICAgICBEL0MKIwojIFBpbidzIGZvciBJMkMgY2FuIGJlIHNldCBhbG1vc3QgYXJiaXRyYXJ5CiMKIyBmcm9tIG1hY2hpbmUgaW1wb3J0IFBpbiwgSTJDCiMgaW1wb3J0IHNoMTEwNgojCiMgaTJjID0gSTJDKHNjbD1QaW4oNSksIHNkYT1QaW4oNCksIGZyZXE9NDAwMDAwKQojIGRpc3BsYXkgPSBzaDExMDYuU0gxMTA2X0kyQygxMjgsIDY0LCBpMmMsIFBpbigxNiksIDB4M2MpCiMgZGlzcGxheS5zbGVlcChGYWxzZSkKIyBkaXNwbGF5LmZpbGwoMCkKIyBkaXNwbGF5LnRleHQoJ1Rlc3RpbmcgMScsIDAsIDAsIDEpCiMgZGlzcGxheS5zaG93KCkKCmZyb20gbWljcm9weXRob24gaW1wb3J0IGNvbnN0CmltcG9ydCB1dGltZSBhcyB0aW1lCmltcG9ydCBmcmFtZWJ1ZgoKCiMgYSBmZXcgcmVnaXN0ZXIgZGVmaW5pdGlvbnMKX1NFVF9DT05UUkFTVCAgICAgICAgPSBjb25zdCgweDgxKQpfU0VUX05PUk1fSU5WICAgICAgICA9IGNvbnN0KDB4YTYpCl9TRVRfRElTUCAgICAgICAgICAgID0gY29uc3QoMHhhZSkKX1NFVF9TQ0FOX0RJUiAgICAgICAgPSBjb25zdCgweGMwKQpfU0VUX1NFR19SRU1BUCAgICAgICA9IGNvbnN0KDB4YTApCl9MT1dfQ09MVU1OX0FERFJFU1MgID0gY29uc3QoMHgwMCkKX0hJR0hfQ09MVU1OX0FERFJFU1MgPSBjb25zdCgweDEwKQpfU0VUX1BBR0VfQUREUkVTUyAgICA9IGNvbnN0KDB4QjApCgoKY2xhc3MgU0gxMTA2KGZyYW1lYnVmLkZyYW1lQnVmZmVyKToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgd2lkdGgsIGhlaWdodCwgZXh0ZXJuYWxfdmNjLCByb3RhdGU9MCk6CiAgICAgICAgc2VsZi53aWR0aCA9IHdpZHRoCiAgICAgICAgc2VsZi5oZWlnaHQgPSBoZWlnaHQKICAgICAgICBzZWxmLmV4dGVybmFsX3ZjYyA9IGV4dGVybmFsX3ZjYwogICAgICAgIHNlbGYuZmxpcF9lbiA9IHJvdGF0ZSA9PSAxODAgb3Igcm90YXRlID09IDI3MAogICAgICAgIHNlbGYucm90YXRlOTAgPSByb3RhdGUgPT0gOTAgb3Igcm90YXRlID09IDI3MAogICAgICAgIHNlbGYucGFnZXMgPSBzZWxmLmhlaWdodCAvLyA4CiAgICAgICAgc2VsZi5idWZzaXplID0gc2VsZi5wYWdlcyAqIHNlbGYud2lkdGgKICAgICAgICBzZWxmLnJlbmRlcmJ1ZiA9IGJ5dGVhcnJheShzZWxmLmJ1ZnNpemUpCiAgICAgICAgc2VsZi5wYWdlc190b191cGRhdGUgPSAwCgogICAgICAgIGlmIHNlbGYucm90YXRlOTA6CiAgICAgICAgICAgIHNlbGYuZGlzcGxheWJ1ZiA9IGJ5dGVhcnJheShzZWxmLmJ1ZnNpemUpCiAgICAgICAgICAgICMgSE1TQiBpcyByZXF1aXJlZCB0byBrZWVwIHRoZSBiaXQgb3JkZXIgaW4gdGhlIHJlbmRlciBidWZmZXIKICAgICAgICAgICAgIyBjb21wYXRpYmxlIHdpdGggYnl0ZS1mb3ItYnl0ZSByZW1hcHBpbmcgdG8gdGhlIGRpc3BsYXkgYnVmZmVyLAogICAgICAgICAgICAjIHdoaWNoIGlzIGluIFZMU0IuIEVsc2Ugd2UnZCBoYXZlIHRvIGNvcHkgYml0LWJ5LWJpdCEKICAgICAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhzZWxmLnJlbmRlcmJ1Ziwgc2VsZi5oZWlnaHQsIHNlbGYud2lkdGgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVidWYuTU9OT19ITVNCKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuZGlzcGxheWJ1ZiA9IHNlbGYucmVuZGVyYnVmCiAgICAgICAgICAgIHN1cGVyKCkuX19pbml0X18oc2VsZi5yZW5kZXJidWYsIHNlbGYud2lkdGgsIHNlbGYuaGVpZ2h0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lYnVmLk1PTk9fVkxTQikKCiAgICAgICAgIyBmbGlwKCkgd2FzIGNhbGxlZCByb3RhdGUoKSBvbmNlLCBwcm92aWRlIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LgogICAgICAgIHNlbGYucm90YXRlID0gc2VsZi5mbGlwCiAgICAgICAgc2VsZi5pbml0X2Rpc3BsYXkoKQoKICAgIGRlZiBpbml0X2Rpc3BsYXkoc2VsZik6CiAgICAgICAgc2VsZi5yZXNldCgpCiAgICAgICAgc2VsZi5maWxsKDApCiAgICAgICAgc2VsZi5zaG93KCkKICAgICAgICBzZWxmLnBvd2Vyb24oKQogICAgICAgICMgcm90YXRlOTAgcmVxdWlyZXMgYSBjYWxsIHRvIGZsaXAoKSBmb3Igc2V0dGluZyB1cC4KICAgICAgICBzZWxmLmZsaXAoc2VsZi5mbGlwX2VuKQoKCiAgICBkZWYgZXJhc2Uoc2VsZik6CiAgICAgICAgc2VsZi5maWxsKDApCiAgICAgICAgc2VsZi5zaG93KCkKCiAgICBkZWYgcG93ZXJvZmYoc2VsZik6CiAgICAgICAgc2VsZi53cml0ZV9jbWQoX1NFVF9ESVNQIHwgMHgwMCkKCiAgICBkZWYgcG93ZXJvbihzZWxmKToKICAgICAgICBzZWxmLndyaXRlX2NtZChfU0VUX0RJU1AgfCAweDAxKQogICAgICAgIGlmIHNlbGYuZGVsYXk6CiAgICAgICAgICAgIHRpbWUuc2xlZXBfbXMoc2VsZi5kZWxheSkKCiAgICBkZWYgZmxpcChzZWxmLCBmbGFnPU5vbmUsIHVwZGF0ZT1UcnVlKToKICAgICAgICBpZiBmbGFnIGlzIE5vbmU6CiAgICAgICAgICAgIGZsYWcgPSBub3Qgc2VsZi5mbGlwX2VuCiAgICAgICAgbWlyX3YgPSBmbGFnIF4gc2VsZi5yb3RhdGU5MAogICAgICAgIG1pcl9oID0gZmxhZwogICAgICAgIHNlbGYud3JpdGVfY21kKF9TRVRfU0VHX1JFTUFQIHwgKDB4MDEgaWYgbWlyX3YgZWxzZSAweDAwKSkKICAgICAgICBzZWxmLndyaXRlX2NtZChfU0VUX1NDQU5fRElSIHwgKDB4MDggaWYgbWlyX2ggZWxzZSAweDAwKSkKICAgICAgICBzZWxmLmZsaXBfZW4gPSBmbGFnCiAgICAgICAgaWYgdXBkYXRlOgogICAgICAgICAgICBzZWxmLnNob3coVHJ1ZSkgIyBmdWxsIHVwZGF0ZQoKICAgIGRlZiBzbGVlcChzZWxmLCB2YWx1ZSk6CiAgICAgICAgc2VsZi53cml0ZV9jbWQoX1NFVF9ESVNQIHwgKG5vdCB2YWx1ZSkpCgogICAgZGVmIGNvbnRyYXN0KHNlbGYsIGNvbnRyYXN0KToKICAgICAgICBzZWxmLndyaXRlX2NtZChfU0VUX0NPTlRSQVNUKQogICAgICAgIHNlbGYud3JpdGVfY21kKGNvbnRyYXN0KQoKICAgIGRlZiBpbnZlcnQoc2VsZiwgaW52ZXJ0KToKICAgICAgICBzZWxmLndyaXRlX2NtZChfU0VUX05PUk1fSU5WIHwgKGludmVydCAmIDEpKQoKICAgIGRlZiBzaG93KHNlbGYsIGZ1bGxfdXBkYXRlID0gRmFsc2UpOgogICAgICAgICMgc2VsZi4qIGxvb2t1cHMgaW4gbG9vcHMgdGFrZSBzaWduaWZpY2FudCB0aW1lICh+NGZwcykuCiAgICAgICAgKHcsIHAsIGRiLCByYikgPSAoc2VsZi53aWR0aCwgc2VsZi5wYWdlcywKICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRpc3BsYXlidWYsIHNlbGYucmVuZGVyYnVmKQogICAgICAgIGlmIHNlbGYucm90YXRlOTA6CiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKHNlbGYuYnVmc2l6ZSk6CiAgICAgICAgICAgICAgICBkYlt3ICogKGkgJSBwKSArIChpIC8vIHApXSA9IHJiW2ldCiAgICAgICAgaWYgZnVsbF91cGRhdGU6CiAgICAgICAgICAgIHBhZ2VzX3RvX3VwZGF0ZSA9ICgxIDw8IHNlbGYucGFnZXMpIC0gMQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHBhZ2VzX3RvX3VwZGF0ZSA9IHNlbGYucGFnZXNfdG9fdXBkYXRlCiAgICAgICAgI3ByaW50KCJVcGRhdGluZyBwYWdlczogezowOGJ9Ii5mb3JtYXQocGFnZXNfdG9fdXBkYXRlKSkKICAgICAgICBmb3IgcGFnZSBpbiByYW5nZShzZWxmLnBhZ2VzKToKICAgICAgICAgICAgaWYgKHBhZ2VzX3RvX3VwZGF0ZSAmICgxIDw8IHBhZ2UpKToKICAgICAgICAgICAgICAgIHNlbGYud3JpdGVfY21kKF9TRVRfUEFHRV9BRERSRVNTIHwgcGFnZSkKICAgICAgICAgICAgICAgIHNlbGYud3JpdGVfY21kKF9MT1dfQ09MVU1OX0FERFJFU1MgfCAyKQogICAgICAgICAgICAgICAgc2VsZi53cml0ZV9jbWQoX0hJR0hfQ09MVU1OX0FERFJFU1MgfCAwKQogICAgICAgICAgICAgICAgc2VsZi53cml0ZV9kYXRhKGRiWyh3KnBhZ2UpOih3KnBhZ2UrdyldKQogICAgICAgIHNlbGYucGFnZXNfdG9fdXBkYXRlID0gMAoKICAgIGRlZiBwaXhlbChzZWxmLCB4LCB5LCBjb2xvcj1Ob25lKToKICAgICAgICBpZiBjb2xvciBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gc3VwZXIoKS5waXhlbCh4LCB5KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHN1cGVyKCkucGl4ZWwoeCwgeSAsIGNvbG9yKQogICAgICAgICAgICBwYWdlID0geSAvLyA4CiAgICAgICAgICAgIHNlbGYucGFnZXNfdG9fdXBkYXRlIHw9IDEgPDwgcGFnZQoKICAgIGRlZiB0ZXh0KHNlbGYsIHRleHQsIHgsIHksIGNvbG9yPTEpOgogICAgICAgIHN1cGVyKCkudGV4dCh0ZXh0LCB4LCB5LCBjb2xvcikKICAgICAgICBzZWxmLnJlZ2lzdGVyX3VwZGF0ZXMoeSwgeSs3KQoKICAgIGRlZiBsaW5lKHNlbGYsIHgwLCB5MCwgeDEsIHkxLCBjb2xvcik6CiAgICAgICAgc3VwZXIoKS5saW5lKHgwLCB5MCwgeDEsIHkxLCBjb2xvcikKICAgICAgICBzZWxmLnJlZ2lzdGVyX3VwZGF0ZXMoeTAsIHkxKQoKICAgIGRlZiBobGluZShzZWxmLCB4LCB5LCB3LCBjb2xvcik6CiAgICAgICAgc3VwZXIoKS5obGluZSh4LCB5LCB3LCBjb2xvcikKICAgICAgICBzZWxmLnJlZ2lzdGVyX3VwZGF0ZXMoeSkKCiAgICBkZWYgdmxpbmUoc2VsZiwgeCwgeSwgaCwgY29sb3IpOgogICAgICAgIHN1cGVyKCkudmxpbmUoeCwgeSwgaCwgY29sb3IpCiAgICAgICAgc2VsZi5yZWdpc3Rlcl91cGRhdGVzKHksIHkraC0xKQoKICAgIGRlZiBmaWxsKHNlbGYsIGNvbG9yKToKICAgICAgICBzdXBlcigpLmZpbGwoY29sb3IpCiAgICAgICAgc2VsZi5wYWdlc190b191cGRhdGUgPSAoMSA8PCBzZWxmLnBhZ2VzKSAtIDEKCiAgICBkZWYgYmxpdChzZWxmLCBmYnVmLCB4LCB5LCBrZXk9LTEsIHBhbGV0dGU9Tm9uZSk6CiAgICAgICAgc3VwZXIoKS5ibGl0KGZidWYsIHgsIHksIGtleSwgcGFsZXR0ZSkKICAgICAgICBzZWxmLnJlZ2lzdGVyX3VwZGF0ZXMoeSwgeStzZWxmLmhlaWdodCkKCiAgICBkZWYgc2Nyb2xsKHNlbGYsIHgsIHkpOgogICAgICAgICMgbXkgdW5kZXJzdGFuZGluZyBpcyB0aGF0IHNjcm9sbCgpIGRvZXMgYSBmdWxsIHNjcmVlbiBjaGFuZ2UKICAgICAgICBzdXBlcigpLnNjcm9sbCh4LCB5KQogICAgICAgIHNlbGYucGFnZXNfdG9fdXBkYXRlID0gICgxIDw8IHNlbGYucGFnZXMpIC0gMQoKICAgIGRlZiBmaWxsX3JlY3Qoc2VsZiwgeCwgeSwgdywgaCwgY29sb3IpOgogICAgICAgIHN1cGVyKCkuZmlsbF9yZWN0KHgsIHksIHcsIGgsIGNvbG9yKQogICAgICAgIHNlbGYucmVnaXN0ZXJfdXBkYXRlcyh5LCB5K2gtMSkKCiAgICBkZWYgcmVjdChzZWxmLCB4LCB5LCB3LCBoLCBjb2xvcik6CiAgICAgICAgc3VwZXIoKS5yZWN0KHgsIHksIHcsIGgsIGNvbG9yKQogICAgICAgIHNlbGYucmVnaXN0ZXJfdXBkYXRlcyh5LCB5K2gtMSkKCiAgICBkZWYgcmVnaXN0ZXJfdXBkYXRlcyhzZWxmLCB5MCwgeTE9Tm9uZSk6CiAgICAgICAgIyB0aGlzIGZ1bmN0aW9uIHRha2VzIHRoZSB0b3AgYW5kIG9wdGlvbmFsIGJvdHRvbSBhZGRyZXNzIG9mIHRoZSBjaGFuZ2VzIG1hZGUKICAgICAgICAjIGFuZCB1cGRhdGVzIHRoZSBwYWdlc190b19jaGFuZ2UgbGlzdCB3aXRoIGFueSBjaGFuZ2VkIHBhZ2VzCiAgICAgICAgIyB0aGF0IGFyZSBub3QgeWV0IG9uIHRoZSBsaXN0CiAgICAgICAgc3RhcnRfcGFnZSA9IG1heCgwLCB5MCAvLyA4KQogICAgICAgIGVuZF9wYWdlID0gbWF4KDAsIHkxIC8vIDgpIGlmIHkxIGlzIG5vdCBOb25lIGVsc2Ugc3RhcnRfcGFnZQogICAgICAgICMgcmVhcnJhbmdlIHN0YXJ0X3BhZ2UgYW5kIGVuZF9wYWdlIGlmIGNvb3JkaW5hdGVzIHdlcmUgZ2l2ZW4gZnJvbSBib3R0b20gdG8gdG9wCiAgICAgICAgaWYgc3RhcnRfcGFnZSA+IGVuZF9wYWdlOgogICAgICAgICAgICBzdGFydF9wYWdlLCBlbmRfcGFnZSA9IGVuZF9wYWdlLCBzdGFydF9wYWdlCiAgICAgICAgZm9yIHBhZ2UgaW4gcmFuZ2Uoc3RhcnRfcGFnZSwgZW5kX3BhZ2UrMSk6CiAgICAgICAgICAgIHNlbGYucGFnZXNfdG9fdXBkYXRlIHw9IDEgPDwgcGFnZQoKICAgIGRlZiByZXNldChzZWxmLCByZXMpOgogICAgICAgIGlmIHJlcyBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmVzKDEpCiAgICAgICAgICAgIHRpbWUuc2xlZXBfbXMoMSkKICAgICAgICAgICAgcmVzKDApCiAgICAgICAgICAgIHRpbWUuc2xlZXBfbXMoMjApCiAgICAgICAgICAgIHJlcygxKQogICAgICAgICAgICB0aW1lLnNsZWVwX21zKDIwKQoKCmNsYXNzIFNIMTEwNl9JMkMoU0gxMTA2KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB3aWR0aCwgaGVpZ2h0LCBpMmMsIHJlcz1Ob25lLCBhZGRyPTB4M2MsCiAgICAgICAgICAgICAgICAgcm90YXRlPTAsIGV4dGVybmFsX3ZjYz1GYWxzZSwgZGVsYXk9MCk6CiAgICAgICAgc2VsZi5pMmMgPSBpMmMKICAgICAgICBzZWxmLmFkZHIgPSBhZGRyCiAgICAgICAgc2VsZi5yZXMgPSByZXMKICAgICAgICBzZWxmLnRlbXAgPSBieXRlYXJyYXkoMikKICAgICAgICBzZWxmLmRlbGF5ID0gZGVsYXkKICAgICAgICBpZiByZXMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJlcy5pbml0KHJlcy5PVVQsIHZhbHVlPTEpCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyh3aWR0aCwgaGVpZ2h0LCBleHRlcm5hbF92Y2MsIHJvdGF0ZSkKCiAgICBkZWYgd3JpdGVfY21kKHNlbGYsIGNtZCk6CiAgICAgICAgc2VsZi50ZW1wWzBdID0gMHg4MCAgIyBDbz0xLCBEL0MjPTAKICAgICAgICBzZWxmLnRlbXBbMV0gPSBjbWQKICAgICAgICBzZWxmLmkyYy53cml0ZXRvKHNlbGYuYWRkciwgc2VsZi50ZW1wKQoKICAgIGRlZiB3cml0ZV9kYXRhKHNlbGYsIGJ1Zik6CiAgICAgICAgc2VsZi5pMmMud3JpdGV0byhzZWxmLmFkZHIsIGInXHg0MCcrYnVmKQoKICAgIGRlZiByZXNldChzZWxmKToKICAgICAgICBzdXBlcigpLnJlc2V0KHNlbGYucmVzKQoKCmNsYXNzIFNIMTEwNl9TUEkoU0gxMTA2KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB3aWR0aCwgaGVpZ2h0LCBzcGksIGRjLCByZXM9Tm9uZSwgY3M9Tm9uZSwKICAgICAgICAgICAgICAgICByb3RhdGU9MCwgZXh0ZXJuYWxfdmNjPUZhbHNlLCBkZWxheT0wKToKICAgICAgICBkYy5pbml0KGRjLk9VVCwgdmFsdWU9MCkKICAgICAgICBpZiByZXMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJlcy5pbml0KHJlcy5PVVQsIHZhbHVlPTApCiAgICAgICAgaWYgY3MgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGNzLmluaXQoY3MuT1VULCB2YWx1ZT0xKQogICAgICAgIHNlbGYuc3BpID0gc3BpCiAgICAgICAgc2VsZi5kYyA9IGRjCiAgICAgICAgc2VsZi5yZXMgPSByZXMKICAgICAgICBzZWxmLmNzID0gY3MKICAgICAgICBzZWxmLmRlbGF5ID0gZGVsYXkKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHdpZHRoLCBoZWlnaHQsIGV4dGVybmFsX3ZjYywgcm90YXRlKQoKICAgIGRlZiB3cml0ZV9jbWQoc2VsZiwgY21kKToKICAgICAgICBpZiBzZWxmLmNzIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLmNzKDEpCiAgICAgICAgICAgIHNlbGYuZGMoMCkKICAgICAgICAgICAgc2VsZi5jcygwKQogICAgICAgICAgICBzZWxmLnNwaS53cml0ZShieXRlYXJyYXkoW2NtZF0pKQogICAgICAgICAgICBzZWxmLmNzKDEpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5kYygwKQogICAgICAgICAgICBzZWxmLnNwaS53cml0ZShieXRlYXJyYXkoW2NtZF0pKQoKICAgIGRlZiB3cml0ZV9kYXRhKHNlbGYsIGJ1Zik6CiAgICAgICAgaWYgc2VsZi5jcyBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5jcygxKQogICAgICAgICAgICBzZWxmLmRjKDEpCiAgICAgICAgICAgIHNlbGYuY3MoMCkKICAgICAgICAgICAgc2VsZi5zcGkud3JpdGUoYnVmKQogICAgICAgICAgICBzZWxmLmNzKDEpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5kYygxKQogICAgICAgICAgICBzZWxmLnNwaS53cml0ZShidWYpCgogICAgZGVmIHJlc2V0KHNlbGYpOgogICAgICAgIHN1cGVyKCkucmVzZXQoc2VsZi5yZXMpCg==", "ui.py": "", "example_recipes.py": "CgpFWEFNUExFX1JFQ0lQRVNfQ09MTEVDVElPTjogZGljdCA9IHsKICAgICJleGFtcGxlX3JlY2lwZS5yZWNpcGUiOnsKICAgICAgICAibmFtZSI6ICJFWEFNUExFXyBSRUNJUEUiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIG5pY2UgRXhhbXBsZSBDb2NrdGFpbCIsCiAgICAgICAgInZlcnNpb24iOiAiMS4wLjAiLAogICAgICAgICJpbmdyZWRpZW50cyI6IHsiMCI6ICJBIiwgIjEiOiAiQiIsICIyIjogIkMifSwKICAgICAgICAic3RlcHMiOlsKICAgICAgICAgICAgeyJhY3Rpb24iOiAic2NhbGUiLCAiaW5ncmVkaWVudCI6ICIwIiwgImFtb3VudCI6IDEwfSwKICAgICAgICAgICAgeyJhY3Rpb24iOiAiY29uZmlybSIsICJ0ZXh0IjogInNoYWtlIGl0In0sCiAgICAgICAgICAgIHsiYWN0aW9uIjogIndhaXQiLCAidGV4dCI6ICJ3YWl0IGZvciBpdCIsICJhbW91bnQiOiAyMH0KICAgICAgICBdCiAgICB9Cn0=", "hx711.py": "ZnJvbSB1dGltZSBpbXBvcnQgc2xlZXBfdXMsIHRpbWUNCmZyb20gbWFjaGluZSBpbXBvcnQgUGluDQpmcm9tIG1pY3JvcHl0aG9uIGltcG9ydCBjb25zdA0KDQpjbGFzcyBIWDcxMUV4Y2VwdGlvbihFeGNlcHRpb24pOg0KICAgIHBhc3MNCg0KDQpjbGFzcyBJbnZhbGlkTW9kZShIWDcxMUV4Y2VwdGlvbik6DQogICAgcGFzcw0KDQoNCmNsYXNzIERldmljZUlzTm90UmVhZHkoSFg3MTFFeGNlcHRpb24pOg0KICAgIHBhc3MNCg0KDQpjbGFzcyBIWDcxMShvYmplY3QpOg0KICAgICIiIg0KICAgIE1pY3JvcHl0aG9uIGRyaXZlciBmb3IgQXZpYSBTZW1pY29uZHVjdG9yJ3MgSFg3MTENCiAgICAyNC1CaXQgQW5hbG9nLXRvLURpZ2l0YWwgQ29udmVydGVyDQogICAgIiIiDQogICAgQ0hBTk5FTF9BXzEyOCA9IGNvbnN0KDEpDQogICAgQ0hBTk5FTF9BXzY0ID0gY29uc3QoMykNCiAgICBDSEFOTkVMX0JfMzIgPSBjb25zdCgyKQ0KDQogICAgREFUQV9CSVRTID0gY29uc3QoMjQpDQogICAgTUFYX1ZBTFVFID0gY29uc3QoMHg3ZmZmZmYpDQogICAgTUlOX1ZBTFVFID0gY29uc3QoMHg4MDAwMDApDQogICAgUkVBRFlfVElNRU9VVF9TRUMgPSBjb25zdCg1KQ0KICAgIFNMRUVQX0RFTEFZX1VTRUMgPSBjb25zdCg4MCkNCiAgICANCiAgICANCiAgICBkZWYgX19pbml0X18oc2VsZiwgZF9vdXQ6IGludCwgcGRfc2NrOiBpbnQsIGNoYW5uZWw6IGludCA9IENIQU5ORUxfQV8xMjgpOg0KICAgICAgICBzZWxmLmRfb3V0X3BpbiA9IFBpbihkX291dCwgUGluLklOKQ0KICAgICAgICBzZWxmLnBkX3Nja19waW4gPSBQaW4ocGRfc2NrLCBQaW4uT1VULCB2YWx1ZT0wKQ0KICAgICAgICBzZWxmLmNoYW5uZWwgPSBjaGFubmVsDQoNCiAgICBkZWYgX19yZXByX18oc2VsZik6DQogICAgICAgIHJldHVybiAiSFg3MTEgb24gY2hhbm5lbCAlcywgZ2Fpbj0lcyIgJSBzZWxmLmNoYW5uZWwNCg0KICAgIGRlZiBfY29udmVydF9mcm9tX3R3b3NfY29tcGxlbWVudChzZWxmLCB2YWx1ZTogaW50KSAtPiBpbnQ6DQogICAgICAgICIiIg0KICAgICAgICBDb252ZXJ0cyBhIGdpdmVuIGludGVnZXIgZnJvbSB0aGUgdHdvJ3MgY29tcGxlbWVudCBmb3JtYXQuDQogICAgICAgICIiIg0KICAgICAgICBpZiB2YWx1ZSAmICgxIDw8IChzZWxmLkRBVEFfQklUUyAtIDEpKToNCiAgICAgICAgICAgIHZhbHVlIC09IDEgPDwgc2VsZi5EQVRBX0JJVFMNCiAgICAgICAgcmV0dXJuIHZhbHVlDQoNCiAgICBkZWYgX3NldF9jaGFubmVsKHNlbGYpOg0KICAgICAgICAiIiINCiAgICAgICAgSW5wdXQgYW5kIGdhaW4gc2VsZWN0aW9uIGlzIGNvbnRyb2xsZWQgYnkgdGhlDQogICAgICAgIG51bWJlciBvZiB0aGUgaW5wdXQgUERfU0NLIHB1bHNlcw0KICAgICAgICAzIHB1bHNlcyBmb3IgQ2hhbm5lbCBBIHdpdGggZ2FpbiA2NA0KICAgICAgICAyIHB1bHNlcyBmb3IgQ2hhbm5lbCBCIHdpdGggZ2FpbiAzMg0KICAgICAgICAxIHB1bHNlIGZvciBDaGFubmVsIEEgd2l0aCBnYWluIDEyOA0KICAgICAgICAiIiINCiAgICAgICAgZm9yIGkgaW4gcmFuZ2Uoc2VsZi5fY2hhbm5lbCk6DQogICAgICAgICAgICBzZWxmLnBkX3Nja19waW4udmFsdWUoMSkNCiAgICAgICAgICAgIHNlbGYucGRfc2NrX3Bpbi52YWx1ZSgwKQ0KDQogICAgZGVmIF93YWl0KHNlbGYpOg0KICAgICAgICAiIiINCiAgICAgICAgSWYgdGhlIEhYNzExIGlzIG5vdCByZWFkeSB3aXRoaW4gUkVBRFlfVElNRU9VVF9TRUMNCiAgICAgICAgdGhlIERldmljZUlzTm90UmVhZHkgZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duLg0KICAgICAgICAiIiINCiAgICAgICAgdDAgPSB0aW1lKCkNCiAgICAgICAgd2hpbGUgbm90IHNlbGYuaXNfcmVhZHkoKToNCiAgICAgICAgICAgIGlmIHRpbWUoKSAtIHQwID4gc2VsZi5SRUFEWV9USU1FT1VUX1NFQzoNCiAgICAgICAgICAgICAgICByYWlzZSBEZXZpY2VJc05vdFJlYWR5KCkNCg0KICAgIEBwcm9wZXJ0eQ0KICAgIGRlZiBjaGFubmVsKHNlbGYpIC0+IHR1cGxlOg0KICAgICAgICAiIiINCiAgICAgICAgR2V0IGN1cnJlbnQgaW5wdXQgY2hhbm5lbCBpbiBhIGZvcm0NCiAgICAgICAgb2YgYSB0dXBsZSAoQ2hhbm5lbCwgR2FpbikNCiAgICAgICAgIiIiDQogICAgICAgIGlmIHNlbGYuX2NoYW5uZWwgPT0gc2VsZi5DSEFOTkVMX0FfMTI4Og0KICAgICAgICAgICAgcmV0dXJuICdBJywgMTI4DQogICAgICAgIGlmIHNlbGYuX2NoYW5uZWwgPT0gc2VsZi5DSEFOTkVMX0FfNjQ6DQogICAgICAgICAgICByZXR1cm4gJ0EnLCA2NA0KICAgICAgICBpZiBzZWxmLl9jaGFubmVsID09IHNlbGYuQ0hBTk5FTF9CXzMyOg0KICAgICAgICAgICAgcmV0dXJuICdCJywgMzINCg0KICAgIEBjaGFubmVsLnNldHRlcg0KICAgIGRlZiBjaGFubmVsKHNlbGYsIHZhbHVlKToNCiAgICAgICAgIiIiDQogICAgICAgIFNldCBpbnB1dCBjaGFubmVsDQogICAgICAgIEhYNzExLkNIQU5ORUxfQV8xMjggLSBDaGFubmVsIEEgd2l0aCBnYWluIDEyOA0KICAgICAgICBIWDcxMS5DSEFOTkVMX0FfNjQgLSBDaGFubmVsIEEgd2l0aCBnYWluIDY0DQogICAgICAgIEhYNzExLkNIQU5ORUxfQl8zMiAtIENoYW5uZWwgQiB3aXRoIGdhaW4gMzINCiAgICAgICAgIiIiDQogICAgICAgIGlmIHZhbHVlIG5vdCBpbiAoc2VsZi5DSEFOTkVMX0FfMTI4LCBzZWxmLkNIQU5ORUxfQV82NCwgc2VsZi5DSEFOTkVMX0JfMzIpOg0KICAgICAgICAgICAgcmFpc2UgSW52YWxpZE1vZGUoJ0dhaW4gc2hvdWxkIGJlIG9uZSBvZiBIWDcxMS5DSEFOTkVMX0FfMTI4LCBIWDcxMS5DSEFOTkVMX0FfNjQsIEhYNzExLkNIQU5ORUxfQl8zMicpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBzZWxmLl9jaGFubmVsID0gdmFsdWUNCg0KICAgICAgICBpZiBub3Qgc2VsZi5pc19yZWFkeSgpOg0KICAgICAgICAgICAgc2VsZi5fd2FpdCgpDQoNCiAgICAgICAgZm9yIGkgaW4gcmFuZ2Uoc2VsZi5EQVRBX0JJVFMpOg0KICAgICAgICAgICAgc2VsZi5wZF9zY2tfcGluLnZhbHVlKDEpDQogICAgICAgICAgICBzZWxmLnBkX3Nja19waW4udmFsdWUoMCkNCg0KICAgICAgICBzZWxmLl9zZXRfY2hhbm5lbCgpDQoNCiAgICBkZWYgaXNfcmVhZHkoc2VsZikgLT4gYm9vbDoNCiAgICAgICAgIiIiDQogICAgICAgIFdoZW4gb3V0cHV0IGRhdGEgaXMgbm90IHJlYWR5IGZvciByZXRyaWV2YWwsDQogICAgICAgIGRpZ2l0YWwgb3V0cHV0IHBpbiBET1VUIGlzIGhpZ2guDQogICAgICAgICIiIg0KICAgICAgICByZXR1cm4gc2VsZi5kX291dF9waW4udmFsdWUoKSA9PSAwDQoNCiAgICBkZWYgcG93ZXJfb2ZmKHNlbGYpOg0KICAgICAgICAiIiINCiAgICAgICAgV2hlbiBQRF9TQ0sgcGluIGNoYW5nZXMgZnJvbSBsb3cgdG8gaGlnaA0KICAgICAgICBhbmQgc3RheXMgYXQgaGlnaCBmb3IgbG9uZ2VyIHRoYW4gNjAgdXMgLA0KICAgICAgICBIWDcxMSBlbnRlcnMgcG93ZXIgZG93biBtb2RlLg0KICAgICAgICAiIiINCiAgICAgICAgc2VsZi5wZF9zY2tfcGluLnZhbHVlKDApDQogICAgICAgIHNlbGYucGRfc2NrX3Bpbi52YWx1ZSgxKQ0KICAgICAgICBzbGVlcF91cyhzZWxmLlNMRUVQX0RFTEFZX1VTRUMpDQoNCiAgICBkZWYgcG93ZXJfb24oc2VsZik6DQogICAgICAgICIiIg0KICAgICAgICBXaGVuIFBEX1NDSyByZXR1cm5zIHRvIGxvdywgSFg3MTEgd2lsbCByZXNldA0KICAgICAgICBhbmQgZW50ZXIgbm9ybWFsIG9wZXJhdGlvbiBtb2RlLg0KICAgICAgICAiIiINCiAgICAgICAgc2VsZi5wZF9zY2tfcGluLnZhbHVlKDApDQogICAgICAgIHNlbGYuY2hhbm5lbCA9IHNlbGYuX2NoYW5uZWwNCg0KICAgIGRlZiByZWFkKHNlbGYsIHJhdz1GYWxzZSk6DQogICAgICAgICIiIg0KICAgICAgICBSZWFkIGN1cnJlbnQgdmFsdWUgZm9yIGN1cnJlbnQgY2hhbm5lbCB3aXRoIGN1cnJlbnQgZ2Fpbi4NCiAgICAgICAgaWYgcmF3IGlzIFRydWUsIHRoZSBIWDcxMSBvdXRwdXQgd2lsbCBub3QgYmUgY29udmVydGVkDQogICAgICAgIGZyb20gdHdvJ3MgY29tcGxlbWVudCBmb3JtYXQuDQogICAgICAgICIiIg0KICAgICAgICBpZiBub3Qgc2VsZi5pc19yZWFkeSgpOg0KICAgICAgICAgICAgc2VsZi5fd2FpdCgpDQoNCiAgICAgICAgcmF3X2RhdGEgPSAwDQogICAgICAgIGZvciBpIGluIHJhbmdlKHNlbGYuREFUQV9CSVRTKToNCiAgICAgICAgICAgIHNlbGYucGRfc2NrX3Bpbi52YWx1ZSgxKQ0KICAgICAgICAgICAgc2VsZi5wZF9zY2tfcGluLnZhbHVlKDApDQogICAgICAgICAgICByYXdfZGF0YSA9IHJhd19kYXRhIDw8IDEgfCBzZWxmLmRfb3V0X3Bpbi52YWx1ZSgpDQogICAgICAgIHNlbGYuX3NldF9jaGFubmVsKCkNCg0KICAgICAgICBpZiByYXc6DQogICAgICAgICAgICByZXR1cm4gcmF3X2RhdGENCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jb252ZXJ0X2Zyb21fdHdvc19jb21wbGVtZW50KHJhd19kYXRhKQ0KDQo=", "uQR.py": "", "Scales.py": "aW1wb3J0IGh4NzExDQppbXBvcnQgdGltZQ0KaW1wb3J0IG1hdGgNCg0KY2xhc3MgU2NhbGVzKGh4NzExLkhYNzExKToNCiAgICBkZWYgX19pbml0X18oc2VsZiwgZF9vdXQgPSA1LCBwZF9zY2sgPSAxMik6DQogICAgICAgIHN1cGVyKFNjYWxlcywgc2VsZikuX19pbml0X18oZF9vdXQsIHBkX3NjaykNCiAgICAgICAgc2VsZi5vZmZzZXQgPSAwDQoNCiAgICBkZWYgcmVzZXQoc2VsZik6DQogICAgICAgIHNlbGYucG93ZXJfb2ZmKCkNCiAgICAgICAgc2VsZi5wb3dlcl9vbigpDQoNCiAgICBkZWYgdGFyZShzZWxmKToNCiAgICAgICAgc2VsZi5vZmZzZXQgPSBzZWxmLnJlYWQoKQ0KDQogICAgZGVmIHJhd192YWx1ZShzZWxmKToNCiAgICAgICAgcmV0dXJuIHNlbGYucmVhZCgpIC0gc2VsZi5vZmZzZXQNCg0KICAgIGRlZiBzdGFibGVfcmF3X3ZhbHVlKHNlbGYsIHdpdGhvdXRfb2Zmc2V0OiBib29sID0gRmFsc2UsIHJlYWRzPTEwLCBkZWxheV91cz0xMCk6ICAgICANCiAgICAgICAgc3RhYmxlX3ZhbHVlcyA9IFtdDQogICAgICAgIGZvciBpIGluIHJhbmdlKHJlYWRzKToNCiAgICAgICAgICAgIGlmIHdpdGhvdXRfb2Zmc2V0Og0KICAgICAgICAgICAgICAgIHN0YWJsZV92YWx1ZXMuYXBwZW5kKHNlbGYucmVhZCgpKQ0KICAgICAgICAgICAgZWxzZTogICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBzdGFibGVfdmFsdWVzLmFwcGVuZChzZWxmLnJhd192YWx1ZSgpKQ0KICAgICAgICAgICAgdGltZS5zbGVlcF9tcygxMCkNCiAgICAgICAgDQogICAgICAgIHRhcmVfdmFsdWUgPSAwLjANCiAgICAgICAgZm9yIHYgaW4gc3RhYmxlX3ZhbHVlczoNCiAgICAgICAgICAgIHRhcmVfdmFsdWUgPSB0YXJlX3ZhbHVlICsgdg0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHRhcmVfdmFsdWUgLyByZWFkcw0KICAgIA0KIA0KICAgIGRlZiBzZXRfc2NhbGUoc2VsZiwgX3NjYWxlX2ZhY3RvcjogZmxvYXQpOg0KICAgICAgICBpZiBfc2NhbGVfZmFjdG9yIGlzIE5vbmUgb3IgX3NjYWxlX2ZhY3RvciA9PSAwLjA6DQogICAgICAgICAgICBfc2NhbGVfZmFjdG9yID0gMS4wDQogICAgICAgICAgICBwcmludCgic2V0IF9zY2FsZV9mYWN0b3IgdG8gMS4wIGR1ZSBwYXJhbWV0ZXIgX3NjYWxlX2ZhY3RvciBpcyBOb25lIG9yIFplcm8iKQ0KICAgICAgICBzZWxmLlNDQUxFX0ZBQ1RPUiA9IF9zY2FsZV9mYWN0b3INCiAgICAgICAgDQogICAgZGVmIGdldF91bml0KHNlbGYsIF9zdGFibGU6IGJvb2wgPSBGYWxzZSkgLT4gZmxvYXQ6DQogICAgICAgIGlmIHNlbGYuU0NBTEVfRkFDVE9SID09IDAuMDoNCiAgICAgICAgICAgIHNlbGYuU0NBTEVfRkFDVE9SID0gMS4wDQogICAgICAgICAgICANCiAgICAgICAgaWYgX3N0YWJsZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLnJhd192YWx1ZSgpIC8gc2VsZi5TQ0FMRV9GQUNUT1INCiAgICAgICAgDQogICAgICAgIHJldHVybiBzZWxmLnN0YWJsZV9yYXdfdmFsdWUoKSAvIHNlbGYuU0NBTEVfRkFDVE9SDQogICAgICAgIA0KICAgICAgICANCiAgICAgICAgDQogDQo=", "st7789.py": "", "helper.py": "aW1wb3J0IHRpbWUNCmltcG9ydCB1YmluYXNjaWkNCmltcG9ydCBtYWNoaW5lDQppbXBvcnQgY29uZmlnDQppbXBvcnQgbmVvcGl4ZWwNCmltcG9ydCByYW5kb20NCmltcG9ydCBzeXMNCg0KZGVmIG1pbGxpcygpOg0KICAgIHJldHVybiByb3VuZCh0aW1lLnRpbWUoKSAqIDEwMDApDQoNCmRlZiBmbWFwKHMsIGExLCBhMiwgYjEsIGIyKSAtPiBmbG9hdDoNCiAgICByZXR1cm4gYjEgKyAocyAtIGExKSAqIChiMiAtIGIxKSAvIChhMiAtIGExKQ0KDQpkZWYgaW1hcChzLCBhMSwgYTIsIGIxLCBiMikgLT4gaW50Og0KICAgIHJldHVybiBiMSArIChzIC0gYTEpICogKGIyIC0gYjEpIC8gKGEyIC0gYTEpDQoNCmRlZiBnZXRfc3lzdGVtX2lkKCk6DQogICAgcmV0dXJuIHViaW5hc2NpaS5oZXhsaWZ5KG1hY2hpbmUudW5pcXVlX2lkKCkpLmRlY29kZSgndXRmLTgnKQ0KDQpkZWYgc2V0X25lb3BpeGVsX2Z1bGwoX25lb3BpeGVscmluZywgX3IsIF9nLCBfYik6DQogICAgZm9yIGkgaW4gcmFuZ2UoY29uZmlnLkNGR19ORU9QSVhFTF9MRURfQ09VTlQpOg0KICAgICAgICBfbmVvcGl4ZWxyaW5nW2ldID0gKF9yLCBfZywgX2IpDQogICAgX25lb3BpeGVscmluZy53cml0ZSgpDQoNCmRlZiBzZXRfbmVvcGl4ZWxfcmFuZG9tKF9uZW9waXhlbHJpbmcsIF9lcjogYm9vbCA9IEZhbHNlLCBfZWc6IGJvb2wgPSBGYWxzZSwgX2ViOiBib29sID0gVHJ1ZSk6DQogICAgcjogaW50ID0gaW50KDEyOCogcmFuZG9tLnJhbmRvbSgpKSAqIF9lcg0KICAgIGc6IGludCA9IGludCgxMjgqIHJhbmRvbS5yYW5kb20oKSkgKiBfZWcNCiAgICBiOiBpbnQgPSBpbnQoMTI4KiByYW5kb20ucmFuZG9tKCkpICogX2ViDQogICAgc2V0X25lb3BpeGVsX2Z1bGwoX25lb3BpeGVscmluZywgciwgZywgYikNCg0KZGVmIGhhc193aWZpKCk6DQogICAgaWYgJ1Jhc3BiZXJyeSBQaSBQaWNvIFcnIGluIHN0cihzeXMuaW1wbGVtZW50YXRpb24pOg0KICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgIHJldHVybiBGYWxzZQ0K", "vga2_8x8.py": "", "sdcard.py": "", "main.py": "", "glcdfont.py": "", "ili934xnew.py": ""}

def restore_filesystem(_basepath: str = "/", _override: bool = False):
    import ubinascii
    import os


    for k in FILE_DATA:

        if k in os.listdir() and not _override:
            continue
        
        print(k)
        d = FILE_DATA[k]
        ubinascii.a2b_base64(d)

        with open(_basepath + "/" + k, "w") as file:
            file.write(ubinascii.a2b_base64(d))

    # CLEANUP
    del ubinascii
    del os


